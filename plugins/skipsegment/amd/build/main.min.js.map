{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for skip segment\n *\n * @module     ivplugin_skipsegment/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport Ajax from 'core/ajax';\nexport default class SkipSegment extends Base {\n    /**\n     * Initializes the skip segment plugin.\n     * If not in edit mode, sets up an event listener for the 'timeupdate' event.\n     * Filters annotations to find those of type 'skipsegment' and runs the interaction\n     * when the current time falls within the annotation's timestamp range.\n     *\n     * @method init\n     */\n    init() {\n        if (!this.isEditMode()) {\n            let self = this;\n            const skipsegments = this.annotations.filter((annotation) => annotation.type == 'skipsegment');\n\n            if (skipsegments.length === 0) {\n                return;\n            }\n\n            $(document).on('timeupdate.skipsegment', async function(e) {\n                if (!self.main) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n\n                let annotation = skipsegments.find((annotation) => {\n                    return annotation.timestamp < t && annotation.title > t;\n                });\n\n                if (annotation === undefined) {\n                    // Remove #skipsegment if no annotation is found.\n                    if ($('#skipsegment').length > 0) {\n                        $('#skipsegment').remove();\n                    }\n                    return;\n                }\n\n                // If the skip segment is already displayed, do not run the interaction again.\n                if ($('#wrapper #skipsegment').length > 0) {\n                    return;\n                }\n\n                let forced = true;\n                if ((!self.options.isCompleted && annotation.intg1 == 2) ||\n                    (self.options.isCompleted && annotation.intg2 == 2)) {\n                    forced = false;\n                }\n\n                if (forced) {\n                    await self.player.seek(Number(annotation.title));\n                    await self.runInteraction(annotation);\n                } else {\n                    await self.runInteraction(annotation);\n                }\n            });\n\n            $(document).off('click', '.btn#skipsegment').on('click', '.btn#skipsegment', async function(e) {\n                e.preventDefault();\n                let timestamp = $(this).data('timestamp');\n                if (!self.isBetweenStartAndEnd(timestamp)) {\n                    return;\n                }\n                // Remove the skip segment button.\n                $('#skipsegment').remove();\n                // Seek the video player to the specified timestamp.\n                await self.player.seek(Number(timestamp));\n                self.player.play();\n            });\n        }\n    }\n    /**\n     * Renders the edit item for the skip segment plugin.\n     *\n     * @param {Object} annotations - The annotations object.\n     * @param {jQuery} listItem - The jQuery object representing the list item.\n     * @param {Object} item - The item object containing details of the segment.\n     * @returns {jQuery} The modified list item with the rendered edit item.\n     */\n    renderEditItem(annotations, listItem, item) {\n        listItem = super.renderEditItem(annotations, listItem, item);\n        listItem.find('[data-editable]').removeAttr('data-editable');\n        listItem.find('.btn.copy').remove();\n        listItem.find('.title').replaceWith(`<span class=\"skipend timestamp\n            bg-light px-2 py-1 iv-rounded-sm text-truncate\"\n            data-timestamp=\"${item.title}\">${this.convertSecondsToHMS(item.title, this.totaltime < 3600, true)}</span>`);\n        if (this.isSkipped(item.timestamp)) {\n            listItem.find('.skipend').after(`<span class=\"badge iv-badge-warning iv-ml-2\">\n                            ${M.util.get_string('skipped', 'ivplugin_skipsegment')}</span>`);\n        }\n        return listItem;\n    }\n\n    /**\n     * Adds an annotation to the interactive video.\n     *\n     * @param {Array} annotations - The list of current annotations.\n     * @param {number} timestamp - The timestamp at which to add the annotation.\n     * @param {number} coursemodule - The course module ID.\n     * @returns {Promise<void>} A promise that resolves when the annotation is added.\n     */\n    async addAnnotation(annotations, timestamp, coursemodule) {\n        let self = this;\n        let data = {\n            title: timestamp + 5 > this.end ? this.end : timestamp + 5,\n            timestamp: timestamp,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            intg1: 1,\n            intg2: 1,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n            advanced: JSON.stringify({\n                \"visiblebeforecompleted\": \"1\",\n                \"visibleaftercompleted\": null,\n                \"clickablebeforecompleted\": \"1\",\n                \"clickableaftercompleted\": null,\n                \"replaybehavior\": \"1\",\n            }),\n        };\n        let ajax = await Ajax.call([{\n            methodname: 'ivplugin_skipsegment_add_skip',\n            args: {\n                skipdata: JSON.stringify(data),\n                contextid: M.cfg.contextid,\n            },\n            contextid: M.cfg.contextid,\n        }])[0];\n\n        let newAnnotation = JSON.parse(ajax.data);\n        self.dispatchEvent('annotationupdated', {\n            annotation: newAnnotation,\n            action: 'add'\n        });\n    }\n\n    /**\n     * Handles the event when the edit form is loaded.\n     *\n     * @param {Object} form - The form object that is being edited.\n     * @param {Event} event - The event object associated with the form loading.\n     * @returns {Object} - An object containing the form and event.\n     *\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        const body = super.onEditFormLoaded(form, event);\n        body.on('change', '[name=titleassist]', function(e) {\n            e.preventDefault();\n            const originalValue = $(this).data('initial-value');\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'ivplugin_skipsegment'));\n                $(this).val(originalValue);\n                return;\n            }\n\n            // Convert the timestamp to seconds.\n            const parts = $(this).val().split(':');\n            const timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                const message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val(originalValue);\n                return;\n            }\n\n            // Make sure the title assist is not the same as the timestamp assist or less than the timestamp assist\n            if (timestamp <= Number($('[name=timestamp]').val())) {\n                self.addNotification(M.util.get_string('segmentendmustbegreaterthantimestamp', 'mod_interactivevideo'));\n                $(this).val(originalValue);\n                return;\n            }\n\n            $('[name=title]').val(timestamp);\n        });\n        return {form, event};\n    }\n\n    /**\n     * Renders an annotation on the video navigation timeline.\n     *\n     * @param {Object} annotation - The annotation object to be rendered.\n     * @param {number} annotation.timestamp - The timestamp of the annotation.\n     * @param {string} annotation.title - The title of the annotation.\n     * @param {string} annotation.type - The type of the annotation.\n     * @param {string} annotation.id - The unique identifier of the annotation.\n     */\n    renderItemOnVideoNavigation(annotation) {\n        let self = this;\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        this.totaltime = this.totaltime || this.end - this.start;\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        const length = (Number(annotation.title) - Number(annotation.timestamp)) / this.totaltime * 100;\n        if (this.isVisible(annotation) && !this.isEditMode()) {\n            $(\"#video-nav ul\").append(`<li class=\"annotation ${annotation.type}\n             ${this.isClickable(annotation) ? '' : 'no-pointer-events'} position-absolute bg-dark progress-bar-striped progress-bar\"\n              data-timestamp=\"${annotation.timestamp}\" data-id=\"${annotation.id}\"\n               style=\"left: ${percentage}%; width: ${length}%;\" data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n               data${self.isBS5 ? '-bs' : ''}-container=\"#wrapper\" data${self.isBS5 ? '-bs' : ''}-trigger=\"hover\"\n         data${self.isBS5 ? '-bs' : ''}-html=\"true\"\n          data${self.isBS5 ? '-bs' : ''}-title='<i class=\"${this.prop.icon}\"></i>'></li>`);\n        }\n        if (this.isEditMode()) {\n            let background = annotation.intg1 == 2 || annotation.intg2 == 2 ? 'rgba(161, 161, 161, 0.5)' : 'rgba(0,0,0,0.75)';\n            $(\"#video-timeline-wrapper\").append(`<div class=\"position-absolute skipsegment cursor-pointer\"\n                 data-timestamp=\"${annotation.timestamp}\" data-id=\"${annotation.id}\"\n                 style=\"height: 100%; left: ${percentage}%; width: ${length}%;background: ${background};\">\n                 <div class=\"position-absolute w-100 text-center px-1 delete-skipsegment\">\n                 <i class=\"bi bi-trash3 text-white fs-unset\"></i></div></div>`);\n        }\n    }\n    /**\n     * Executes the interaction for skipping a segment in the video.\n     *\n     * This function appends a skip segment icon to the video block, seeks the video player to the specified annotation time,\n     * updates the progress bar, and then plays the video.\n     * The skip segment icon is displayed for a short duration before being removed.\n     *\n     * @param {Object} annotation - The annotation object containing the title which represents the time to seek to.\n     * @returns {Promise<void>} A promise that resolves when the interaction is complete.\n     */\n    async runInteraction(annotation) {\n        if (this.isEditMode()) {\n            return;\n        }\n\n        let self = this;\n        if (!self.main) {\n            return;\n        }\n        let forced = true;\n        if ((!self.options.isCompleted && annotation.intg1 == 2) ||\n            (self.options.isCompleted && annotation.intg2 == 2)) {\n            forced = false;\n        }\n        if (forced) {\n            $('#wrapper').append(`<div id=\"skipsegment\"\n                    class=\"text-white position-absolute p-3 hide bg-transparent\">\n                    <i class=\"${this.prop.icon}\"></i>\n                 </div>`);\n            $('#skipsegment').fadeIn(300);\n            await this.player.seek(Number(annotation.title) + 0.1);\n            this.player.pause();\n            if (annotation.title >= this.end) {\n                self.dispatchEvent('iv:playerEnded', {});\n            }\n            if (this.isEditMode()) {\n                return;\n            }\n            setTimeout(() => {\n                $('#skipsegment').remove();\n                self.player.play();\n            }, 300);\n        } else {\n            // Show a button to notify the user that the segment is skipped.\n            $('#wrapper').append(`<div id=\"skipsegment\" class=\"d-flex align-items-center cursor-pointer\n                 position-absolute btn btn-lg btn-rounded pulse-sm hide shadow\" data-timestamp=\"${annotation.title}\"\n                 style=\"bottom: 2rem;right: 1rem; text-shadow: none;\">\n                    ${M.util.get_string('skip', 'mod_interactivevideo')}\n                    <i class=\"bi bi-chevron-bar-right iv-ml-1 fs-unset\"></i>\n                </div>`);\n            $('#skipsegment').fadeIn(300);\n            self.player.play();\n        }\n    }\n}"],"names":["SkipSegment","Base","init","this","isEditMode","self","skipsegments","annotations","filter","annotation","type","length","document","on","async","e","main","t","originalEvent","detail","time","find","timestamp","title","undefined","remove","forced","options","isCompleted","intg1","intg2","player","seek","Number","runInteraction","off","preventDefault","data","isBetweenStartAndEnd","play","renderEditItem","listItem","item","super","removeAttr","replaceWith","convertSecondsToHMS","totaltime","isSkipped","after","M","util","get_string","coursemodule","end","contextid","cfg","prop","name","courseid","course","cmid","annotationid","interaction","hascompletion","advanced","JSON","stringify","ajax","Ajax","call","methodname","args","skipdata","newAnnotation","parse","dispatchEvent","action","onEditFormLoaded","form","event","originalValue","validateTimestampFormat","val","addNotification","parts","split","message","start","renderItemOnVideoNavigation","percentage","isVisible","append","isClickable","id","isBS5","icon","background","fadeIn","pause","setTimeout"],"mappings":"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"}