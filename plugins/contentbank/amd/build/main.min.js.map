{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/* eslint-disable complexity */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for content bank\n *\n * @module     ivplugin_contentbank/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport contentbankutil from 'ivplugin_contentbank/util';\nimport ModalForm from 'core_form/modalform';\nimport Base from 'mod_interactivevideo/type/base';\nimport {notifyFilterContentUpdated as notifyFilter} from 'core_filters/events';\n\nexport default class ContentBank extends Base {\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        let body = form.modal.modal.find('.modal-body');\n        contentbankutil.init(M.cfg.courseContextId);\n        // Refresh the content from the content bank.\n        body.off('click', '#refreshcontentbank').on('click', '#refreshcontentbank', function(e) {\n            e.preventDefault();\n            $(this).find('i').addClass('fa-spin');\n            const currentid = $('[name=contentid]').val();\n            $('.contentbank-container').html(`<div class=\"d-flex justify-content-center align-items-center\"\n            style=\"height: 150px;\"><div class=\"spinner-grow text-secondary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span></div></div>`);\n            contentbankutil.refreshContentBank(currentid, M.cfg.courseContextId, $(this).data('editable'), function() {\n                $('#refreshcontentbank i').removeClass('fa-spin');\n            });\n        });\n\n        // Upload a new content.\n        body.off('click', '#uploadcontentbank').on('click', '#uploadcontentbank', function(e) {\n            e.preventDefault();\n            const uploadForm = new ModalForm({\n                formClass: \"core_contentbank\\\\form\\\\upload_files\",\n                args: {\n                    contextid: M.cfg.courseContextId,\n                },\n                modalConfig: {\n                    title: M.util.get_string('uploadcontent', 'ivplugin_contentbank')\n                }\n            });\n\n            uploadForm.addEventListener(uploadForm.events.FORM_SUBMITTED, (e) => {\n                self.addNotification(M.util.get_string('contentuploaded', 'ivplugin_contentbank'), 'success');\n                const returnurl = e.detail.returnurl;\n                const contentid = returnurl.match(/id=(\\d+)/)[1];\n                $('[name=contentid]').val(contentid);\n                setTimeout(function() {\n                    $('#refreshcontentbank').trigger('click');\n                }, 1000);\n            });\n\n            uploadForm.addEventListener(uploadForm.events.ERROR, () => {\n                self.addNotification(M.util.get_string('contentuploaderror', 'ivplugin_contentbank'));\n            });\n\n            uploadForm.show();\n        });\n\n        self.timepicker({\n            modal: true,\n            disablelist: true,\n            required: true,\n        });\n\n        return {form, event};\n    }\n\n    /**\n     * Handles the rendering of content annotations and applies specific classes and conditions.\n     *\n     * @param {Object} annotation - The annotation object containing details about the content.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not meet the conditions for completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        $(`#message[data-id='${annotation.id}']`).addClass('hascontentbank');\n        if (annotation.hascompletion == 1\n            && annotation.completiontracking != 'manual' && !annotation.completed) {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Initialize the container to display the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        super.renderContainer(annotation);\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find('.modal-body').addClass('p-0');\n        if (annotation.completiontracking !== 'view') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2 info\" data-toggle=\"tooltip\"\n            data-container=\"#wrapper\" data-trigger=\"hover\"\n            data-title=\"${M.util.get_string(\"completionon\" + annotation.completiontracking, \"mod_interactivevideo\")}\"></i>`);\n            if (annotation.completed) {\n                return;\n            }\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('show');\n            }, 1000);\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('hide');\n            }, 3000);\n        }\n    }\n\n    /**\n     * Resizes the iframe within a modal body based on the height of the iframe content.\n     *\n     * @param {Object} annotation - The annotation object containing the id.\n     */\n    resizeIframe(annotation) {\n        const modalbody = document.querySelector(`#message[data-id='${annotation.id}'] .modal-body`);\n        if (!modalbody) {\n            return;\n        }\n        const resizeObserver = new ResizeObserver(() => {\n            const iframe = modalbody.querySelector('iframe.h5p-player');\n            if (iframe) {\n                const height = iframe.scrollHeight;\n                modalbody.style.height = `${height + 2000}px`;\n            }\n        });\n\n        resizeObserver.observe(modalbody);\n    }\n\n    /**\n     * Apply the content to the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {Promise<void>} - Returns a promise that resolves when the content is applied.\n     * @override\n     */\n    async applyContent(annotation) {\n        let self = this;\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        // Remove .modal-dialog-centered class to avoid flickering when H5P content resizes.\n        $message.removeClass('modal-dialog-centered');\n\n        let annoid = annotation.id;\n\n        const onPassFail = async(passed, time) => {\n            let label = passed ? 'continue' : 'rewatch';\n            $message.find('#content')\n                .append(`<button class=\"btn btn-${passed ? 'success' : 'danger'} mt-2 btn-rounded\"\n                    id=\"passfail\" data-timestamp=\"${time}\"><i class=\"fa fa-${passed ? 'play' : 'redo'} mr-2\"></i>\n                ${M.util.get_string(label, 'ivplugin_contentbank')}\n                </button>`);\n            $message.find('iframe').addClass('no-pointer-events');\n        };\n\n        $(document).off('click', '#passfail').on('click', '#passfail', function(e) {\n            e.preventDefault();\n            let time = $(this).data('timestamp');\n            self.dispatchEvent('interactionclose', {\n                annotation: annotation,\n            });\n            self.player.seek(time);\n            self.player.play();\n            $(this).remove();\n        });\n\n        const xAPICheck = (annotation, listenToEvents = true) => {\n            const detectH5P = () => {\n                let H5P;\n                try { // Try to get the H5P object.\n                    H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                } catch (e) {\n                    H5P = null;\n                }\n                if (typeof H5P !== 'undefined' && H5P !== null) {\n                    if (H5P.externalDispatcher === undefined) {\n                        requestAnimationFrame(detectH5P);\n                        return;\n                    }\n                    if (!listenToEvents) {\n                        return;\n                    }\n                    if (self.isEditMode()) {\n                        $message.find(`#title .btns .xapi`).remove();\n                        $message.find(`#title .btns`)\n                            .prepend(`<div class=\"xapi alert-secondary px-2\n                         rounded-pill\">${M.util.get_string('xapicheck', 'ivplugin_contentbank')}</div>`);\n                    }\n                    let statements = [];\n                    try {\n                        H5P.externalDispatcher.on('xAPI', async function(event) {\n                            if (event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered') {\n                                statements.push(event.data.statement);\n                            }\n                            if ((event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                && event.data.statement.object.id.indexOf('subContentId') < 0) {\n                                if (self.isEditMode()) {\n                                    $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                    $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                        .prepend(`<div class=\"xapi alert-success d-inline px-2 rounded-pill\">\n                                        <i class=\"fa fa-check mr-2\"></i>\n                                        ${M.util.get_string('xapieventdetected', 'ivplugin_h5pupload')}\n                                        </div>`);\n                                    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                    audio.play();\n                                    return;\n                                }\n                                let complete = false;\n                                let textclass = '';\n                                if (annotation.completiontracking == 'completepass'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled >= 0.5) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'completefull'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled == 1) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'complete') {\n                                    complete = true;\n                                }\n                                if (event.data.statement.result.score.scaled < 0.5) {\n                                    textclass = 'fa fa-check text-danger';\n                                } else if (event.data.statement.result.score.scaled < 1) {\n                                    textclass = 'fa fa-check text-success';\n                                } else {\n                                    textclass = 'bi bi-check2-all text-success';\n                                }\n                                if (complete && !annotation.completed) {\n                                    let details = {};\n                                    const completeTime = new Date();\n                                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                                    details.xp = annotation.xp;\n                                    if (annotation.char1 == '1') { // Partial points.\n                                        details.xp = (event.data.statement.result.score.scaled * annotation.xp).toFixed(2);\n                                    }\n                                    details.duration = windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime);\n                                    details.timecompleted = completeTime.getTime();\n                                    const completiontime = completeTime.toLocaleString();\n                                    let duration = self.formatTime(details.duration / 1000);\n                                    details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                     data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                     ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span>\n                     <span><i class=\"bi bi-list-check mr-2\"></i>\n                     ${event.data.statement.result.score.raw}/${event.data.statement.result.score.max}</span></span>'>\n                     <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                    details.details = statements;\n                                    self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                }\n\n                                if (annotation.text1 != '') {\n                                    let condition = JSON.parse(annotation.text1);\n                                    if (event.data.statement.result.score.scaled < 0.5) {\n                                        if (condition.gotoonfailed == 1 && condition.forceonfailed != 1) {\n                                            onPassFail(false, condition.timeonfailed);\n                                        } else if (condition.gotoonfailed == 1 && condition.forceonfailed == 1) {\n                                            setTimeout(function() {\n                                                self.dispatchEvent('interactionclose', {\n                                                    annotation: annotation,\n                                                });\n                                                self.player.seek(condition.timeonfailed);\n                                                self.player.play();\n                                            }, 1000);\n                                        }\n                                        if (condition.showtextonfailed == 1 && condition.textonfailed.text != '') {\n                                            let textonfailed = await self.formatContent(condition.textonfailed.text);\n                                            $message.find('.passfail-message').remove();\n                                            $message.find(`#content`)\n                                                .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                            ${textonfailed}</div>`);\n                                            notifyFilter($('.passfail-message'));\n                                        }\n                                    } else {\n                                        if (condition.gotoonpassing == 1 && condition.forceonpassing != 1) {\n                                            onPassFail(true, condition.timeonpassing);\n                                        } else if (condition.gotoonpassing == 1 && condition.forceonpassing == 1) {\n                                            setTimeout(function() {\n                                                self.dispatchEvent('interactionclose', {\n                                                    annotation: annotation,\n                                                });\n                                                self.player.seek(condition.timeonpassing);\n                                                self.player.play();\n                                            }, 1000);\n                                        }\n                                        if (condition.showtextonpassing == 1 && condition.textonpassing.text != '') {\n                                            let textonpassing = await self.formatContent(condition.textonpassing.text);\n                                            $message.find('.passfail-message').remove();\n                                            $message.find(`#content`)\n                                                .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                            ${textonpassing}</div>`);\n                                            notifyFilter($('.passfail-message'));\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                    } catch (e) {\n                        requestAnimationFrame(detectH5P);\n                    }\n                } else {\n                    requestAnimationFrame(detectH5P);\n                }\n            };\n            requestAnimationFrame(detectH5P);\n        };\n\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await self.render(annotation);\n        }\n        const data = self.cache[annotation.id];\n\n        $message.find(`.modal-body`).html(data).attr('id', 'content').fadeIn(300);\n        if (annotation.hascompletion != 1 || self.isEditMode()) {\n            return;\n        }\n        if (!annotation.completed && annotation.completiontracking == 'view') {\n            self.completiononview(annotation);\n        }\n        xAPICheck(annotation, !annotation.completed && annotation.completiontracking != 'manual');\n    }\n}"],"names":["ContentBank","Base","onEditFormLoaded","form","event","self","this","body","modal","find","init","M","cfg","courseContextId","off","on","e","preventDefault","addClass","currentid","val","html","refreshContentBank","data","removeClass","uploadForm","ModalForm","formClass","args","contextid","modalConfig","title","util","get_string","addEventListener","events","FORM_SUBMITTED","addNotification","contentid","detail","returnurl","match","setTimeout","trigger","ERROR","show","timepicker","disablelist","required","postContentRender","annotation","callback","id","hascompletion","completiontracking","completed","renderContainer","$message","$completiontoggle","remove","before","tooltip","resizeIframe","modalbody","document","querySelector","ResizeObserver","iframe","height","scrollHeight","style","observe","annoid","onPassFail","async","passed","time","label","append","dispatchEvent","player","seek","play","cache","isEditMode","render","attr","fadeIn","completiononview","listenToEvents","detectH5P","H5P","contentWindow","undefined","externalDispatcher","requestAnimationFrame","prepend","statements","statement","verb","push","object","indexOf","Audio","wwwroot","complete","textclass","result","score","scaled","details","completeTime","Date","windowAnno","window","ANNOS","x","xp","char1","toFixed","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","toggleCompletion","text1","condition","JSON","parse","gotoonfailed","forceonfailed","timeonfailed","showtextonfailed","textonfailed","text","formatContent","gotoonpassing","forceonpassing","timeonpassing","showtextonpassing","textonpassing","xAPICheck"],"mappings":"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"}