{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable complexity */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for content bank\n *\n * @module     ivplugin_contentbank/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport contentbankutil from 'ivplugin_contentbank/util';\nimport ModalForm from 'core_form/modalform';\nimport Base from 'mod_interactivevideo/type/base';\nimport {notifyFilterContentUpdated as notifyFilter} from 'core_filters/events';\nimport Notification from 'core/notification';\n\nexport default class ContentBank extends Base {\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        let body = form.modal.modal.find('.modal-body');\n        contentbankutil.init(M.cfg.courseContextId);\n        // Refresh the content from the content bank.\n        body.off('click', '#refreshcontentbank').on('click', '#refreshcontentbank', function(e) {\n            e.preventDefault();\n            $(this).find('i').addClass('fa-spin');\n            const currentid = $('[name=contentid]').val();\n            $('.contentbank-container').html(`<div class=\"d-flex justify-content-center align-items-center\"\n            style=\"height: 150px;\"><div class=\"spinner-grow text-secondary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span></div></div>`);\n            contentbankutil.refreshContentBank(currentid, M.cfg.courseContextId, $(this).data('editable'), function() {\n                $('#refreshcontentbank i').removeClass('fa-spin');\n            });\n        });\n\n        // Upload a new content.\n        body.off('click', '#uploadcontentbank').on('click', '#uploadcontentbank', function(e) {\n            e.preventDefault();\n            const uploadForm = new ModalForm({\n                formClass: \"core_contentbank\\\\form\\\\upload_files\",\n                args: {\n                    contextid: M.cfg.courseContextId,\n                },\n                modalConfig: {\n                    title: M.util.get_string('uploadcontent', 'ivplugin_contentbank')\n                }\n            });\n\n            uploadForm.addEventListener(uploadForm.events.FORM_SUBMITTED, (e) => {\n                self.addNotification(M.util.get_string('contentuploaded', 'ivplugin_contentbank'), 'success');\n                const returnurl = e.detail.returnurl;\n                const contentid = returnurl.match(/id=(\\d+)/)[1];\n                $('[name=contentid]').val(contentid);\n                setTimeout(function() {\n                    $('#refreshcontentbank').trigger('click');\n                }, 1000);\n            });\n\n            uploadForm.addEventListener(uploadForm.events.ERROR, () => {\n                self.addNotification(M.util.get_string('contentuploaderror', 'ivplugin_contentbank'));\n            });\n\n            uploadForm.show();\n        });\n\n        self.timepicker({\n            modal: true,\n            disablelist: true,\n            required: true,\n        });\n\n        return {form, event};\n    }\n\n    /**\n     * Handles the rendering of content annotations and applies specific classes and conditions.\n     *\n     * @param {Object} annotation - The annotation object containing details about the content.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not meet the conditions for completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        const $message = $(`#message[data-id='${annotation.id}']`);\n        $message.addClass('hascontentbank');\n        $message.find('.modal-dialog').addClass('modal-xl');\n        if (annotation.completiontracking !== 'view') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill iv-mr-2 info\" data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n            data${self.isBS5 ? '-bs' : ''}-container=\"#message\" data${self.isBS5 ? '-bs' : ''}-trigger=\"hover\"\n            title=\"${M.util.get_string(\"completionon\" + annotation.completiontracking, \"mod_interactivevideo\")}\"></i>`);\n            if (!annotation.completed) {\n                setTimeout(function() {\n                    $message.find(`[data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"]`).tooltip('show');\n                }, 1000);\n                setTimeout(function() {\n                    $message.find(`[data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"]`).tooltip('hide');\n                }, 3000);\n            }\n        }\n        if (annotation.hascompletion == 1\n            && annotation.completiontracking != 'manual' && !annotation.completed) {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Initialize the container to display the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        super.renderContainer(annotation);\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find('.modal-body').addClass('p-0');\n\n    }\n\n    /**\n     * Resizes the iframe within a modal body based on the height of the iframe content.\n     *\n     * @param {Object} annotation - The annotation object containing the id.\n     */\n    resizeIframe(annotation) {\n        const modalbody = document.querySelector(`#message[data-id='${annotation.id}'] .modal-body`);\n        if (!modalbody) {\n            return;\n        }\n        const resizeObserver = new ResizeObserver(() => {\n            const iframe = modalbody.querySelector('iframe.h5p-player');\n            if (iframe) {\n                const height = iframe.scrollHeight;\n                modalbody.style.height = `${height + 2000}px`;\n            }\n        });\n\n        resizeObserver.observe(modalbody);\n    }\n\n    /**\n     * Apply the content to the annotation\n     * @param {Object} annotation The annotation object\n     * @param {Object} existingstate The existing state of the annotation\n     * @returns {Promise<void>} - Returns a promise that resolves when the content is applied.\n     * @override\n     */\n    async applyContent(annotation, existingstate) {\n        let self = this;\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        // Remove .modal-dialog-centered class to avoid flickering when H5P content resizes.\n        $message.removeClass('modal-dialog-centered');\n\n        let annoid = annotation.id;\n\n        const onPassFail = async(passed, time) => {\n            let label = passed ? 'continue' : 'rewatch';\n            $message.find('#content')\n                .append(`<button class=\"btn btn-${passed ? 'success' : 'danger'} mt-2 btn-rounded\"\n                    id=\"passfail\" data-timestamp=\"${time}\"><i class=\"fa fa-${passed ? 'play' : 'redo'} iv-mr-2\"></i>\n                ${M.util.get_string(label, 'ivplugin_contentbank')}\n                </button>`);\n            $message.find('iframe').addClass('no-pointer-events');\n        };\n\n        $(document).off('click', '#passfail').on('click', '#passfail', function(e) {\n            e.preventDefault();\n            let time = $(this).data('timestamp');\n            $message.find('.interaction-dismiss').trigger('click');\n            self.player.seek(time);\n            self.player.play();\n            $(this).remove();\n        });\n\n        let saveState = 0;\n        let condition = null;\n        if (annotation.text1 != '' && annotation.text1 !== null) {\n            condition = JSON.parse(annotation.text1);\n        }\n\n        if (JSON.parse(annotation.advanced).savecurrentstate == 1) {\n            saveState = 1;\n        }\n\n        const afterLog = async(log) => {\n            const xAPICheck = (annotation) => {\n                const detectH5P = () => {\n                    let H5P;\n                    try { // Try to get the H5P object.\n                        H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                    } catch (e) {\n                        H5P = null;\n                    }\n                    if (typeof H5P !== 'undefined' && H5P !== null) {\n                        if (H5P.externalDispatcher === undefined) {\n                            requestAnimationFrame(detectH5P);\n                            return;\n                        }\n                        if (document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5PIntegration === undefined) {\n                            requestAnimationFrame(detectH5P);\n                            return;\n                        }\n\n                        if (self.isEditMode()) {\n                            $message.find(`#title .btns .xapi`).remove();\n                            $message.find(`#title .btns`)\n                                .prepend(`<div class=\"xapi alert-secondary px-2\n                         iv-rounded-pill\">${M.util.get_string('xapicheck', 'ivplugin_contentbank')}</div>`);\n                        }\n\n                        window.H5PIntegration = document.querySelector(`#message[data-id='${annoid}'] iframe`)\n                            .contentWindow.H5PIntegration || {};\n                        window.H5PIntegration.saveFreq = 1;\n                        let content = window.H5PIntegration.contents;\n                        let id = Object.keys(content)[0];\n                        if (existingstate !== null && existingstate !== undefined) {\n                            log = existingstate;\n                        }\n                        window.H5PIntegration.contents[id].contentUserData[0].state = log;\n                        window.H5P = H5P;\n                        if (annotation.completed) {\n                            return;\n                        }\n                        try {\n                            H5P.externalDispatcher.on('xAPI', async function(event) {\n                                let statement = event.data.statement;\n                                if ((statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                    || statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                    && statement.object.id.indexOf('subContentId') < 0\n                                    && !statement.context.contextActivities.parent) {\n                                    if (self.isEditMode()) {\n                                        $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                        $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                            .prepend(`<div class=\"xapi alert-success d-inline px-2 iv-rounded-pill\">\n                                                    <i class=\"fa fa-check iv-mr-2\"></i>\n                                                    ${M.util.get_string('xapieventdetected', 'ivplugin_contentbank')}\n                                                    </div>`);\n                                        const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                        audio.play();\n                                        return;\n                                    }\n                                    let complete = false;\n                                    let textclass = '';\n                                    let result = statement.result;\n                                    if (annotation.completiontracking == 'completepass'\n                                        && result && result.score.scaled >= 0.5) {\n                                        complete = true;\n                                    } else if (annotation.completiontracking == 'completefull'\n                                        && result && result.score.scaled == 1) {\n                                        complete = true;\n                                    } else if (annotation.completiontracking == 'complete') {\n                                        complete = true;\n                                    }\n                                    if (result.score.scaled < 0.5) {\n                                        textclass = 'fa fa-check text-danger';\n                                    } else if (result.score.scaled < 1) {\n                                        textclass = 'fa fa-check text-success';\n                                    } else {\n                                        textclass = 'bi bi-check2-all text-success';\n                                    }\n                                    if (complete && !annotation.completed) {\n                                        let details = {};\n                                        const completeTime = new Date();\n                                        let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                                        details.xp = annotation.xp;\n                                        if (annotation.char1 == '1') { // Partial points.\n                                            details.xp = (result.score.scaled * annotation.xp).toFixed(2);\n                                        }\n                                        details.duration = windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime);\n                                        details.timecompleted = completeTime.getTime();\n                                        const completiontime = completeTime.toLocaleString();\n                                        let duration = self.formatTime(details.duration / 1000);\n                                        details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                     data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar iv-mr-2\"></i>\n                     ${completiontime}</span><span><i class=\"bi bi-stopwatch iv-mr-2\"></i>${duration}</span>\n                     <span><i class=\"bi bi-list-check iv-mr-2\"></i>\n                     ${result.score.raw}/${result.score.max}</span></span>'>\n                     <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                        details.details = saveState == 1 ? window.H5PIntegration.contents[id].contentUserData[0].state : '';\n                                        // Must wait 1.5 seconds or so to let the saveState finish.\n                                        // Otherwise, the completion will be incomplete.\n                                        setTimeout(function() {\n                                            self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                        }, 1500);\n                                    }\n\n                                    if (condition !== null) {\n                                        if (result.score.scaled < 0.5) {\n                                            if (condition.gotoonfailed == 1 && condition.forceonfailed != 1) {\n                                                onPassFail(false, condition.timeonfailed);\n                                            } else if (condition.gotoonfailed == 1 && condition.forceonfailed == 1) {\n                                                setTimeout(function() {\n                                                    // Close the annotation.\n                                                    $message.find('.interaction-dismiss').trigger('click');\n                                                    self.player.seek(condition.timeonfailed);\n                                                    self.player.play();\n                                                }, 1000);\n                                            }\n                                            if (condition.showtextonfailed == 1 && condition.textonfailed.text != '') {\n                                                let textonfailed = await self.formatContent(condition.textonfailed.text);\n                                                $message.find('.passfail-message').remove();\n                                                $message.find(`#content`)\n                                                    .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                            ${textonfailed}</div>`);\n                                                notifyFilter($('.passfail-message'));\n                                            }\n                                        } else {\n                                            if (condition.gotoonpassing == 1 && condition.forceonpassing != 1) {\n                                                onPassFail(true, condition.timeonpassing);\n                                            } else if (condition.gotoonpassing == 1 && condition.forceonpassing == 1) {\n                                                setTimeout(function() {\n                                                    $message.find('.interaction-dismiss').trigger('click');\n                                                    self.player.seek(condition.timeonpassing);\n                                                    self.player.play();\n                                                }, 1000);\n                                            }\n                                            if (condition.showtextonpassing == 1 && condition.textonpassing.text != '') {\n                                                let textonpassing = await self.formatContent(condition.textonpassing.text);\n                                                $message.find('.passfail-message').remove();\n                                                $message.find(`#content`)\n                                                    .prepend(`<div class=\"alert bg-secondary mt-2 mx-3 passfail-message\">\n                                            ${textonpassing}</div>`);\n                                                notifyFilter($('.passfail-message'));\n                                            }\n                                        }\n                                    }\n                                }\n                            });\n                        } catch (e) {\n                            requestAnimationFrame(detectH5P);\n                        }\n                    } else {\n                        requestAnimationFrame(detectH5P);\n                    }\n                };\n                requestAnimationFrame(detectH5P);\n            };\n            // We don't need to run the render method every time the content is applied. We can cache the content.\n            let firstview = false;\n            if (!self.cache[annotation.id] || self.isEditMode()) {\n                self.cache[annotation.id] = await self.render(annotation);\n                firstview = true;\n            }\n            const data = self.cache[annotation.id];\n\n            $message.find(`.modal-body`).html(data).attr('id', 'content').fadeIn(300);\n\n            xAPICheck(annotation);\n\n            if (existingstate !== null && existingstate !== undefined) {\n                return;\n            }\n\n            if (self.isEditMode()) {\n                return;\n            }\n\n            // If annotation is incomplete, we want to save the state when the interaction is closed.\n            if (!annotation.completed && firstview && saveState == 1) {\n                $(document).on('interactionclose interactionrefresh', async function(e) {\n                    if (e.detail.annotation.id == annotation.id) {\n                        try {\n                            let content = window.H5PIntegration.contents;\n                            let id = Object.keys(content)[0];\n                            let contentuserData = window.H5PIntegration.contents[id].contentUserData[0];\n                            let state = contentuserData.state;\n                            await self.saveLog(annotation, {\n                                text1: JSON.stringify(state),\n                                char1: annotation.type,\n                            }, self.userid, true);\n                        } catch (e) {\n                            window.console.log('Error: ', e);\n                        }\n                    }\n                });\n            }\n            if (annotation.hascompletion != 1) {\n                return;\n            }\n            if (!annotation.completed && annotation.completiontracking == 'view') {\n                self.completiononview(annotation);\n            }\n        };\n\n        if (existingstate !== null && existingstate !== undefined) { // Report view.\n            afterLog(existingstate);\n            return;\n        }\n\n        // Get exiting state.\n        if (self.isEditMode()) {\n            afterLog('');\n            return;\n        }\n        if (saveState !== 1) {\n            afterLog('');\n            return;\n        }\n        let logs = await self.getLogs(annotation, [self.userid]);\n        let log = '';\n        if (logs.length <= 0) {\n            afterLog('');\n            return;\n        }\n        if (logs.length > 0) {\n            log = JSON.parse(logs[0].text1);\n\n            // Show a confirmation message if the state is not empty.\n            if (log !== '' && log !== null) {\n                Notification.saveCancel(\n                    M.util.get_string('resume', 'ivplugin_contentbank'),\n                    M.util.get_string('resumeconfirm', 'ivplugin_contentbank'),\n                    M.util.get_string('resume', 'ivplugin_contentbank'),\n                    function() {\n                        // Do nothing.\n                        afterLog(log);\n                    },\n                    function() {\n                        afterLog('');\n                    }\n                );\n            } else {\n                afterLog(log);\n            }\n        }\n    }\n\n    async getCompletionData(annotation, userid) {\n        let logs = await this.getLogs(annotation, [userid]);\n        let log = '';\n        if (logs.length > 0) {\n            log = JSON.parse(logs[0].text1);\n        }\n        annotation.displayoptions = 'popup';\n        annotation.hascompletion = 0;\n        annotation.completed = true;\n        await this.renderViewer(annotation);\n        this.renderContainer(annotation);\n        this.applyContent(annotation, log);\n        return log;\n    }\n}"],"names":["ContentBank","Base","onEditFormLoaded","form","event","self","this","body","modal","find","init","M","cfg","courseContextId","off","on","e","preventDefault","addClass","currentid","val","html","refreshContentBank","data","removeClass","uploadForm","ModalForm","formClass","args","contextid","modalConfig","title","util","get_string","addEventListener","events","FORM_SUBMITTED","addNotification","contentid","detail","returnurl","match","setTimeout","trigger","ERROR","show","timepicker","disablelist","required","postContentRender","annotation","callback","$message","id","completiontracking","$completiontoggle","remove","before","isBS5","completed","tooltip","hascompletion","renderContainer","resizeIframe","modalbody","document","querySelector","ResizeObserver","iframe","height","scrollHeight","style","observe","existingstate","annoid","onPassFail","async","passed","time","label","append","player","seek","play","saveState","condition","text1","JSON","parse","advanced","savecurrentstate","afterLog","firstview","cache","isEditMode","render","attr","fadeIn","detectH5P","H5P","contentWindow","undefined","externalDispatcher","requestAnimationFrame","H5PIntegration","prepend","window","saveFreq","content","contents","Object","keys","log","contentUserData","state","statement","verb","object","indexOf","context","contextActivities","parent","Audio","wwwroot","complete","textclass","result","score","scaled","details","completeTime","Date","windowAnno","ANNOS","x","xp","char1","toFixed","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","toggleCompletion","gotoonfailed","forceonfailed","timeonfailed","showtextonfailed","textonfailed","text","formatContent","gotoonpassing","forceonpassing","timeonpassing","showtextonpassing","textonpassing","xAPICheck","saveLog","stringify","type","userid","console","completiononview","logs","getLogs","length","saveCancel","displayoptions","renderViewer","applyContent"],"mappings":"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"}