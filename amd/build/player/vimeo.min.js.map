{"version":3,"file":"vimeo.min.js","sources":["../../src/player/vimeo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vimeo Player class\n *\n * @module     mod_interactivevideo/player/vimeo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player;\n\nclass Vimeo {\n    /**\n     * Constructs a new Vimeo player instance.\n     */\n    constructor() {\n        this.type = 'vimeo';\n        this.useAnimationFrame = false;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n    /**\n     * Load player instance.\n     *\n     * @param {string} url - The URL of the Vimeo video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        let showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        // Documented at https://developer.vimeo.com/player/sdk/reference or https://github.com/vimeo/player.js\n        let VimeoPlayer;\n        this.aspectratio = 16 / 9;\n        // Get poster image using oEmbed.\n        var posterUrl = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(url);\n        const oEmbed = await fetch(posterUrl);\n        if (!oEmbed.ok) {\n            dispatchEvent('iv:playerError', {error: 'Video not found'});\n            return;\n        }\n        document.getElementById('video-wrapper').style.display = 'block';\n        const oEmbedData = await oEmbed.json();\n        if (oEmbedData.domain_status_code === 403 || oEmbedData.error) {\n            dispatchEvent('iv:playerError', {error: 'Video not found'});\n        }\n        this.posterImage = oEmbedData.thumbnail_url || '';\n        this.title = oEmbedData.title;\n        this.videoId = oEmbedData.video_id;\n        // Change the dimensions of the poster image to 16:9.\n        this.posterImage = this.posterImage.replace(/_\\d+x\\d+/, '_720x405');\n        this.aspectratio = oEmbedData.width / oEmbedData.height;\n        let self = this;\n        const option = {\n            url: url,\n            width: 1080,\n            height: 720,\n            autoplay: !showControls,\n            controls: showControls,\n            loop: false,\n            muted: true,\n            playsinline: true,\n            background: false,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: false,\n            responsive: false,\n            \"start_time\": start,\n            \"end_time\": end,\n            pip: false,\n            fullscreen: false,\n            \"watch_full_video\": false,\n            keyboard: false,\n            dnt: true,\n            chapters: showControls,\n            \"interactive_markers\": showControls,\n            \"vimeo_logo\": false,\n            \"initial_quality\": '360p',\n        };\n\n        let ready = false;\n        const vimeoEvents = (player) => {\n            player.on('loaded', async function() {\n                let duration = 0;\n                try {\n                    // Without password protection, we can get the duration.\n                    duration = await player.getDuration();\n                } catch (e) {\n                    return;\n                }\n                if (duration > 0) {\n                    end = !end ? duration - 0.1 : Math.min(end, duration - 0.1);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.duration = self.end - self.start;\n                    self.totaltime = Number((duration - 0.1).toFixed(2));\n                    self.title = await player.getVideoTitle();\n                    // Get track list.\n                    // Unset the captions.\n                    player.disableTextTrack();\n                    let tracks = await player.getTextTracks();\n                    if (tracks && tracks.length > 0) {\n                        tracks = tracks.map((track) => {\n                            return {\n                                label: track.label,\n                                code: track.language\n                            };\n                        });\n                    }\n\n                    if (!opts.passwordprotected) {\n                        dispatchEvent('iv:playerLoaded', {\n                            tracks: tracks,\n                            qualities: self.getQualities(),\n                        });\n                    }\n\n                    ready = true;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    // Unmute the video\n                    player.setVolume(1);\n                } else {\n                    document.getElementById('video-wrapper').style.display = 'block';\n                    const startScreen = document.getElementById('start-screen');\n                    if (startScreen) {\n                        startScreen.classList.add('d-none');\n                    }\n\n                    const videoBlock = document.querySelector('.video-block');\n                    if (videoBlock) {\n                        videoBlock.classList.add('no-pointer', 'bg-transparent');\n                    }\n\n                    const annotationCanvas = document.getElementById('annotation-canvas');\n                    if (annotationCanvas) {\n                        annotationCanvas.classList.remove('d-none', 'w-0');\n                    }\n                }\n            });\n\n            if (!showControls) {\n                player.on('play', async function() {\n                    if (!ready) {\n                        // Pause the video if it is not ready.\n                        await player.pause();\n                        player.setCurrentTime(start);\n                        // Unmute the video.\n                        player.setVolume(1);\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    }\n                });\n            }\n\n            player.off('play');\n            player.on('play', function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = false;\n                self.ended = false;\n                dispatchEvent('iv:playerPlay');\n            });\n\n            player.on('pause', function(e) {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                } else {\n                    self.ended = false;\n                    dispatchEvent('iv:playerPaused');\n                }\n            });\n\n            player.on('timeupdate', async function(e) {\n                if (!ready) {\n                    return;\n                }\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    self.paused = true;\n                    dispatchEvent('iv:playerEnded');\n                } else if (await player.getPaused()) {\n                    self.paused = true;\n                    dispatchEvent('iv:playerPaused');\n                } else {\n                    self.paused = false;\n                    self.ended = false;\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on('playbackratechange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerRateChange', {rate: e.playbackRate});\n            });\n\n            player.on('ended', function() {\n                if (!ready) {\n                    return;\n                }\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on('qualitychange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerQualityChange', {quality: e.quality});\n            });\n\n            player.on('error', function(e) {\n                if (e.name === 'NotAllowedError') {\n                    return;\n                }\n                if (e.method === 'appendVideoMetadata') {\n                    return;\n                }\n                dispatchEvent('iv:playerError', {error: e.message});\n                if (!showControls) {\n                    const $videoblock = document.querySelector('.video-block');\n                    if ($videoblock) {\n                        $videoblock.classList.remove('no-pointer');\n                    }\n                }\n            });\n        };\n\n        if (!VimeoPlayer) {\n            try {\n                require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                    VimeoPlayer = Player;\n                    player = new Player(node, option);\n                    vimeoEvents(player);\n                });\n            } catch (e) {\n                dispatchEvent('iv:playerError', {error: e.message});\n                return;\n            }\n        } else {\n            player = new VimeoPlayer(node, option);\n            vimeoEvents(player);\n        }\n    }\n    /**\n     * Plays the video using the Vimeo player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Vimeo player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        await player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        player.setCurrentTime(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    async seek(time) {\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        await player.setCurrentTime(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const duration = await player.getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Vimeo player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        const paused = await player.getPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Vimeo player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        const paused = await player.getPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Vimeo player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        const ended = await player.getEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        const width = await player.getVideoWidth();\n        const height = await player.getVideoHeight();\n        return width / height;\n    }\n    /**\n     * Destroys the Vimeo player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player) {\n            player.destroy();\n        }\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        const paused = await player.getPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Vimeo player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Vimeo player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Vimeo player by setting the volume to 0.\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmutes the Vimeo player by setting the volume to 1.\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n\n    async isMuted() {\n        const volume = await player.getVolume();\n        return volume === 0;\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        let qualities = await player.getQualities();\n        let keys = qualities.map(x => x.id);\n        let values = qualities.map(x => x.label);\n        let current = qualities.find(x => x.active).id;\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (track != '') {\n            player.enableTextTrack(track);\n        } else {\n            player.disableTextTrack();\n        }\n    }\n\n    /**\n     * Returns the original Vimeo player instance.\n     *\n     * @returns {Object} The Vimeo player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Vimeo;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","url","start","end","opts","showControls","node","VimeoPlayer","allowAutoplay","document","getElementById","this","aspectratio","posterUrl","encodeURIComponent","oEmbed","fetch","ok","error","style","display","oEmbedData","json","domain_status_code","posterImage","thumbnail_url","title","videoId","video_id","replace","width","height","self","option","autoplay","controls","loop","muted","playsinline","background","byline","portrait","transparent","responsive","pip","fullscreen","keyboard","dnt","chapters","ready","vimeoEvents","on","async","duration","getDuration","e","Math","min","Number","toFixed","totaltime","getVideoTitle","disableTextTrack","tracks","getTextTracks","length","map","track","label","code","language","passwordprotected","qualities","getQualities","setVolume","startScreen","classList","add","videoBlock","querySelector","annotationCanvas","remove","pause","setCurrentTime","off","paused","ended","seconds","getPaused","rate","playbackRate","name","method","message","$videoblock","require","Player","play","stop","starttime","time","getCurrentTime","getEnded","getVideoWidth","getVideoHeight","destroy","setRate","setPlaybackRate","mute","unMute","getVolume","setQuality","x","id","qualitiesLabel","currentQuality","find","active","setCaption","enableTextTrack","originalPlayer"],"mappings":"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"}