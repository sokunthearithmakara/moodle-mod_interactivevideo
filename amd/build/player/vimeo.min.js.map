{"version":3,"file":"vimeo.min.js","sources":["../../src/player/vimeo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vimeo Player class\n *\n * @module     mod_interactivevideo/player/vimeo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\n\nclass Vimeo {\n    /**\n     * Constructs a new Vimeo player instance.\n     */\n    constructor() {\n        this.type = 'vimeo';\n        this.useAnimationFrame = false;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n    /**\n     * Load player instance.\n     *\n     * @param {string} url - The URL of the Vimeo video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.start = start;\n        // Documented at https://developer.vimeo.com/player/sdk/reference or https://github.com/vimeo/player.js\n        let VimeoPlayer;\n        this.aspectratio = 16 / 9;\n        // Get poster image using oEmbed.\n        var posterUrl = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(url);\n        fetch(posterUrl)\n            .then(response => response.json())\n            .then(data => {\n                var poster = data.thumbnail_url;\n                // Change the dimensions of the poster image to 16:9.\n                poster = poster.replace(/_\\d+x\\d+/, '_720x405');\n                this.posterImage = poster;\n                this.title = data.title;\n                this.aspectratio = data.width / data.height;\n                this.videoId = data.video_id;\n                return poster;\n            }).catch(() => {\n                return;\n            });\n        let self = this;\n        const option = {\n            url: url,\n            width: 1080,\n            height: 720,\n            autoplay: !showControls,\n            controls: showControls,\n            loop: false,\n            muted: true,\n            playsinline: true,\n            background: false,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: false,\n            responsive: false,\n            start_time: start,\n            end_time: end,\n            pip: false,\n            fullscreen: false,\n            watch_full_video: false,\n            keyboard: false,\n            dnt: true,\n            chapters: showControls,\n            interactive_markers: showControls,\n            vimeo_logo: false,\n        };\n\n        let ready = false;\n        const vimeoEvents = (player) => {\n            player.on('loaded', async function() {\n                let duration = 0;\n                try {\n                    // Without password protection, we can get the duration.\n                    duration = await player.getDuration();\n                } catch (e) {\n                    return;\n                }\n                if (duration > 0) {\n                    end = !end ? duration - 0.1 : Math.min(end, duration - 0.1);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.duration = self.end - self.start;\n                    self.totaltime = Number((duration - 0.1).toFixed(2));\n                    // Get track list.\n                    // Unset the captions.\n                    player.disableTextTrack();\n                    let tracks = await player.getTextTracks();\n                    if (tracks && tracks.length > 0) {\n                        tracks = tracks.map((track) => {\n                            return {\n                                label: track.label,\n                                code: track.language\n                            };\n                        });\n                    }\n\n                    if (!opts.passwordprotected) {\n                        dispatchEvent('iv:playerLoaded', {\n                            tracks: tracks,\n                            qualities: self.getQualities(),\n                        });\n                    }\n\n                    if (showControls) {\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    }\n                }\n            });\n\n            if (!showControls) {\n                player.on('play', async function() {\n                    if (!ready) {\n                        // Pause the video if it is not ready.\n                        await player.pause();\n                        player.setCurrentTime(start);\n                        // Unmute the video.\n                        player.setVolume(1);\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    }\n                });\n            }\n\n            player.on('pause', function(e) {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                } else {\n                    self.ended = false;\n                    dispatchEvent('iv:playerPaused');\n                }\n            });\n\n\n            player.on('timeupdate', async function(e) {\n                if (!ready) {\n                    return;\n                }\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    self.paused = true;\n                    dispatchEvent('iv:playerEnded');\n                } else if (await player.getPaused()) {\n                    self.paused = true;\n                    dispatchEvent('iv:playerPaused');\n                } else {\n                    self.paused = false;\n                    self.ended = false;\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on('seeked', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerSeek', {time: e.seconds});\n            });\n\n            player.on('playbackratechange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerRateChange', {rate: e.playbackRate});\n            });\n\n            player.on('bufferstart', function() {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player.on('bufferend', function() {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.on('ended', function() {\n                if (!ready) {\n                    return;\n                }\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on('qualitychange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerQualityChange', {quality: e.quality});\n            });\n\n            player.on('error', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerError', {error: e.message});\n            });\n        };\n\n        if (!VimeoPlayer) {\n            require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                VimeoPlayer = Player;\n                player = new Player(node, option);\n                vimeoEvents(player);\n            });\n        } else {\n            player = new VimeoPlayer(node, option);\n            vimeoEvents(player);\n        }\n    }\n    /**\n     * Plays the video using the Vimeo player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Vimeo player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        await player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        player.setCurrentTime(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    async seek(time) {\n        if (time < 0) {\n            time = 0;\n        }\n        await player.setCurrentTime(time);\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const duration = await player.getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Vimeo player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        const paused = await player.getPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Vimeo player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        const paused = await player.getPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Vimeo player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        const ended = await player.getEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        const width = await player.getVideoWidth();\n        const height = await player.getVideoHeight();\n        return width / height;\n    }\n    /**\n     * Destroys the Vimeo player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player) {\n            player.destroy();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        const paused = await player.getPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Vimeo player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Vimeo player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Vimeo player by setting the volume to 0.\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmutes the Vimeo player by setting the volume to 1.\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        let qualities = await player.getQualities();\n        let keys = qualities.map(x => x.id);\n        let values = qualities.map(x => x.label);\n        let current = qualities.find(x => x.active).id;\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (track != '') {\n            player.enableTextTrack(track);\n        } else {\n            player.disableTextTrack();\n        }\n    }\n\n    /**\n     * Returns the original Vimeo player instance.\n     *\n     * @returns {Object} The Vimeo player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Vimeo;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","load","url","start","end","opts","showControls","node","VimeoPlayer","aspectratio","posterUrl","encodeURIComponent","fetch","then","response","json","data","poster","thumbnail_url","replace","posterImage","title","width","height","videoId","video_id","catch","self","this","option","autoplay","controls","loop","muted","playsinline","background","byline","portrait","transparent","responsive","start_time","end_time","pip","fullscreen","watch_full_video","keyboard","dnt","chapters","interactive_markers","vimeo_logo","ready","vimeoEvents","on","async","duration","getDuration","e","Math","min","Number","toFixed","totaltime","disableTextTrack","tracks","getTextTracks","length","map","track","label","code","language","passwordprotected","qualities","getQualities","pause","setCurrentTime","setVolume","paused","seconds","ended","getPaused","time","rate","playbackRate","error","message","require","Player","play","stop","starttime","getCurrentTime","getEnded","getVideoWidth","getVideoHeight","destroy","window","console","setRate","setPlaybackRate","mute","unMute","setQuality","x","id","qualitiesLabel","currentQuality","find","active","setCaption","enableTextTrack","originalPlayer"],"mappings":"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"}