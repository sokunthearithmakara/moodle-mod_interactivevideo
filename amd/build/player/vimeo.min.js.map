{"version":3,"file":"vimeo.min.js","sources":["../../src/player/vimeo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vimeo Player class\n *\n * @module     mod_interactivevideo/player/vimeo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\n\nclass Vimeo {\n    /**\n     * Constructs a new Vimeo player instance.\n     */\n    constructor() {\n        this.type = 'vimeo';\n        this.useAnimationFrame = false;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        return new Promise((resolve) => {\n            let VimeoPlayer;\n            const option = {\n                url: url,\n                width: 1080,\n                height: 720,\n            };\n            const vimeoEvents = (player) => {\n                player.on('loaded', async function() {\n                    let title = await player.getVideoTitle();\n                    let duration = await player.getDuration();\n                    // Get poster image using oEmbed.\n                    var posterUrl = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(url);\n                    const oEmbed = await fetch(posterUrl);\n                    if (!oEmbed.ok) {\n                        resolve(null);\n                    }\n                    const oEmbedData = await oEmbed.json();\n                    if (oEmbedData.domain_status_code === 403 || oEmbedData.error) {\n                        resolve(null);\n                    }\n                    let posterImage = oEmbedData.thumbnail_url || '';\n                    resolve({\n                        duration,\n                        title,\n                        posterImage: posterImage.replace(/_\\d+x\\d+/, '_720x405'),\n                    });\n                });\n            };\n\n            if (!VimeoPlayer) {\n                try {\n                    require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                        VimeoPlayer = Player;\n                        player[node] = new Player(node, option);\n                        vimeoEvents(player[node]);\n                    });\n                } catch (e) {\n                    dispatchEvent('iv:playerError', {error: e.message});\n                    return;\n                }\n            } else {\n                player[node] = new VimeoPlayer(node, option);\n                vimeoEvents(player[node]);\n            }\n        });\n    }\n    /**\n     * Load player instance.\n     *\n     * @param {string} url - The URL of the Vimeo video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        let showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        // Documented at https://developer.vimeo.com/player/sdk/reference or https://github.com/vimeo/player.js\n        let VimeoPlayer;\n        this.aspectratio = 16 / 9;\n        // Get poster image using oEmbed.\n        var posterUrl = 'https://vimeo.com/api/oembed.json?url=' + encodeURIComponent(url);\n        const oEmbed = await fetch(posterUrl);\n        if (!oEmbed.ok) {\n            dispatchEvent('iv:playerError', {error: 'Video not found'});\n            return;\n        }\n        document.getElementById('video-wrapper').style.display = 'block';\n        const oEmbedData = await oEmbed.json();\n        if (oEmbedData.domain_status_code === 403 || oEmbedData.error) {\n            dispatchEvent('iv:playerError', {error: 'Video not found'});\n        }\n        this.posterImage = oEmbedData.thumbnail_url || '';\n        this.title = oEmbedData.title;\n        this.videoId = oEmbedData.video_id;\n        // Change the dimensions of the poster image to 16:9.\n        this.posterImage = this.posterImage.replace(/_\\d+x\\d+/, '_720x405');\n        this.aspectratio = oEmbedData.width / oEmbedData.height;\n        let self = this;\n        const option = {\n            url: url,\n            width: 1080,\n            height: 720,\n            autoplay: !showControls,\n            controls: showControls,\n            loop: false,\n            muted: true,\n            playsinline: true,\n            background: false,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: false,\n            responsive: false,\n            \"start_time\": start,\n            \"end_time\": end,\n            pip: false,\n            fullscreen: false,\n            \"watch_full_video\": false,\n            keyboard: false,\n            dnt: true,\n            chapters: showControls,\n            \"interactive_markers\": showControls,\n            \"vimeo_logo\": false,\n            \"initial_quality\": '360p',\n        };\n\n        let ready = false;\n        const vimeoEvents = (player) => {\n            player.on('loaded', async function() {\n                const iframe = document.querySelector(`#${node} iframe`);\n                if (iframe) {\n                    iframe.setAttribute('referrerpolicy', 'strict-origin');\n                }\n                let duration = 0;\n                try {\n                    // Without password protection, we can get the duration.\n                    duration = await player.getDuration();\n                } catch (e) {\n                    return;\n                }\n                if (duration > 0) {\n                    end = !end ? duration - 0.1 : Math.min(end, duration - 0.1);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.duration = self.end - self.start;\n                    self.totaltime = Number((duration - 0.1).toFixed(2));\n                    self.title = await player.getVideoTitle();\n                    // Get track list.\n                    // Unset the captions.\n                    player.disableTextTrack();\n                    let tracks = await player.getTextTracks();\n                    if (tracks && tracks.length > 0) {\n                        tracks = tracks.map((track) => {\n                            return {\n                                label: track.label,\n                                code: track.language\n                            };\n                        });\n                    }\n\n                    if (!opts.passwordprotected) {\n                        dispatchEvent('iv:playerLoaded', {\n                            tracks: tracks,\n                            qualities: self.getQualities(),\n                            reloaded: reloaded,\n                        });\n                    }\n\n                    ready = true;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    // Unmute the video\n                    player.setVolume(1);\n                } else {\n                    document.getElementById('video-wrapper').style.display = 'block';\n                    const startScreen = document.getElementById('start-screen');\n                    if (startScreen) {\n                        startScreen.classList.add('d-none');\n                    }\n\n                    const videoBlock = document.querySelector('.video-block');\n                    if (videoBlock) {\n                        videoBlock.classList.add('no-pointer', 'bg-transparent');\n                    }\n\n                    const annotationCanvas = document.getElementById('annotation-canvas');\n                    if (annotationCanvas) {\n                        annotationCanvas.classList.remove('d-none', 'w-0');\n                    }\n                }\n            });\n\n            if (!showControls) {\n                player.on('play', async function() {\n                    if (!ready) {\n                        // Pause the video if it is not ready.\n                        await player.pause();\n                        player.setCurrentTime(start);\n                        // Unmute the video.\n                        player.setVolume(1);\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    }\n                });\n            }\n\n            player.off('play');\n            player.on('play', function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = false;\n                self.ended = false;\n                dispatchEvent('iv:playerPlay');\n            });\n\n            player.on('pause', function(e) {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                } else {\n                    self.ended = false;\n                    dispatchEvent('iv:playerPaused');\n                }\n            });\n\n            player.on('timeupdate', async function(e) {\n                if (!ready) {\n                    return;\n                }\n                if (e.seconds >= end) {\n                    self.ended = true;\n                    self.paused = true;\n                    dispatchEvent('iv:playerEnded');\n                } else if (await player.getPaused()) {\n                    self.paused = true;\n                    dispatchEvent('iv:playerPaused');\n                } else {\n                    self.paused = false;\n                    self.ended = false;\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on('playbackratechange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerRateChange', {rate: e.playbackRate});\n            });\n\n            player.on('ended', function() {\n                if (!ready) {\n                    return;\n                }\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on('qualitychange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerQualityChange', {quality: e.quality});\n            });\n\n            player.on('error', function(e) {\n                if (e.name === 'NotAllowedError') {\n                    return;\n                }\n                if (e.method === 'appendVideoMetadata') {\n                    return;\n                }\n                dispatchEvent('iv:playerError', {error: e.message});\n                if (!showControls) {\n                    const $videoblock = document.querySelector('.video-block');\n                    if ($videoblock) {\n                        $videoblock.classList.remove('no-pointer');\n                    }\n                }\n            });\n\n            player.on('volumechange', function(e) {\n                dispatchEvent('iv:playerVolumeChange', {volume: e.volume});\n            });\n        };\n\n        if (!VimeoPlayer) {\n            try {\n                require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                    VimeoPlayer = Player;\n                    player[node] = new Player(node, option);\n                    vimeoEvents(player[node]);\n                });\n            } catch (e) {\n                dispatchEvent('iv:playerError', {error: e.message});\n                return;\n            }\n        } else {\n            player[node] = new VimeoPlayer(node, option);\n            vimeoEvents(player[node]);\n        }\n    }\n    /**\n     * Plays the video using the Vimeo player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Vimeo player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        if (!player[this.node]) {\n            return false;\n        }\n        await player[this.node].pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setCurrentTime(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        await player[this.node].setCurrentTime(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        const duration = await player[this.node].getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Vimeo player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        const paused = await player[this.node].getPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Vimeo player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        const paused = await player[this.node].getPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Vimeo player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.ended) {\n            return true;\n        }\n        const ended = await player[this.node].getEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        const width = await player[this.node].getVideoWidth();\n        const height = await player[this.node].getVideoHeight();\n\n        return width / height;\n    }\n    /**\n     * Destroys the Vimeo player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player[this.node]) {\n            player[this.node].destroy();\n        }\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        const paused = await player[this.node].getPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Vimeo player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Vimeo player.\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Vimeo player by setting the volume to 0.\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(0);\n    }\n    /**\n     * Unmutes the Vimeo player by setting the volume to 1.\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(1);\n    }\n\n    async isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        const volume = await player[this.node].getVolume();\n        return volume === 0;\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        if (!player[this.node]) {\n            return quality;\n        }\n        player[this.node].setQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        if (!player[this.node]) {\n            return null;\n        }\n        let qualities = await player[this.node].getQualities();\n        let keys = qualities.map(x => x.id);\n        let values = qualities.map(x => x.label);\n        let current = qualities.find(x => x.active).id;\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return null;\n        }\n        if (track != '') {\n            player[this.node].enableTextTrack(track);\n        } else {\n            player[this.node].disableTextTrack();\n        }\n        return track;\n    }\n\n    /**\n     * Returns the original Vimeo player instance.\n     *\n     * @returns {Object} The Vimeo player instance.\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n}\n\nexport default Vimeo;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","url","node","Promise","resolve","VimeoPlayer","option","width","height","vimeoEvents","on","async","title","getVideoTitle","duration","getDuration","posterUrl","encodeURIComponent","oEmbed","fetch","ok","oEmbedData","json","domain_status_code","error","posterImage","thumbnail_url","replace","require","Player","e","message","start","end","opts","reloaded","showControls","allowAutoplay","document","getElementById","this","aspectratio","style","display","videoId","video_id","self","autoplay","controls","loop","muted","playsinline","background","byline","portrait","transparent","responsive","pip","fullscreen","keyboard","dnt","chapters","ready","iframe","querySelector","setAttribute","Math","min","Number","toFixed","totaltime","disableTextTrack","tracks","getTextTracks","length","map","track","label","code","language","passwordprotected","qualities","getQualities","setVolume","startScreen","classList","add","videoBlock","annotationCanvas","remove","pause","setCurrentTime","off","paused","ended","seconds","getPaused","rate","playbackRate","name","method","$videoblock","volume","play","stop","starttime","time","getCurrentTime","getEnded","getVideoWidth","getVideoHeight","destroy","setRate","setPlaybackRate","mute","unMute","getVolume","setQuality","x","id","qualitiesLabel","currentQuality","find","active","setCaption","enableTextTrack","originalPlayer"],"mappings":";;;;;;;+JAyBIA,OAAS,sBAMTC,mBACSC,KAAO,aACPC,mBAAoB,OACpBC,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,EACTC,UAAU,iBAGJC,IAAKC,kBACVA,KAAOA,KACL,IAAIC,SAASC,cACZC,kBACEC,OAAS,CACXL,IAAKA,IACLM,MAAO,KACPC,OAAQ,KAENC,YAAejB,SACjBA,OAAOkB,GAAG,UAAUC,qBACZC,YAAcpB,OAAOqB,gBACrBC,eAAiBtB,OAAOuB,kBAExBC,UAAY,yCAA2CC,mBAAmBhB,WACxEiB,aAAeC,MAAMH,WACtBE,OAAOE,IACRhB,QAAQ,YAENiB,iBAAmBH,OAAOI,QACM,MAAlCD,WAAWE,oBAA8BF,WAAWG,QACpDpB,QAAQ,UAERqB,YAAcJ,WAAWK,eAAiB,GAC9CtB,QAAQ,CACJU,SAAAA,SACAF,MAAAA,MACAa,YAAaA,YAAYE,QAAQ,WAAY,qBAKpDtB,YAYDb,OAAOU,MAAQ,IAAIG,YAAYH,KAAMI,QACrCG,YAAYjB,OAAOU,gBAXf0B,QAAQ,CAAC,2CAA2C,SAASC,QACzDxB,YAAcwB,OACdrC,OAAOU,MAAQ,IAAI2B,OAAO3B,KAAMI,QAChCG,YAAYjB,OAAOU,UAEzB,MAAO4B,kDACS,iBAAkB,CAACN,MAAOM,EAAEC,yBAkB/C9B,IAAK+B,MAAOC,SAAKC,4DAAO,GAAIC,iEAC/BC,aAAeF,KAAKE,eAAgB,QAClClC,KAAOgC,KAAKhC,MAAQ,aAQtBG,iBAPCH,KAAOA,UACPmC,oBAAsB,0BAAcC,SAASC,eAAerC,OAC5DsC,KAAKH,mDACQ,2BAEbL,MAAQA,WAGRS,YAAc,GAAK,MAEpBzB,UAAY,yCAA2CC,mBAAmBhB,WACxEiB,aAAeC,MAAMH,eACtBE,OAAOE,kDACM,iBAAkB,CAACI,MAAO,oBAG5Cc,SAASC,eAAe,iBAAiBG,MAAMC,QAAU,cACnDtB,iBAAmBH,OAAOI,QACM,MAAlCD,WAAWE,oBAA8BF,WAAWG,4CACtC,iBAAkB,CAACA,MAAO,yBAEvCC,YAAcJ,WAAWK,eAAiB,QAC1Cd,MAAQS,WAAWT,WACnBgC,QAAUvB,WAAWwB,cAErBpB,YAAce,KAAKf,YAAYE,QAAQ,WAAY,iBACnDc,YAAcpB,WAAWd,MAAQc,WAAWb,WAC7CsC,KAAON,WACLlC,OAAS,CACXL,IAAKA,IACLM,MAAO,KACPC,OAAQ,IACRuC,UAAWX,aACXY,SAAUZ,aACVa,MAAM,EACNC,OAAO,EACPC,aAAa,EACbC,YAAY,EACZC,QAAQ,EACRC,UAAU,EACV1C,OAAO,EACP2C,aAAa,EACbC,YAAY,aACExB,eACFC,IACZwB,KAAK,EACLC,YAAY,oBACQ,EACpBC,UAAU,EACVC,KAAK,EACLC,SAAUzB,iCACaA,yBACT,kBACK,YAGnB0B,OAAQ,QACNrD,YAAejB,SACjBA,OAAOkB,GAAG,UAAUC,uBACVoD,OAASzB,SAAS0B,yBAAkB9D,iBACtC6D,QACAA,OAAOE,aAAa,iBAAkB,qBAEtCnD,SAAW,MAGXA,eAAiBtB,OAAOuB,cAC1B,MAAOe,aAGLhB,SAAW,EAAG,CACdmB,IAAOA,IAAuBiC,KAAKC,IAAIlC,IAAKnB,SAAW,IAA1CA,SAAW,GACxBmB,IAAMmC,OAAOnC,IAAIoC,QAAQ,IACzBvB,KAAKb,IAAMA,IACXa,KAAKhC,SAAWgC,KAAKb,IAAMa,KAAKd,MAChCc,KAAKwB,UAAYF,QAAQtD,SAAW,IAAKuD,QAAQ,IACjDvB,KAAKlC,YAAcpB,OAAOqB,gBAG1BrB,OAAO+E,uBACHC,aAAehF,OAAOiF,gBACtBD,QAAUA,OAAOE,OAAS,IAC1BF,OAASA,OAAOG,KAAKC,QACV,CACHC,MAAOD,MAAMC,MACbC,KAAMF,MAAMG,cAKnB7C,KAAK8C,uDACQ,kBAAmB,CAC7BR,OAAQA,OACRS,UAAWnC,KAAKoC,eAChB/C,SAAUA,WAIlB2B,OAAQ,sCACM,iBAAkB,KAAMxB,SAASC,eAAerC,OAE9DV,OAAO2F,UAAU,OACd,CACH7C,SAASC,eAAe,iBAAiBG,MAAMC,QAAU,cACnDyC,YAAc9C,SAASC,eAAe,gBACxC6C,aACAA,YAAYC,UAAUC,IAAI,gBAGxBC,WAAajD,SAAS0B,cAAc,gBACtCuB,YACAA,WAAWF,UAAUC,IAAI,aAAc,wBAGrCE,iBAAmBlD,SAASC,eAAe,qBAC7CiD,kBACAA,iBAAiBH,UAAUI,OAAO,SAAU,WAKnDrD,cACD5C,OAAOkB,GAAG,QAAQC,iBACTmD,cAEKtE,OAAOkG,QACblG,OAAOmG,eAAe3D,OAEtBxC,OAAO2F,UAAU,GACjBrB,OAAQ,sCACM,iBAAkB,KAAMxB,SAASC,eAAerC,WAK1EV,OAAOoG,IAAI,QACXpG,OAAOkB,GAAG,QAAQ,WACToD,QAGLhB,KAAK+C,QAAS,EACd/C,KAAKgD,OAAQ,sCACC,qBAGlBtG,OAAOkB,GAAG,SAAS,SAASoB,GACnBgC,QAGLhB,KAAK+C,QAAS,EACV/D,EAAEiE,SAAW9D,KACba,KAAKgD,OAAQ,sCACC,oBAEdhD,KAAKgD,OAAQ,sCACC,wBAItBtG,OAAOkB,GAAG,cAAcC,eAAemB,GAC9BgC,QAGDhC,EAAEiE,SAAW9D,KACba,KAAKgD,OAAQ,EACbhD,KAAK+C,QAAS,sCACA,yBACDrG,OAAOwG,aACpBlD,KAAK+C,QAAS,sCACA,qBAEd/C,KAAK+C,QAAS,EACd/C,KAAKgD,OAAQ,sCACC,yBAItBtG,OAAOkB,GAAG,sBAAsB,SAASoB,GAChCgC,2CAGS,sBAAuB,CAACmC,KAAMnE,EAAEoE,kBAGlD1G,OAAOkB,GAAG,SAAS,WACVoD,QAGLhB,KAAKgD,OAAQ,EACbhD,KAAK+C,QAAS,sCACA,sBAGlBrG,OAAOkB,GAAG,iBAAiB,SAASoB,GAC3BgC,2CAGS,yBAA0B,CAAC/D,QAAS+B,EAAE/B,aAGxDP,OAAOkB,GAAG,SAAS,SAASoB,MACT,oBAAXA,EAAEqE,MAGW,wBAAbrE,EAAEsE,6CAGQ,iBAAkB,CAAC5E,MAAOM,EAAEC,WACrCK,cAAc,OACTiE,YAAc/D,SAAS0B,cAAc,gBACvCqC,aACAA,YAAYhB,UAAUI,OAAO,kBAKzCjG,OAAOkB,GAAG,gBAAgB,SAASoB,uCACjB,wBAAyB,CAACwE,OAAQxE,EAAEwE,gBAIrDjG,YAYDb,OAAOU,MAAQ,IAAIG,YAAYH,KAAMI,QACrCG,YAAYjB,OAAOU,gBAXf0B,QAAQ,CAAC,2CAA2C,SAASC,QACzDxB,YAAcwB,OACdrC,OAAOU,MAAQ,IAAI2B,OAAO3B,KAAMI,QAChCG,YAAYjB,OAAOU,UAEzB,MAAO4B,kDACS,iBAAkB,CAACN,MAAOM,EAAEC,WAYtDwE,OACS/G,OAAOgD,KAAKtC,QAGjBV,OAAOgD,KAAKtC,MAAMqG,YACbV,QAAS,yBAQTrG,OAAOgD,KAAKtC,cAGXV,OAAOgD,KAAKtC,MAAMwF,aACnBG,QAAS,GACP,GAOXW,KAAKC,WACIjH,OAAOgD,KAAKtC,QAGjBV,OAAOgD,KAAKtC,MAAMyF,eAAec,WACjCjH,OAAOgD,KAAKtC,MAAMwF,oBAQXgB,aACFlH,OAAOgD,KAAKtC,OAGbwG,KAAO,IACPA,KAAO,QAENZ,OAAQ,QACPtG,OAAOgD,KAAKtC,MAAMyF,eAAee,0CACzB,gBAAiB,CAACA,KAAMA,OAC/BA,MARIA,mCAgBNlH,OAAOgD,KAAKtC,MAGVV,OAAOgD,KAAKtC,MAAMyG,iBAFd,0BAUNnH,OAAOgD,KAAKtC,aACN,eAEYV,OAAOgD,KAAKtC,MAAMa,mCASpCvB,OAAOgD,KAAKtC,aACN,KAEPsC,KAAKqD,cACE,eAEUrG,OAAOgD,KAAKtC,MAAM8F,kCASlCxG,OAAOgD,KAAKtC,aACN,KAEPsC,KAAKqD,cACE,eAEUrG,OAAOgD,KAAKtC,MAAM8F,gCAWlCxG,OAAOgD,KAAKtC,aACN,KAEPsC,KAAKsD,aACE,eAEStG,OAAOgD,KAAKtC,MAAM0G,6BAWjCpH,OAAOgD,KAAKtC,aACN,GAAK,eAEIV,OAAOgD,KAAKtC,MAAM2G,sBACjBrH,OAAOgD,KAAKtC,MAAM4G,iBAQ3CC,UACQvH,OAAOgD,KAAKtC,OACZV,OAAOgD,KAAKtC,MAAM6G,UAEtBvH,OAAOgD,KAAKtC,MAAQ,yCACN,2CAQTV,OAAOgD,KAAKtC,YACN,sBAEUV,OAAOgD,KAAKtC,MAAM8F,YACvB,SAAW,UAQ/BgB,QAAQf,MACCzG,OAAOgD,KAAKtC,OAGjBV,OAAOgD,KAAKtC,MAAM+G,gBAAgBhB,MAKtCiB,OACS1H,OAAOgD,KAAKtC,OAGjBV,OAAOgD,KAAKtC,MAAMiF,UAAU,GAKhCgC,SACS3H,OAAOgD,KAAKtC,OAGjBV,OAAOgD,KAAKtC,MAAMiF,UAAU,uBAIvB3F,OAAOgD,KAAKtC,aACN,SAGO,UADGV,OAAOgD,KAAKtC,MAAMkH,YAQ3CC,WAAWtH,gBACFP,OAAOgD,KAAKtC,OAGjBV,OAAOgD,KAAKtC,MAAMmH,WAAWtH,SACtBA,SAHIA,iCASNP,OAAOgD,KAAKtC,aACN,SAEP+E,gBAAkBzF,OAAOgD,KAAKtC,MAAMgF,qBAIjC,CACHD,UAJOA,UAAUN,KAAI2C,GAAKA,EAAEC,KAK5BC,eAJSvC,UAAUN,KAAI2C,GAAKA,EAAEzC,QAK9B4C,eAJUxC,UAAUyC,MAAKJ,GAAKA,EAAEK,SAAQJ,IAahDK,WAAWhD,cACFpF,OAAOgD,KAAKtC,OAGJ,IAAT0E,MACApF,OAAOgD,KAAKtC,MAAM2H,gBAAgBjD,OAElCpF,OAAOgD,KAAKtC,MAAMqE,mBAEfK,OAPI,KAefkD,wBACWtI,OAAOgD,KAAKtC"}