{"version":3,"file":"viostream.min.js","sources":["../../src/player/viostream.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Bunny Stream Player class\n *\n * @module     mod_interactivevideo/player/viostream\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player = {};\nclass Viostream {\n    /**\n     * Constructor of the viostream player.\n     */\n    constructor() {\n        this.useAnimationFrame = false;\n        this.type = 'viostream';\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n        };\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        // To do.\n    }\n    /**\n     * Creates an instance of the viostream player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the viostream video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n        }\n\n        let self = this;\n\n        // URL: https://share.viostream.com/ritie6zritioc1\n        let regex = /(?:https?:\\/\\/)?(?:share\\.viostream\\.com)\\/([a-zA-Z0-9]+)/i;\n        var match = regex.exec(url);\n        var videoId = match ? match[1] : null;\n        this.videoId = videoId;\n\n        self.aspectratio = 16 / 9;\n\n        if (opts.editform) { // Get title and poster image from the video if it's in edit form.\n            await new Promise((resolve, reject) => {\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    type: 'POST',\n                    dataType: 'text',\n                    data: {\n                        action: 'get_from_url',\n                        contextid: M.cfg.contextid,\n                        url: url,\n                        sesskey: M.cfg.sesskey,\n                    },\n                    complete: function(res) {\n                        let text = res.responseText;\n\n                        // Use regex to extract <meta name=\"twitter:title\" content=\"...\">\n                        let titleMatch = text.match(/<meta\\s+name=[\"']twitter:title[\"']\\s+content=[\"']([^\"']+)[\"']/i);\n                        let title = titleMatch ? titleMatch[1] : '';\n\n                        // Use regex to extract <meta property=\"og:image\" content=\"...\">\n                        let posterMatch = text.match(/<meta\\s+(?:property|name)=[\"']og:image[\"']\\s+content=[\"']([^\"']+)[\"']/i);\n                        let poster = posterMatch ? posterMatch[1] : '';\n\n                        // Use regex to extract <meta property=\"twitter:player:width\" content=\"...\">\n                        let widthMatch = text.match(\n                            /<meta\\s+(?:property|name)=[\"']twitter:player:width[\"']\\s+content=[\"']([^\"']+)[\"']/i);\n                        let width = widthMatch ? widthMatch[1] : '';\n\n                        // Use regex to extract <meta property=\"twitter:player:height\" content=\"...\">\n                        let heightMatch = text.match(\n                            /<meta\\s+(?:property|name)=[\"']twitter:player:height[\"']\\s+content=[\"']([^\"']+)[\"']/i);\n                        let height = heightMatch ? heightMatch[1] : '';\n                        self.title = title;\n                        self.posterImage = poster;\n                        self.aspectratio = width / height;\n                        resolve(title);\n                    },\n                    error: function(xhr, status, error) {\n                        reject(error);\n                    }\n                });\n            });\n        }\n\n        let iframe = `<iframe src=\"https://play.viostream.com/iframe/${videoId}\" id=\"${node}\"\n        referrerpolicy=\"strict-origin-when-cross-origin\" webkitallowfullscreen mozallowfullscreen allowfullscreen\n         frameborder=\"0\" ></iframe>`;\n\n        let $parent = $(`#${node}`).parent();\n        $(`#${node}`)\n            .replaceWith(iframe);\n        $parent.removeClass('d-none w-0');\n        $('.video-block, #video-block').remove();\n        player[node] = new window.playerjs.Player(document.getElementById(node));\n\n        player[node].on('ready', () => {\n            self.start = start || 0;\n\n            player[node].play(); // We need to play the video to get the duration.\n\n            let interval = setInterval(() => {\n                player[node].getDuration(duration => {\n                    if (!duration) {\n                        return;\n                    }\n                    let totaltime = Number(duration.toFixed(2)) - self.frequency;\n                    end = !end ? totaltime : Math.min(end, totaltime);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.totaltime = Number(totaltime.toFixed(2));\n                    self.duration = self.end - self.start;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    clearInterval(interval);\n                });\n            }, 500);\n\n            player[node].on('play', () => {\n                self.paused = false;\n                self.ended = false;\n                dispatchEvent('iv:playerPlay');\n            });\n\n            player[node].on('pause', () => {\n                self.paused = true;\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player[node].on('ended', () => {\n                self.ended = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player[node].on('timeupdate', (data) => {\n                dispatchEvent('iv:playerPlaying');\n                if (data.seconds >= self.end) {\n                    self.ended = true;\n                    player[node].pause();\n                    dispatchEvent('iv:playerEnded');\n                }\n                if (data.seconds < self.start) {\n                    self.seek(self.start);\n                }\n            });\n\n            player[node].on('seeked', () => {\n                player[node].getCurrentTime(value => {\n                    dispatchEvent('iv:playerSeek', {time: value});\n                });\n\n            });\n        });\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pause();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setCurrentTime(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n\n        return new Promise((resolve) => {\n            player[this.node].getCurrentTime(value => {\n                let currentTime = value;\n                dispatchEvent('iv:playerSeekStart', {time: currentTime});\n                this.ended = false;\n                player[this.node].setCurrentTime(time, true);\n                resolve(true);\n            });\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return new Promise((resolve) => {\n            player[this.node].getCurrentTime(value => resolve(value));\n        });\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return new Promise(resolve => {\n            player[this.node].getDuration(value => resolve(value));\n        });\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return new Promise((resolve) => {\n            player[this.node].getPaused(value => resolve(value === true));\n        });\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return new Promise((resolve) => {\n            player[this.node].getPaused(value => resolve(value === false));\n        });\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.ended;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove();\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        return new Promise((resolve) => {\n            player[this.node].getPaused(value => resolve(value ? 'paused' : 'playing'));\n        });\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return rate;\n        }\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].mute();\n        player[this.node].setVolume(0);\n        this.muted = true;\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].unmute();\n        player[this.node].setVolume(100);\n        this.muted = false;\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return new Promise((resolve) => {\n            player[this.node].getMuted(value => resolve(value));\n        });\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return null;\n        }\n        return track;\n    }\n}\n\nexport default Viostream;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","url","node","start","end","opts","allowAutoplay","document","getElementById","this","requireVideoBlock","self","match","exec","videoId","aspectratio","editform","Promise","resolve","reject","ajax","M","cfg","wwwroot","dataType","data","action","contextid","sesskey","complete","res","text","responseText","titleMatch","title","posterMatch","poster","widthMatch","width","heightMatch","height","posterImage","error","xhr","status","iframe","$parent","parent","replaceWith","removeClass","remove","window","playerjs","Player","on","play","interval","setInterval","getDuration","duration","totaltime","Number","toFixed","Math","min","clearInterval","paused","ended","seconds","pause","seek","getCurrentTime","value","time","stop","starttime","setCurrentTime","currentTime","isPaused","getPaused","isPlaying","isEnded","ratio","destroy","getState","setRate","rate","mute","setVolume","muted","volume","unMute","unmute","isMuted","getMuted","originalPlayer","setCaption","track"],"mappings":"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"}