{"version":3,"file":"peertube.min.js","sources":["../../src/player/peertube.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * PeerTube Player class\n * https://docs.joinpeertube.org/api/embed-player#embed-methods\n *\n * @module     mod_interactivevideo/player/peertube\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport {PeerTubePlayer} from 'mod_interactivevideo/libraries/peertube';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\nlet player;\n\nclass PeerTube {\n    /**\n     * Creates an instance of the PeerTube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.useAnimationFrame = false;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default peertube\n         * @private\n         * @readonly\n         */\n        this.type = 'peertube';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.7;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.start = start;\n        this.node = node;\n\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n            $('#video-block, .video-block').remove();\n        }\n\n        // Get the id and domain of the video.\n        // Sample Url: https://video.hardlimit.com/w/hFwjKHQa3ixivePeqGc4KR\n        const regex = /https:\\/\\/([^/]+)\\/w\\/([^/]+)/;\n        const match = url.match(regex);\n        const domain = match[1];\n        const id = match[2];\n        let videoId = id.split('?')[0];\n\n        // Get the video info\n        let password = url.split('?password=')[1];\n        const myHeaders = new Headers();\n        if (password && password !== '') {\n            myHeaders.append(\"x-peertube-video-password\", password);\n        }\n        let videoInfo = await fetch(`https://${domain}/api/v1/videos/${videoId}`, {\n            method: 'GET',\n            headers: myHeaders,\n        });\n        videoInfo = await videoInfo.json();\n        if (videoInfo.code === 'video_requires_password' || videoInfo.code === 'incorrect_video_password') {\n            // Show the password prompt.\n            let string = videoInfo.code === 'video_requires_password' ? 'This video is password protected' : 'Incorrect password';\n            const pwd = window.prompt(string, \"\");\n            if (pwd === null) {\n                return false;\n            }\n            url = url.split('?password=')[0]; // Remove the old password from the url.\n            this.load(url + '?password=' + pwd, start, end, opts);\n            return false;\n        }\n\n        if (!videoInfo.duration) {\n            alert('The video is not available');\n            return false;\n        }\n        let self = this;\n        let ready = false;\n        let videoFile = videoInfo.files.pop();\n        this.aspectratio = 16 / 9;\n        if (videoFile) {\n            // Get width and height of the video\n            let $vdo = $('<video>').attr('src', videoFile.fileDownloadUrl).attr('preload', 'metadata');\n            $vdo.on('loadedmetadata', function() {\n                self.aspectratio = this.videoWidth / this.videoHeight;\n            });\n        }\n        const totaltime = Number(videoInfo.duration.toFixed(2)) - self.frequency;\n        end = !end ? totaltime : Math.min(end, totaltime);\n        end = Number(end.toFixed(2));\n        self.end = end;\n        self.totaltime = totaltime;\n        self.duration = self.end - self.start;\n        self.title = videoInfo.name;\n        self.videoId = videoInfo.uuid;\n        self.posterImage = 'https://' + domain + videoInfo.thumbnailPath;\n\n        let iframeURL = `https://${domain}${videoInfo.embedPath}?api=1&autoplay=1&end=${end}&start=${start}`;\n        iframeURL += `&warningTitle=0&controls=${showControls || !self.allowAutoplay\n            ? 1 : 0}&peertubeLink=0&p2p=0&muted=0&controlBar=${showControls ? 1 : 0}&title=0`;\n        if (password && password !== '') { // If the video is password protected. We need to pass the password to the embed API.\n            iframeURL += `&waitPasswordFromEmbedAPI=1`;\n        }\n        $(`#${node}`)\n            .replaceWith(`<iframe id=\"${node}\" src=\"${iframeURL}\" width=\"100%\" height=\"100%\" allow=\"autoplay\"\n             frameborder=\"0\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"></iframe>`);\n        // Create the video element.\n        player = new PeerTubePlayer(document.getElementById(node));\n        player.setVideoPassword(password); // Set the password for the video.\n        await player.ready; // Wait for the player to be ready.\n        player.pause();\n        player.setVolume(0);\n        player.seek(start);\n        let captions = await player.getCaptions();\n        if (captions.length > 0) {\n            captions = captions.map((caption) => {\n                return {\n                    label: caption.label,\n                    code: caption.id,\n                };\n            });\n        }\n        dispatchEvent('iv:playerLoaded', {\n            tracks: captions, qualities: self.getQualities(),\n        });\n\n        let listener = (status) => {\n            let currentTime = status.position;\n            self.currentTime = currentTime;\n            switch (status.playbackState) {\n                case 'playing':\n                    self.paused = false;\n                    self.ended = false;\n                    if (currentTime < self.start) {\n                        self.seek(self.start);\n                    }\n                    dispatchEvent('iv:playerPlaying');\n                    if (currentTime >= self.end) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    break;\n\n                case 'ended':\n                    if (!self.ended) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    self.paused = true;\n                    break;\n            }\n        };\n\n        player.addEventListener('playbackStatusChange', (status) => {\n            if (!ready) {\n                player.setVolume(0);\n                return;\n            }\n            if (status === 'paused') {\n                self.paused = true;\n                dispatchEvent('iv:playerPaused');\n            }\n        });\n\n        player.addEventListener('playbackStatusUpdate', (status) => {\n            if (self.ended) {\n                return;\n            }\n            if (!ready) {\n                player.setVolume(0);\n                // Peertube player remembers the last position of the video.\n                // We need to make sure the video is at the start before dispatching the ready event.\n                const goToStart = setInterval(() => {\n                    if (status.position > self.start\n                        || status.position >= self.end\n                        || status.position <= self.start) {\n                        clearInterval(goToStart);\n                        player.seek(self.start);\n                        player.pause();\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        player.setVolume(1);\n                    }\n                }, 100);\n            } else {\n                listener(status);\n            }\n        });\n\n        return true;\n    }\n\n    async getQualities() {\n        let qualities = await player.getResolutions();\n        if (qualities.length === 0) {\n            return false;\n        }\n        let ids = qualities.map(q => q.id);\n        let label = qualities.map(q => q.label);\n        let active = qualities.find(q => q.active);\n        return {\n            qualities: ids,\n            qualitiesLabel: label,\n            currentQuality: active.id,\n        };\n    }\n\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    async setQuality(quality) {\n        await player.setResolution(quality);\n        return quality;\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        this.ended = false;\n        await player.seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    async getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    async isPaused() {\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    async isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        return this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove(); // Remove the iframe.\n        player.removeEventListener();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused() ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    async setRate(rate) {\n        await player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    async setCaption(track) {\n        await player.setCaption(track);\n    }\n}\n\nexport default PeerTube;\n"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","password","url","start","end","opts","showControls","node","allowAutoplay","document","getElementById","this","remove","match","domain","videoId","split","myHeaders","Headers","append","videoInfo","fetch","method","headers","json","code","string","pwd","window","prompt","load","duration","alert","self","ready","videoFile","files","pop","aspectratio","attr","fileDownloadUrl","on","videoWidth","videoHeight","totaltime","Number","toFixed","Math","min","title","name","uuid","posterImage","thumbnailPath","iframeURL","embedPath","replaceWith","PeerTubePlayer","setVideoPassword","pause","setVolume","seek","captions","getCaptions","length","map","caption","label","id","tracks","qualities","getQualities","addEventListener","status","paused","ended","currentTime","position","playbackState","listener","goToStart","setInterval","clearInterval","getResolutions","q","qualitiesLabel","currentQuality","find","active","setResolution","play","stop","starttime","time","getCurrentTime","isEnded","ratio","destroy","removeEventListener","getState","isPaused","rate","setPlaybackRate","mute","unMute","originalPlayer","track","setCaption"],"mappings":"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"}