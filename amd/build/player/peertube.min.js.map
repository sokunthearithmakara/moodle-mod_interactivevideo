{"version":3,"file":"peertube.min.js","sources":["../../src/player/peertube.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * PeerTube Player class\n * https://docs.joinpeertube.org/api/embed-player#embed-methods\n *\n * @module     mod_interactivevideo/player/peertube\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport {PeerTubePlayer} from 'mod_interactivevideo/libraries/peertube';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\n\nclass PeerTube {\n    /**\n     * Creates an instance of the PeerTube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.useAnimationFrame = false;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default peertube\n         * @private\n         * @readonly\n         */\n        this.type = 'peertube';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.7;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n        // Get the id and domain of the video.\n        // Sample Url: https://video.hardlimit.com/w/hFwjKHQa3ixivePeqGc4KR\n        const regex = /https:\\/\\/([^/]+)\\/w\\/([^/]+)/;\n        const match = url.match(regex);\n        const domain = match[1];\n        const id = match[2];\n        let videoId = id.split('?')[0];\n\n        // Get the video info\n        let password = url.split('?password=')[1];\n        const myHeaders = new Headers();\n        if (password && password !== '') {\n            myHeaders.append(\"x-peertube-video-password\", password);\n        }\n        let videoInfo = await fetch(`https://${domain}/api/v1/videos/${videoId}`, {\n            method: 'GET',\n            headers: myHeaders,\n        });\n        videoInfo = await videoInfo.json();\n        self.duration = Number(videoInfo.duration.toFixed(2));\n        self.title = videoInfo.name;\n        self.videoId = videoInfo.uuid;\n        self.posterImage = 'https://' + domain + videoInfo.thumbnailPath;\n\n        let iframeURL = `https://${domain}${videoInfo.embedPath}?api=1&autoplay=0`;\n        iframeURL += `&warningTitle=0&controls=1&peertubeLink=0&p2p=0&muted=0&controlBar=1&title=0`;\n        if (password && password !== '') { // If the video is password protected. We need to pass the password to the embed API.\n            iframeURL += `&waitPasswordFromEmbedAPI=1`;\n        }\n        $(`#${node}`)\n            .replaceWith(`<iframe id=\"${node}\" src=\"${iframeURL}\" width=\"100%\" height=\"100%\" allow=\"autoplay\"\n             frameborder=\"0\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"></iframe>`);\n        // Create the video element.\n        player[node] = new PeerTubePlayer(document.getElementById(node));\n        player[node].setVideoPassword(password); // Set the password for the video.\n        await player[node].ready; // Wait for the player to be ready.\n\n        player[node].addEventListener('playbackStatusUpdate', (status) => {\n            self.currentTime = status.position;\n        });\n        return new Promise((resolve) => {\n            resolve({\n                duration: self.duration,\n                title: self.title,\n                posterImage: self.posterImage,\n            });\n        });\n    }\n\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @param {boolean} reloaded\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.start = start;\n        this.node = node;\n\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n            $('#video-block, .video-block').remove();\n        }\n\n        // Get the id and domain of the video.\n        // Sample Url: https://video.hardlimit.com/w/hFwjKHQa3ixivePeqGc4KR\n        const regex = /https:\\/\\/([^/]+)\\/w\\/([^/]+)/;\n        const match = url.match(regex);\n        const domain = match[1];\n        const id = match[2];\n        let videoId = id.split('?')[0];\n\n        // Get the video info\n        let password = url.split('?password=')[1];\n        const myHeaders = new Headers();\n        if (password && password !== '') {\n            myHeaders.append(\"x-peertube-video-password\", password);\n        }\n        let videoInfo = await fetch(`https://${domain}/api/v1/videos/${videoId}`, {\n            method: 'GET',\n            headers: myHeaders,\n        });\n        videoInfo = await videoInfo.json();\n        if (videoInfo.code === 'video_requires_password' || videoInfo.code === 'incorrect_video_password') {\n            // Show the password prompt.\n            let string = videoInfo.code === 'video_requires_password' ? 'This video is password protected' : 'Incorrect password';\n            // eslint-disable-next-line no-alert\n            const pwd = window.prompt(string, \"\");\n            if (pwd === null) {\n                return false;\n            }\n            url = url.split('?password=')[0]; // Remove the old password from the url.\n            this.load(url + '?password=' + pwd, start, end, opts);\n            return false;\n        }\n\n        if (!videoInfo.duration) {\n            // eslint-disable-next-line no-alert\n            alert('The video is not available');\n            return false;\n        }\n        let self = this;\n        let ready = false;\n        let videoFile = videoInfo.files.pop();\n        this.aspectratio = 16 / 9;\n        if (videoFile) {\n            // Get width and height of the video\n            let $vdo = $('<video>').attr('src', videoFile.fileDownloadUrl).attr('preload', 'metadata');\n            $vdo.on('loadedmetadata', function() {\n                self.aspectratio = this.videoWidth / this.videoHeight;\n            });\n        }\n        const totaltime = Number(videoInfo.duration.toFixed(2)) - self.frequency;\n        end = !end ? totaltime : Math.min(end, totaltime);\n        end = Number(end.toFixed(2));\n        self.end = end;\n        self.totaltime = totaltime;\n        self.duration = self.end - self.start;\n        self.title = videoInfo.name;\n        self.videoId = videoInfo.uuid;\n        self.posterImage = 'https://' + domain + videoInfo.thumbnailPath;\n\n        let iframeURL = `https://${domain}${videoInfo.embedPath}?api=1&autoplay=1&end=${end}&start=${start}`;\n        iframeURL += `&warningTitle=0&controls=${showControls || !self.allowAutoplay\n            ? 1 : 0}&peertubeLink=0&p2p=0&muted=0&controlBar=${showControls ? 1 : 0}&title=0`;\n        if (password && password !== '') { // If the video is password protected. We need to pass the password to the embed API.\n            iframeURL += `&waitPasswordFromEmbedAPI=1`;\n        }\n        $(`#${node}`)\n            .replaceWith(`<iframe id=\"${node}\" src=\"${iframeURL}\" width=\"100%\" height=\"100%\" allow=\"autoplay\"\n             frameborder=\"0\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"></iframe>`);\n        // Create the video element.\n        player[node] = new PeerTubePlayer(document.getElementById(node));\n        player[node].setVideoPassword(password); // Set the password for the video.\n        await player[node].ready; // Wait for the player to be ready.\n        player[node].pause();\n        player[node].setVolume(0);\n        player[node].seek(start);\n        let captions = await player[node].getCaptions();\n        if (captions.length > 0) {\n            captions = captions.map((caption) => {\n                return {\n                    label: caption.label,\n                    code: caption.id,\n                };\n            });\n        }\n        dispatchEvent('iv:playerLoaded', {\n            tracks: captions, qualities: self.getQualities(),\n            reloaded: reloaded,\n        });\n\n        let listener = (status) => {\n            let currentTime = status.position;\n            self.currentTime = currentTime;\n            switch (status.playbackState) {\n                case 'playing':\n                    self.paused = false;\n                    self.ended = false;\n                    if (currentTime < self.start) {\n                        self.seek(self.start);\n                    }\n                    dispatchEvent('iv:playerPlaying');\n                    if (currentTime >= self.end) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    break;\n\n                case 'ended':\n                    if (!self.ended) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    self.paused = true;\n                    break;\n            }\n        };\n\n        player[node].addEventListener('playbackStatusChange', (status) => {\n            if (!ready) {\n                player[node].setVolume(0);\n                return;\n            }\n            if (status === 'paused') {\n                self.paused = true;\n                dispatchEvent('iv:playerPaused');\n            } else if (status === 'playing') {\n                self.paused = false;\n                dispatchEvent('iv:playerPlay');\n            }\n        });\n\n        player[node].addEventListener('playbackStatusUpdate', (status) => {\n            if (self.ended) {\n                return;\n            }\n            if (!ready) {\n                player[node].setVolume(0);\n                // Peertube player remembers the last position of the video.\n                // We need to make sure the video is at the start before dispatching the ready event.\n                const goToStart = setInterval(() => {\n                    if (status.position > self.start\n                        || status.position >= self.end\n                        || status.position <= self.start) {\n                        clearInterval(goToStart);\n                        player[node].seek(self.start);\n                        player[node].pause();\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        player[node].setVolume(1);\n                    }\n                }, 100);\n            } else {\n                listener(status);\n            }\n        });\n\n        player[node].addEventListener('volumeChange', function(e) {\n            dispatchEvent('iv:playerVolumeChange', {volume: e});\n        });\n\n        return true;\n    }\n\n    async getQualities() {\n        if (!player[this.node]) {\n            return null;\n        }\n        let qualities = await player[this.node].getResolutions();\n        if (qualities.length === 0) {\n            return false;\n        }\n        let ids = qualities.map(q => q.id);\n        let label = qualities.map(q => q.label);\n        let active = qualities.find(q => q.active);\n        return {\n            qualities: ids,\n            qualitiesLabel: label,\n            currentQuality: active.id,\n        };\n    }\n\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    async setQuality(quality) {\n        if (!player[this.node]) {\n            return quality;\n        }\n        await player[this.node].setResolution(quality);\n        return quality;\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return false;\n        }\n        player[this.node].pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seek(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        this.ended = false;\n        await player[this.node].seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.currentTime;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    async getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    async isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    async isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.ended) {\n            return true;\n        }\n        return this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove(); // Remove the iframe.\n        player[this.node].removeEventListener();\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        return this.isPaused() ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    async setRate(rate) {\n        if (!player[this.node]) {\n            return rate;\n        }\n        await player[this.node].setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(0);\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(1);\n    }\n\n    async isMuted() {\n        if (!player[this.node]) {\n            return true;\n        }\n        let volume = await player[this.node].getVolume();\n        return volume === 0;\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    async setCaption(track) {\n        if (!player[this.node]) {\n            return;\n        }\n        await player[this.node].setCaption(track);\n    }\n}\n\nexport default PeerTube;\n"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","password","url","node","self","this","match","domain","videoId","split","myHeaders","Headers","append","videoInfo","fetch","method","headers","json","duration","Number","toFixed","title","name","uuid","posterImage","thumbnailPath","iframeURL","embedPath","replaceWith","PeerTubePlayer","document","getElementById","setVideoPassword","ready","addEventListener","status","currentTime","position","Promise","resolve","start","end","opts","reloaded","showControls","allowAutoplay","remove","code","string","pwd","window","prompt","load","alert","videoFile","files","pop","aspectratio","attr","fileDownloadUrl","on","videoWidth","videoHeight","totaltime","Math","min","pause","setVolume","seek","captions","getCaptions","length","map","caption","label","id","tracks","qualities","getQualities","paused","ended","playbackState","listener","goToStart","setInterval","clearInterval","e","volume","getResolutions","q","qualitiesLabel","currentQuality","find","active","setResolution","play","stop","starttime","time","getCurrentTime","isEnded","ratio","destroy","removeEventListener","getState","isPaused","rate","setPlaybackRate","mute","unMute","getVolume","originalPlayer","track","setCaption"],"mappings":"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"}