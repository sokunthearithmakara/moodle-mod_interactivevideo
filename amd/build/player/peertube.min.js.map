{"version":3,"file":"peertube.min.js","sources":["../../src/player/peertube.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * PeerTube Player class\n * https://docs.joinpeertube.org/api/embed-player#embed-methods\n *\n * @module     mod_interactivevideo/player/peertube\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport {PeerTubePlayer} from 'mod_interactivevideo/libraries/peertube';\nlet player;\n\nclass PeerTube {\n    /**\n     * Creates an instance of the PeerTube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.useAnimationFrame = false;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default peertube\n         * @private\n         * @readonly\n         */\n        this.type = 'peertube';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.start = start;\n        this.node = node;\n\n        // Get the id and domain of the video.\n        // Sample Url: https://video.hardlimit.com/w/hFwjKHQa3ixivePeqGc4KR\n        const regex = /https:\\/\\/([^/]+)\\/w\\/([^/]+)/;\n        const match = url.match(regex);\n        const domain = match[1];\n        const id = match[2];\n        let videoId = id.split('?')[0];\n\n        // Get the video info\n        let password = url.split('?password=')[1];\n        const myHeaders = new Headers();\n        if (password && password !== '') {\n            myHeaders.append(\"x-peertube-video-password\", password);\n        }\n        let videoInfo = await fetch(`https://${domain}/api/v1/videos/${videoId}`, {\n            method: 'GET',\n            headers: myHeaders,\n        });\n        videoInfo = await videoInfo.json();\n        if (videoInfo.code === 'video_requires_password' || videoInfo.code === 'incorrect_video_password') {\n            // Show the password prompt.\n            let string = videoInfo.code === 'video_requires_password' ? 'This video is password protected' : 'Incorrect password';\n            const pwd = window.prompt(string, \"\");\n            if (pwd === null) {\n                return false;\n            }\n            url = url.split('?password=')[0]; // Remove the old password from the url.\n            this.load(url + '?password=' + pwd, start, end, opts);\n            return false;\n        }\n\n        if (!videoInfo.duration) {\n            alert('The video is not available');\n            return false;\n        }\n        let self = this;\n        let ready = false;\n        let videoFile = videoInfo.files.pop();\n        this.aspectratio = 16 / 9;\n        if (videoFile) {\n            // Get width and height of the video\n            let $vdo = $('<video>').attr('src', videoFile.fileDownloadUrl).attr('preload', 'metadata');\n            $vdo.on('loadedmetadata', function() {\n                self.aspectratio = this.videoWidth / this.videoHeight;\n            });\n        }\n        const totaltime = Number(videoInfo.duration.toFixed(2)) - self.frequency;\n        end = !end ? totaltime : Math.min(end, totaltime);\n        end = Number(end.toFixed(2));\n        self.end = end;\n        self.totaltime = totaltime;\n        self.duration = self.end - self.start;\n        self.title = videoInfo.name;\n        self.videoId = videoInfo.uuid;\n        self.posterImage = 'https://' + domain + videoInfo.thumbnailPath;\n\n        let iframeURL = `https://${domain}${videoInfo.embedPath}?api=1&autoplay=1&end=${end}`;\n        iframeURL += `&warningTitle=0&controls=${showControls ? 1 : 0}&peertubeLink=0&p2p=0&muted=0`;\n        if (password && password !== '') { // If the video is password protected. We need to pass the password to the embed API.\n            iframeURL += `&waitPasswordFromEmbedAPI=1`;\n        }\n        $(`#${node}`)\n            .replaceWith(`<iframe id=\"${node}\" src=\"${iframeURL}\" width=\"100%\" height=\"100%\" allow=\"autoplay\"\n             frameborder=\"0\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups allow-forms\"></iframe>`);\n        // Create the video element.\n        player = new PeerTubePlayer(document.getElementById(node));\n        player.setVideoPassword(password); // Set the password for the video.\n        await player.ready; // Wait for the player to be ready.\n        player.pause();\n        let captions = await player.getCaptions();\n        if (captions.length > 0) {\n            captions = captions.map((caption) => {\n                return {\n                    label: caption.label,\n                    code: caption.id,\n                };\n            });\n        }\n        dispatchEvent('iv:playerLoaded', {\n            tracks: captions, qualities: self.getQualities(),\n        });\n\n        self.currentTime = start;\n        ready = true;\n        dispatchEvent('iv:playerReady');\n        player.setVolume(1);\n\n        const listener = (status) => {\n            let currentTime = status.position;\n            self.currentTime = currentTime;\n            switch (status.playbackState) {\n                case 'playing':\n                    if (!ready) {\n                        return;\n                    }\n                    self.paused = false;\n                    self.ended = false;\n                    if (currentTime < self.start) {\n                        player.seek(self.start);\n                    }\n                    dispatchEvent('iv:playerPlaying');\n                    if (currentTime >= self.end) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    break;\n                case 'paused':\n                    self.paused = true;\n                    dispatchEvent('iv:playerPaused');\n                    break;\n                case 'ended':\n                    if (!self.ended) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    }\n                    self.paused = true;\n                    break;\n            }\n        };\n\n        player.addEventListener('playbackStatusUpdate', (status) => {\n            listener(status);\n        });\n\n        return true;\n    }\n\n    async getQualities() {\n        let qualities = await player.getResolutions();\n        if (qualities.length === 0) {\n            return false;\n        }\n        let ids = qualities.map(q => q.id);\n        let label = qualities.map(q => q.label);\n        let active = qualities.find(q => q.active);\n        return {\n            qualities: ids,\n            qualitiesLabel: label,\n            currentQuality: active.id,\n        };\n    }\n\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    async setQuality(quality) {\n        await player.setResolution(quality);\n        return quality;\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        await player.seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return this.currentTime || this.start;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    async getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    async isPaused() {\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    async isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        return this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove(); // Remove the iframe.\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused() ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    async setRate(rate) {\n        await player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    async setCaption(track) {\n        await player.setCaption(track);\n    }\n}\n\nexport default PeerTube;\n"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","password","url","start","end","opts","showControls","node","match","domain","videoId","split","myHeaders","Headers","append","videoInfo","fetch","method","headers","json","code","string","pwd","window","prompt","load","duration","alert","self","this","ready","videoFile","files","pop","aspectratio","attr","fileDownloadUrl","on","videoWidth","videoHeight","totaltime","Number","toFixed","Math","min","title","name","uuid","posterImage","thumbnailPath","iframeURL","embedPath","replaceWith","PeerTubePlayer","document","getElementById","setVideoPassword","pause","captions","getCaptions","length","map","caption","label","id","tracks","qualities","getQualities","currentTime","setVolume","addEventListener","status","position","playbackState","paused","ended","seek","listener","getResolutions","q","qualitiesLabel","currentQuality","find","active","setResolution","play","stop","starttime","time","getCurrentTime","isEnded","ratio","destroy","remove","getState","isPaused","rate","setPlaybackRate","mute","unMute","originalPlayer","track","setCaption"],"mappings":";;;;;;;;SA0BIA,kKAQAC,mBACSC,mBAAoB,OAQpBC,KAAO,gBAKPC,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,EACTC,UAAU,cAYPC,IAAKC,MAAOC,SAAKC,4DAAO,SACzBC,aAAeD,KAAKC,eAAgB,EACpCC,KAAOF,KAAKE,MAAQ,cACrBJ,MAAQA,WACRI,KAAOA,WAKNC,MAAQN,IAAIM,MADJ,iCAERC,OAASD,MAAM,OAEjBE,QADOF,MAAM,GACAG,MAAM,KAAK,GAGxBV,SAAWC,IAAIS,MAAM,cAAc,SACjCC,UAAY,IAAIC,QAClBZ,UAAyB,KAAbA,UACZW,UAAUE,OAAO,4BAA6Bb,cAE9Cc,gBAAkBC,wBAAiBP,iCAAwBC,SAAW,CACtEO,OAAQ,MACRC,QAASN,eAEbG,gBAAkBA,UAAUI,OACL,4BAAnBJ,UAAUK,MAAyD,6BAAnBL,UAAUK,KAAqC,KAE3FC,OAA4B,4BAAnBN,UAAUK,KAAqC,mCAAqC,2BAC3FE,IAAMC,OAAOC,OAAOH,OAAQ,WACtB,OAARC,MAGJpB,IAAMA,IAAIS,MAAM,cAAc,QACzBc,KAAKvB,IAAM,aAAeoB,IAAKnB,MAAOC,IAAKC,QAHrC,MAOVU,UAAUW,gBACXC,MAAM,+BACC,MAEPC,KAAOC,KACPC,OAAQ,EACRC,UAAYhB,UAAUiB,MAAMC,cAC3BC,YAAc,GAAK,EACpBH,UAAW,EAEA,mBAAE,WAAWI,KAAK,MAAOJ,UAAUK,iBAAiBD,KAAK,UAAW,YAC1EE,GAAG,kBAAkB,WACtBT,KAAKM,YAAcL,KAAKS,WAAaT,KAAKU,qBAG5CC,UAAYC,OAAO1B,UAAUW,SAASgB,QAAQ,IAAMd,KAAK/B,UAC/DO,IAAOA,IAAkBuC,KAAKC,IAAIxC,IAAKoC,WAA1BA,UACbpC,IAAMqC,OAAOrC,IAAIsC,QAAQ,IACzBd,KAAKxB,IAAMA,IACXwB,KAAKY,UAAYA,UACjBZ,KAAKF,SAAWE,KAAKxB,IAAMwB,KAAKzB,MAChCyB,KAAKiB,MAAQ9B,UAAU+B,KACvBlB,KAAKlB,QAAUK,UAAUgC,KACzBnB,KAAKoB,YAAc,WAAavC,OAASM,UAAUkC,kBAE/CC,4BAAuBzC,eAASM,UAAUoC,2CAAkC/C,KAChF8C,8CAAyC5C,aAAe,EAAI,mCACxDL,UAAyB,KAAbA,WACZiD,yEAEE3C,OACD6C,kCAA2B7C,uBAAc2C,0LAG9CzD,OAAS,IAAI4D,yBAAeC,SAASC,eAAehD,OACpDd,OAAO+D,iBAAiBvD,gBAClBR,OAAOqC,MACbrC,OAAOgE,YACHC,eAAiBjE,OAAOkE,cACxBD,SAASE,OAAS,IAClBF,SAAWA,SAASG,KAAKC,UACd,CACHC,MAAOD,QAAQC,MACf3C,KAAM0C,QAAQE,4CAIZ,kBAAmB,CAC7BC,OAAQP,SAAUQ,UAAWtC,KAAKuC,iBAGtCvC,KAAKwC,YAAcjE,MACnB2B,OAAQ,sCACM,kBACdrC,OAAO4E,UAAU,UAmCjB5E,OAAO6E,iBAAiB,wBAAyBC,SAjC/BA,CAAAA,aACVH,YAAcG,OAAOC,gBACzB5C,KAAKwC,YAAcA,YACXG,OAAOE,mBACN,UAID7C,KAAK8C,QAAS,EACd9C,KAAK+C,OAAQ,EACTP,YAAcxC,KAAKzB,OACnBV,OAAOmF,KAAKhD,KAAKzB,2CAEP,oBACViE,aAAexC,KAAKxB,MACpBwB,KAAK+C,OAAQ,sCACC,6BAGjB,SACD/C,KAAK8C,QAAS,sCACA,6BAEb,QACI9C,KAAK+C,QACN/C,KAAK+C,OAAQ,sCACC,mBAElB/C,KAAK8C,QAAS,IAMtBG,CAASN,YAGN,2BAIHL,gBAAkBzE,OAAOqF,wBACJ,IAArBZ,UAAUN,QAMP,CACHM,UAJMA,UAAUL,KAAIkB,GAAKA,EAAEf,KAK3BgB,eAJQd,UAAUL,KAAIkB,GAAKA,EAAEhB,QAK7BkB,eAJSf,UAAUgB,MAAKH,GAAKA,EAAEI,SAIRnB,qBASdhE,sBACPP,OAAO2F,cAAcpF,SACpBA,QAOXqF,OACI5F,OAAO4F,YACFX,QAAS,EAMlBjB,eACIhE,OAAOgE,aACFiB,QAAS,GACP,EAOXY,KAAKC,WACD9F,OAAOmF,KAAKW,WACZ9F,OAAOgE,mBAOA+B,mBACD/F,OAAOmF,KAAKY,0CACJ,gBAAiB,CAACA,KAAMA,QAC/B,EAMXC,wBACW5D,KAAKuC,aAAevC,KAAK1B,iCAOzB0B,KAAKW,kCAOLX,KAAK6C,gCAOJ7C,KAAK6C,OAMjBgB,kBACQ7D,KAAK8C,OAGF9C,KAAKuC,aAAevC,KAAKzB,IAMpCuF,eACW9D,KAAKK,YAMhB0D,yCACU/D,KAAKtB,OAAQsF,6CACL,sBAMlBC,kBACWjE,KAAKkE,WAAa,SAAW,wBAM1BC,mBACJvG,OAAOwG,gBAAgBD,MACtBA,KAKXE,OACIzG,OAAO4E,UAAU,GAKrB8B,SACI1G,OAAO4E,UAAU,GAKrB+B,wBACW3G,wBAOM4G,aACP5G,OAAO6G,WAAWD"}