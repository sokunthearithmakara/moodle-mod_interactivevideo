{"version":3,"file":"dailymotion.min.js","sources":["../../src/player/dailymotion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * DailyMotion Player class\n * Documented at https://developers.dailymotion.com/sdk/player-sdk/web/\n * @module     mod_interactivevideo/player/dailymotion\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\nlet player = {};\nclass DailyMotion {\n    /**\n     * Construct a new DailyMotion player instance.\n     */\n    constructor() {\n        this.type = 'dailymotion';\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n        this.useAnimationFrame = false;\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        return new Promise((resolve) => {\n            let dailymotion = window.dailymotion;\n            const reg = /(?:https?:\\/\\/)?(?:www\\.)?(?:dai\\.ly|dailymotion\\.com)\\/(?:embed\\/video\\/|video\\/|)([^/]+)/g;\n            const match = reg.exec(url);\n            const videoId = match[1];\n\n            const dailymotionEvents = async(player) => {\n                const state = await player.getState();\n                resolve({\n                    duration: state.videoDuration,\n                    title: state.videoTitle,\n                    posterImage: state.videoThumbnails[\"480\"],\n                });\n            };\n\n            const dmOptions = {\n                video: videoId,\n                params: {\n                    startTime: 0,\n                    mute: true,\n                },\n            };\n\n            if (!window.dailymotion) {\n                // Add dailymotion script.\n                // At the time of writing this, the dailymotion player script is not generally available.\n                // Developers must set up the players and get the script from the dailymotion website.\n                var tag = document.createElement('script');\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyje.js\";\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n                window.dailymotion = {\n                    onScriptLoaded: async() => {\n                        dailymotion = window.dailymotion;\n                        player[node] = await dailymotion.createPlayer(node, dmOptions);\n                        dailymotionEvents(player[node]);\n                    }\n                };\n            } else {\n                player[node] = window.dailymotion.createPlayer(node, dmOptions);\n                dailymotionEvents(player[node]);\n                dailymotion = window.dailymotion;\n            }\n        });\n    }\n    /**\n     * Loads a new Dailymotion player instance.\n     *\n     * @param {string} url - The URL of the Dailymotion video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.start = start;\n\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        const reg = /(?:https?:\\/\\/)?(?:www\\.)?(?:dai\\.ly|dailymotion\\.com)\\/(?:embed\\/video\\/|video\\/|)([^/]+)/g;\n        const match = reg.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        var self = this;\n        self.aspectratio = 16 / 9; //\n        self.posterImage = '';\n        if (opts.editform) {\n            fetch(`https://api.dailymotion.com/video/${videoId}?fields=thumbnail_720_url`)\n                .then(response => response.json())\n                .then(data => {\n                    self.posterImage = data.thumbnail_720_url;\n                    return;\n                })\n                .catch(() => {\n                    return;\n                });\n        }\n        var ready = false;\n        var dmOptions = {\n            video: videoId,\n            params: {\n                startTime: start,\n                mute: true,\n            },\n        };\n        let dailymotion;\n        const dailymotionEvents = async(player) => {\n            const state = await player.getState();\n            if (state.playerIsViewable === false && state.videoDuration == 0) {\n                dispatchEvent('iv:playerError', {error: 'Video is not viewable.'});\n                return;\n            }\n\n            player.off(dailymotion.events.VIDEO_DURATIONCHANGE);\n            if ((state.videoIsPasswordRequired && state.videoDuration == 0) || state.videoDuration == 0) {\n                player.on(dailymotion.events.VIDEO_DURATIONCHANGE, function() {\n                    dailymotionEvents(player);\n                });\n                return;\n            }\n            self.aspectratio = await self.ratio();\n            const totaltime = Number(state.videoDuration.toFixed(2)) - self.frequency;\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            self.title = state.videoTitle;\n\n            // Get the available captions.\n            // Unset the captions.\n            player.setSubtitles(null);\n            let tracks = state.videoSubtitlesList;\n            if (tracks && tracks.length > 0) {\n                tracks = tracks.map(track => {\n                    const locale = track.split('-')[0];\n                    const country = track.split('-')[1];\n                    let displayNames;\n                    try {\n                        displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                    } catch (e) {\n                        displayNames = new Intl.DisplayNames(['en'], {type: 'language'});\n                    }\n                    let label;\n                    if (country == 'auto') {\n                        label = displayNames.of(locale) + ' (Auto)';\n                    } else {\n                        label = displayNames.of(track) ?? track.toUpperCase();\n                    }\n                    return {\n                        label,\n                        code: track,\n                    };\n                });\n                self.captions = tracks;\n            }\n\n            // Fire iv:playerLoaded event\n            dispatchEvent('iv:playerLoaded', {\n                tracks: tracks, qualities: self.getQualities(),\n                reloaded: reloaded,\n            });\n\n            // If the browser blocks autoplay, we need to show the play button.\n            if (!state.playerIsPlaybackAllowed && !ready) {\n                self.paused = false;\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                $('#start-screen #play').removeClass('d-none');\n                $('#start-screen #spinner').remove();\n                $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                $('#annotation-canvas').removeClass('d-none w-0');\n            }\n\n            // Handle Dailymotion behavior. Video always start from the start time,\n            // So if you seek before starting the video, it will just start from the beginning.\n            // So, to deal with this, we have to start the video as soon as the player is ready.\n            // Let it play on mute which sometimes include ads. When the ad is done, the VIDEO_START event will fire.\n            // That's when we let user know, player is ready.\n            const playerEvents = () => {\n                player.on(dailymotion.events.VIDEO_END, function() {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                });\n\n                player.off(dailymotion.events.VIDEO_TIMECHANGE);\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, async function(e) {\n                    if (!ready) {\n                        return;\n                    }\n                    if (e.videoTime < start) {\n                        player.seek(start);\n                    }\n                    if (e.videoTime > end + self.frequency) {\n                        player.seek(end - 1);\n                    }\n                    if (self.ended) {\n                        dispatchEvent('iv:playerEnded');\n                        self.ended = false;\n                    } else {\n                        if (e.playerIsPlaying === true) {\n                            dispatchEvent('iv:playerPlaying');\n                            self.ended = false;\n                            self.paused = false;\n                        }\n                        if (e.videoTime >= end) {\n                            dispatchEvent('iv:playerEnded');\n                            self.ended = true;\n                        }\n                    }\n                });\n\n                player.off(dailymotion.events.VIDEO_PLAY);\n                player.on(dailymotion.events.VIDEO_PLAY, async function(e) {\n                    // If (!ready) {\n                    //     return;\n                    // }\n                    if (self.ended || e.videoTime >= end) {\n                        self.ended = false;\n                        player.seek(start);\n                    }\n                    self.paused = false;\n                    dispatchEvent('iv:playerPlay');\n                });\n\n                player.on(dailymotion.events.VIDEO_PAUSE, async function() {\n                    if (!ready) {\n                        return;\n                    }\n                    self.paused = true;\n                    if (player.getState().videoTime >= end) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    } else {\n                        dispatchEvent('iv:playerPaused');\n                    }\n                });\n\n                player.on(dailymotion.events.PLAYER_ERROR, function(e) {\n                    dispatchEvent('iv:playerError', {error: e});\n                });\n\n                player.on(dailymotion.events.PLAYER_PLAYBACKSPEEDCHANGE, function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.playerPlaybackSpeed});\n                });\n\n                player.on(dailymotion.events.VIDEO_QUALITYCHANGE, function(e) {\n                    dispatchEvent('iv:playerQualityChange', {quality: e.videoQuality});\n                });\n            };\n\n            if (customStart) {\n                player.setMute(true);\n                player.play(); // Start the video to get the ad out of the way.\n                self.paused = false;\n                player.on(dailymotion.events.VIDEO_PLAY, function() {\n                    dispatchEvent('iv:playerPlay');\n                });\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, function() {\n                    $(\"#start-screen\").removeClass('bg-transparent');\n                    if (ready == true) { // When the video is replayed, it will fire VIDEO_START event again.\n                        player.setMute(true);\n                    }\n                    setTimeout(async() => {\n                        if (state.playerIsPlaybackAllowed) {\n                            player.pause();\n                        }\n                        player.seek(start);\n                        player.setMute(false);\n                        if (!ready) {\n                            playerEvents();\n                            ready = true;\n                            if (state.playerIsPlaybackAllowed) {\n                                dispatchEvent('iv:playerReady');\n                            }\n                        }\n                    }, state.playerIsPlaybackAllowed ? 1000 : 0);\n                });\n            } else {\n                playerEvents();\n                ready = true;\n                if (state.playerIsPlaybackAllowed) {\n                    dispatchEvent('iv:playerReady');\n                }\n            }\n\n            // Show ads to user so they know ad is playing, not because something is wrong.\n            player.on(dailymotion.events.AD_START, function() {\n                $(\".video-block, #video-block\").addClass('d-none');\n                $(\"#start-screen\").addClass('d-none');\n                $('#annotation-canvas').removeClass('d-none w-0');\n            });\n\n            player.on(dailymotion.events.AD_END, function() {\n                $(\".video-block, #video-block\").removeClass('d-none');\n                $(\"#start-screen\").removeClass('d-none');\n            });\n        };\n\n        if (!window.dailymotion || !window.dailymotion.createPlayer) {\n            // Add dailymotion script.\n            // At the time of writing this, the dailymotion player script is not generally available.\n            // Developers must set up the players and get the script from the dailymotion website.\n            var tag = document.createElement('script');\n            if (showControls || opts.passwordprotected) {\n                // If password protected, show controls; otherwise, users can't enter the password.\n                // (Possible bug on Dailymotion side)\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyje.js\";\n            } else {\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyj8.js\";\n            }\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.dailymotion = {\n                onScriptLoaded: async() => {\n                    dailymotion = window.dailymotion;\n                    player[node] = await dailymotion.createPlayer(node, dmOptions);\n                    dailymotionEvents(player[node]);\n                }\n            };\n        } else {\n            player[node] = await window.dailymotion.createPlayer(node, dmOptions);\n            dailymotionEvents(player[node]);\n            dailymotion = window.dailymotion;\n        }\n    }\n    /**\n     * Plays the Dailymotion video using the player instance.\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Dailymotion player.\n     *\n     * This method calls the `pause` function on the `player` object to halt video playback.\n     */\n    async pause() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        await player[this.node].pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and seeks to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to seek to before pausing the video.\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seek(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<void>} A promise that resolves when the seek operation is complete.\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return;\n        }\n        let currentTime = await this.getCurrentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        await player[this.node].seek(time);\n        this.ended = false;\n        dispatchEvent('iv:playerSeek', {time: time});\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current video time in seconds.\n     */\n    async getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        const state = await player[this.node].getState();\n        return state.videoTime;\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        const state = await player[this.node].getState();\n        return state.videoDuration;\n    }\n    /**\n     * Checks if the Dailymotion player is paused.\n     *\n     * @async\n     * @function isPaused\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        const state = await player[this.node].getState();\n        return !state.playerIsPlaying;\n    }\n    /**\n     * Checks if the Dailymotion player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is playing.\n     */\n    async isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        const state = await player[this.node].getState();\n        return state.playerIsPlaying;\n    }\n\n    /**\n     * Checks if the Dailymotion player has ended and is on the replay screen.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is on the replay screen.\n     */\n    async isEnded() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.ended) {\n            return true;\n        }\n        const state = await player[this.node].getState();\n        return state.playerIsReplayScreen;\n    }\n    /**\n     * Calculates the aspect ratio of the player and compares it to 16:9.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns 16:9.\n     *\n     * @returns {Promise<number>} The aspect ratio of the player or 16:9.\n     */\n    async ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        const state = await player[this.node].getState();\n        const ratio = state.playerAspectRatio.split(':');\n        return ratio[0] / ratio[1];\n    }\n    /**\n     * Destroys the Dailymotion player instance.\n     *\n     * This method calls the `destroy` method on the `player` object to clean up\n     * and release any resources held by the player.\n     */\n    destroy() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].off();\n        player[this.node].destroy();\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Asynchronously retrieves the current state of the player.\n     *\n     * @returns {Promise<Object>} A promise that resolves to the current state of the player.\n     */\n    async getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        const state = await player[this.node].getState();\n        return state;\n    }\n    /**\n     * Sets the playback speed of the Dailymotion player.\n     *\n     * @param {number} rate - The playback rate to set.\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setPlaybackSpeed(rate);\n    }\n    /**\n     * Mutes the Dailymotion player.\n     *\n     * This method sets the player's mute state to true, effectively silencing any audio.\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setMute(true);\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmutes the Dailymotion player.\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setMute(false);\n        player[this.node].setVolume(1);\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    async isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        let state = await player[this.node].getState();\n        return state.playerIsMuted;\n    }\n    /**\n     * Returns the original Dailymotion player instance.\n     *\n     * @returns {Object} The Dailymotion player instance.\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    setQuality(quality) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setQuality(quality);\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Promise<Object>} An object containing:\n     * - `qualities` {Array<string>}: A list of available video qualities including 'default'.\n     * - `qualitiesLabel` {Array<string>}: A list of video quality labels including 'Auto'.\n     * - `currentQuality` {string}: The current video quality setting, 'default' if set to 'Auto'.\n     */\n    async getQualities() {\n        if (!player[this.node]) {\n            return null;\n        }\n        let states = await this.getState();\n        return {\n            qualities: ['default', ...states.videoQualitiesList],\n            qualitiesLabel: ['Auto', ...states.videoQualitiesList],\n            currentQuality: states.videoQuality == 'Auto' ? 'default' : states.videoQuality,\n        };\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setSubtitles(track);\n    }\n}\n\nexport default DailyMotion;"],"names":["player","constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","url","node","Promise","resolve","dailymotion","window","videoId","exec","dailymotionEvents","async","state","getState","duration","videoDuration","title","videoTitle","posterImage","videoThumbnails","dmOptions","video","params","startTime","mute","createPlayer","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onScriptLoaded","start","end","opts","reloaded","showControls","customStart","allowAutoplay","getElementById","this","self","aspectratio","editform","fetch","then","response","json","data","thumbnail_720_url","catch","ready","playerIsViewable","error","off","events","VIDEO_DURATIONCHANGE","videoIsPasswordRequired","on","ratio","totaltime","Number","toFixed","Math","min","setSubtitles","tracks","videoSubtitlesList","length","map","track","locale","split","country","displayNames","label","Intl","DisplayNames","M","cfg","language","e","of","toUpperCase","code","captions","qualities","getQualities","playerIsPlaybackAllowed","paused","removeClass","remove","addClass","playerEvents","VIDEO_END","ended","VIDEO_TIMECHANGE","videoTime","seek","playerIsPlaying","VIDEO_PLAY","VIDEO_PAUSE","PLAYER_ERROR","PLAYER_PLAYBACKSPEEDCHANGE","rate","playerPlaybackSpeed","VIDEO_QUALITYCHANGE","videoQuality","setMute","play","setTimeout","pause","AD_START","AD_END","passwordprotected","stop","starttime","time","currentTime","getCurrentTime","playerIsReplayScreen","playerAspectRatio","destroy","setRate","setPlaybackSpeed","volume","unMute","setVolume","playerIsMuted","originalPlayer","setQuality","states","videoQualitiesList","qualitiesLabel","currentQuality","setCaption"],"mappings":"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"}