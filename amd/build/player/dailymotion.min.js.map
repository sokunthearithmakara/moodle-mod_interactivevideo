{"version":3,"file":"dailymotion.min.js","sources":["../../src/player/dailymotion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * DailyMotion Player class\n * Documented at https://developers.dailymotion.com/sdk/player-sdk/web/\n * @module     mod_interactivevideo/player/dailymotion\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nlet player;\nclass DailyMotion {\n    /**\n     * Construct a new DailyMotion player instance.\n     */\n    constructor() {\n        this.type = 'dailymotion';\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n        this.useAnimationFrame = false;\n    }\n    /**\n     * Loads a new Dailymotion player instance.\n     *\n     * @param {string} url - The URL of the Dailymotion video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const node = opts.node || 'player';\n        this.start = start;\n\n        const reg = /(?:https?:\\/\\/)?(?:www\\.)?(?:dai\\.ly|dailymotion\\.com)\\/(?:embed\\/video\\/|video\\/|)([^/]+)/g;\n        const match = reg.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        var self = this;\n        self.aspectratio = 16 / 9; //\n        self.posterImage = '';\n        if (opts.editform) {\n            fetch(`https://api.dailymotion.com/video/${videoId}?fields=thumbnail_720_url`)\n                .then(response => response.json())\n                .then(data => {\n                    self.posterImage = data.thumbnail_720_url;\n                    return;\n                })\n                .catch(() => {\n                    return;\n                });\n        }\n        var ready = false;\n        var dmOptions = {\n            video: videoId,\n            params: {\n                startTime: start,\n            },\n        };\n        let dailymotion;\n        const dailymotionEvents = async(player) => {\n            const state = await player.getState();\n            player.off(dailymotion.events.VIDEO_DURATIONCHANGE);\n            if ((state.videoIsPasswordRequired && state.videoDuration == 0) || state.videoDuration == 0) {\n                player.on(dailymotion.events.VIDEO_DURATIONCHANGE, function() {\n                    dailymotionEvents(player);\n                });\n                return;\n            }\n            self.aspectratio = await self.ratio();\n            const totaltime = Number(state.videoDuration.toFixed(2)) - self.frequency;\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            self.title = state.videoTitle;\n\n            // Get the available captions.\n            // Unset the captions.\n            player.setSubtitles(null);\n            let tracks = state.videoSubtitlesList;\n            if (tracks && tracks.length > 0) {\n                tracks = tracks.map(track => {\n                    const locale = track.split('-')[0];\n                    const country = track.split('-')[1];\n                    const displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                    let label;\n                    if (country == 'auto') {\n                        label = displayNames.of(locale) + ' (Auto)';\n                    } else {\n                        label = displayNames.of(track) ?? track.toUpperCase();\n                    }\n                    return {\n                        label,\n                        code: track,\n                    };\n                });\n                self.captions = tracks;\n            }\n\n            // Fire iv:playerLoaded event\n            dispatchEvent('iv:playerLoaded', {\n                tracks: tracks, qualities: self.getQualities(),\n            });\n\n            // Handle Dailymotion behavior. Video always start from the start time,\n            // So if you seek before starting the video, it will just start from the beginning.\n            // So, to deal with this, we have to start the video as soon as the player is ready.\n            // Let it play on mute which sometimes include ads. When the ad is done, the VIDEO_START event will fire.\n            // That's when we let user know, player is ready.\n            const playerEvents = () => {\n                player.on(dailymotion.events.VIDEO_SEEKEND, function(e) {\n                    if (!ready) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerSeek', e.videoTime);\n                });\n\n                player.on(dailymotion.events.VIDEO_END, function() {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                });\n\n                player.off(dailymotion.events.VIDEO_TIMECHANGE);\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, async function(e) {\n                    if (!ready) {\n                        return;\n                    }\n                    if (e.videoTime < start) {\n                        player.seek(start);\n                    }\n                    if (e.videoTime > end + self.frequency) {\n                        player.seek(end - 1);\n                    }\n                    if (self.ended) {\n                        dispatchEvent('iv:playerEnded');\n                        self.ended = false;\n                    } else {\n                        if (e.playerIsPlaying === true) {\n                            dispatchEvent('iv:playerPlaying');\n                            self.ended = false;\n                            self.paused = false;\n                        }\n                        if (e.videoTime >= end) {\n                            dispatchEvent('iv:playerEnded');\n                            self.ended = true;\n                        }\n                    }\n                });\n\n                player.on(dailymotion.events.VIDEO_PLAY, async function(e) {\n                    if (!ready) {\n                        return;\n                    }\n                    if (self.ended || e.videoTime >= end) {\n                        self.ended = false;\n                        player.seek(start);\n                    }\n                    self.paused = false;\n                    dispatchEvent('iv:playerPlaying');\n                });\n\n                player.on(dailymotion.events.VIDEO_PAUSE, async function() {\n                    if (!ready) {\n                        return;\n                    }\n                    self.paused = true;\n                    if (player.getState().videoTime >= end) {\n                        self.ended = true;\n                        dispatchEvent('iv:playerEnded');\n                    } else {\n                        dispatchEvent('iv:playerPaused');\n                    }\n                });\n\n                player.on(dailymotion.events.PLAYER_ERROR, function(e) {\n                    dispatchEvent('iv:playerError', {error: e});\n                });\n\n                player.on(dailymotion.events.PLAYER_PLAYBACKSPEEDCHANGE, function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.playerPlaybackSpeed});\n                });\n\n                player.on(dailymotion.events.VIDEO_QUALITYCHANGE, function(e) {\n                    dispatchEvent('iv:playerQualityChange', {quality: e.videoQuality});\n                });\n            };\n\n            if (customStart) {\n                player.setMute(true);\n                player.play(); // Start the video to get the ad out of the way.\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, function() {\n                    $(\"#start-screen\").removeClass('bg-transparent');\n                    if (ready == true) { // When the video is replayed, it will fire VIDEO_START event again.\n                        player.setMute(true);\n                    }\n                    setTimeout(async() => {\n                        player.pause();\n                        player.seek(start);\n                        player.setMute(false);\n                        if (!ready) {\n                            playerEvents();\n                            ready = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                    }, 1000);\n                });\n            } else {\n                playerEvents();\n                ready = true;\n                dispatchEvent('iv:playerReady');\n            }\n\n            // Show ads to user so they know ad is playing, not because something is wrong.\n            player.on(dailymotion.events.AD_START, function() {\n                $(\".video-block, #video-block\").addClass('d-none');\n                $(\"#start-screen\").addClass('d-none');\n                $('#annotation-canvas').removeClass('d-none');\n            });\n\n            player.on(dailymotion.events.AD_END, function() {\n                $(\".video-block, #video-block\").removeClass('d-none');\n                $(\"#start-screen\").removeClass('d-none');\n            });\n        };\n\n        if (!window.dailymotion) {\n            // Add dailymotion script.\n            // At the time of writing this, the dailymotion player script is not generally available.\n            // Developers must set up the players and get the script from the dailymotion website.\n            var tag = document.createElement('script');\n            if (showControls || opts.passwordprotected) {\n                // If password protected, show controls; otherwise, users can't enter the password.\n                // (Possible bug on Dailymotion side)\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyje.js\";\n            } else {\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyj8.js\";\n            }\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.dailymotion = {\n                onScriptLoaded: async() => {\n                    dailymotion = window.dailymotion;\n                    player = await dailymotion.createPlayer(node, dmOptions);\n                    dailymotionEvents(player);\n                }\n            };\n        } else {\n            player = await window.dailymotion.createPlayer(node, dmOptions);\n            dailymotionEvents(player);\n            dailymotion = window.dailymotion;\n        }\n    }\n    /**\n     * Plays the Dailymotion video using the player instance.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Dailymotion player.\n     *\n     * This method calls the `pause` function on the `player` object to halt video playback.\n     */\n    async pause() {\n        if (this.paused) {\n            return false;\n        }\n        await player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and seeks to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to seek to before pausing the video.\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<void>} A promise that resolves when the seek operation is complete.\n     */\n    async seek(time) {\n        await player.seek(time);\n        this.ended = false;\n        dispatchEvent('iv:playerSeek', {time: time});\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current video time in seconds.\n     */\n    async getCurrentTime() {\n        const state = await player.getState();\n        return state.videoTime;\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const state = await player.getState();\n        return state.videoDuration;\n    }\n    /**\n     * Checks if the Dailymotion player is paused.\n     *\n     * @async\n     * @function isPaused\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        const state = await player.getState();\n        return !state.playerIsPlaying;\n    }\n    /**\n     * Checks if the Dailymotion player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is playing.\n     */\n    async isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        const state = await player.getState();\n        return state.playerIsPlaying;\n    }\n\n    /**\n     * Checks if the Dailymotion player has ended and is on the replay screen.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is on the replay screen.\n     */\n    async isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        const state = await player.getState();\n        return state.playerIsReplayScreen;\n    }\n    /**\n     * Calculates the aspect ratio of the player and compares it to 16:9.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns 16:9.\n     *\n     * @returns {Promise<number>} The aspect ratio of the player or 16:9.\n     */\n    async ratio() {\n        const state = await player.getState();\n        const ratio = state.playerAspectRatio.split(':');\n        return ratio[0] / ratio[1];\n    }\n    /**\n     * Destroys the Dailymotion player instance.\n     *\n     * This method calls the `destroy` method on the `player` object to clean up\n     * and release any resources held by the player.\n     */\n    destroy() {\n        player.destroy();\n    }\n    /**\n     * Asynchronously retrieves the current state of the player.\n     *\n     * @returns {Promise<Object>} A promise that resolves to the current state of the player.\n     */\n    async getState() {\n        const state = await player.getState();\n        return state;\n    }\n    /**\n     * Sets the playback speed of the Dailymotion player.\n     *\n     * @param {number} rate - The playback rate to set.\n     */\n    setRate(rate) {\n        player.setPlaybackSpeed(rate);\n    }\n    /**\n     * Mutes the Dailymotion player.\n     *\n     * This method sets the player's mute state to true, effectively silencing any audio.\n     */\n    mute() {\n        player.setMute(true);\n    }\n    /**\n     * Unmutes the Dailymotion player.\n     */\n    unMute() {\n        player.setMute(false);\n    }\n    /**\n     * Returns the original Dailymotion player instance.\n     *\n     * @returns {Object} The Dailymotion player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Promise<Object>} An object containing:\n     * - `qualities` {Array<string>}: A list of available video qualities including 'default'.\n     * - `qualitiesLabel` {Array<string>}: A list of video quality labels including 'Auto'.\n     * - `currentQuality` {string}: The current video quality setting, 'default' if set to 'Auto'.\n     */\n    async getQualities() {\n        let states = await this.getState();\n        return {\n            qualities: ['default', ...states.videoQualitiesList],\n            qualitiesLabel: ['Auto', ...states.videoQualitiesList],\n            currentQuality: states.videoQuality == 'Auto' ? 'default' : states.videoQuality,\n        };\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        player.setSubtitles(track);\n    }\n}\n\nexport default DailyMotion;"],"names":["player","constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","url","start","end","opts","showControls","customStart","node","videoId","exec","self","this","aspectratio","posterImage","editform","fetch","then","response","json","data","thumbnail_720_url","catch","ready","dmOptions","video","params","startTime","dailymotion","dailymotionEvents","async","state","getState","off","events","VIDEO_DURATIONCHANGE","videoIsPasswordRequired","videoDuration","on","ratio","totaltime","Number","toFixed","Math","min","duration","title","videoTitle","setSubtitles","tracks","videoSubtitlesList","length","map","track","locale","split","country","displayNames","Intl","DisplayNames","M","cfg","language","label","of","toUpperCase","code","captions","qualities","getQualities","playerEvents","VIDEO_SEEKEND","e","videoTime","VIDEO_END","ended","VIDEO_TIMECHANGE","seek","playerIsPlaying","paused","VIDEO_PLAY","VIDEO_PAUSE","PLAYER_ERROR","error","PLAYER_PLAYBACKSPEEDCHANGE","rate","playerPlaybackSpeed","VIDEO_QUALITYCHANGE","videoQuality","setMute","play","removeClass","setTimeout","pause","AD_START","addClass","AD_END","window","createPlayer","tag","document","createElement","passwordprotected","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onScriptLoaded","stop","starttime","time","playerIsReplayScreen","playerAspectRatio","destroy","setRate","setPlaybackSpeed","mute","unMute","originalPlayer","setQuality","states","videoQualitiesList","qualitiesLabel","currentQuality","setCaption"],"mappings":";;;;;;;SAwBIA,kKAKAC,mBACSC,KAAO,mBACPC,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,EACTC,UAAU,QAETC,mBAAoB,aAUlBC,IAAKC,MAAOC,SAAKC,4DAAO,SACzBC,aAAeD,KAAKC,eAAgB,EACpCC,YAAcF,KAAKE,cAAe,EAClCC,KAAOH,KAAKG,MAAQ,cACrBL,MAAQA,YAIPM,QAFM,8FACMC,KAAKR,KACD,QACjBO,QAAUA,YACXE,KAAOC,KACXD,KAAKE,YAAc,GAAK,EACxBF,KAAKG,YAAc,GACfT,KAAKU,UACLC,kDAA2CP,sCACtCQ,MAAKC,UAAYA,SAASC,SAC1BF,MAAKG,OACFT,KAAKG,YAAcM,KAAKC,qBAG3BC,OAAM,aAIXC,OAAQ,EACRC,UAAY,CACZC,MAAOhB,QACPiB,OAAQ,CACJC,UAAWxB,YAGfyB,kBACEC,kBAAoBC,MAAAA,eAChBC,YAActC,OAAOuC,cAC3BvC,OAAOwC,IAAIL,YAAYM,OAAOC,sBACzBJ,MAAMK,yBAAkD,GAAvBL,MAAMM,eAA8C,GAAvBN,MAAMM,0BACrE5C,OAAO6C,GAAGV,YAAYM,OAAOC,sBAAsB,WAC/CN,kBAAkBpC,WAI1BkB,KAAKE,kBAAoBF,KAAK4B,cACxBC,UAAYC,OAAOV,MAAMM,cAAcK,QAAQ,IAAM/B,KAAKf,UAChEQ,IAAOA,IAAkBuC,KAAKC,IAAIxC,IAAKoC,WAA1BA,UACbpC,IAAMqC,OAAOrC,IAAIsC,QAAQ,IACzB/B,KAAKP,IAAMA,IACXO,KAAK6B,UAAYA,UACjB7B,KAAKkC,SAAWlC,KAAKP,IAAMO,KAAKR,MAChCQ,KAAKmC,MAAQf,MAAMgB,WAInBtD,OAAOuD,aAAa,UAChBC,OAASlB,MAAMmB,mBACfD,QAAUA,OAAOE,OAAS,IAC1BF,OAASA,OAAOG,KAAIC,cACVC,OAASD,MAAME,MAAM,KAAK,GAC1BC,QAAUH,MAAME,MAAM,KAAK,GAC3BE,aAAe,IAAIC,KAAKC,aAAa,WAAIC,EAAEC,IAAIC,WAAa,CAACnE,KAAM,iBACrEoE,2BACW,QAAXP,QACAO,MAAQN,aAAaO,GAAGV,QAAU,UAElCS,+BAAQN,aAAaO,GAAGX,oDAAUA,MAAMY,oBAErC,CACHF,MAAAA,MACAG,KAAMb,UAGd1C,KAAKwD,SAAWlB,4CAIN,kBAAmB,CAC7BA,OAAQA,OAAQmB,UAAWzD,KAAK0D,uBAQ9BC,aAAe,KACjB7E,OAAO6C,GAAGV,YAAYM,OAAOqC,eAAe,SAASC,GAC5CjD,2CAGS,gBAAiBiD,EAAEC,cAGrChF,OAAO6C,GAAGV,YAAYM,OAAOwC,WAAW,WACpC/D,KAAKgE,OAAQ,sCACC,qBAGlBlF,OAAOwC,IAAIL,YAAYM,OAAO0C,kBAC9BnF,OAAO6C,GAAGV,YAAYM,OAAO0C,kBAAkB9C,eAAe0C,GACrDjD,QAGDiD,EAAEC,UAAYtE,OACdV,OAAOoF,KAAK1E,OAEZqE,EAAEC,UAAYrE,IAAMO,KAAKf,WACzBH,OAAOoF,KAAKzE,IAAM,GAElBO,KAAKgE,2CACS,kBACdhE,KAAKgE,OAAQ,KAEa,IAAtBH,EAAEM,sDACY,oBACdnE,KAAKgE,OAAQ,EACbhE,KAAKoE,QAAS,GAEdP,EAAEC,WAAarE,0CACD,kBACdO,KAAKgE,OAAQ,QAKzBlF,OAAO6C,GAAGV,YAAYM,OAAO8C,YAAYlD,eAAe0C,GAC/CjD,SAGDZ,KAAKgE,OAASH,EAAEC,WAAarE,OAC7BO,KAAKgE,OAAQ,EACblF,OAAOoF,KAAK1E,QAEhBQ,KAAKoE,QAAS,sCACA,wBAGlBtF,OAAO6C,GAAGV,YAAYM,OAAO+C,aAAanD,iBACjCP,QAGLZ,KAAKoE,QAAS,EACVtF,OAAOuC,WAAWyC,WAAarE,KAC/BO,KAAKgE,OAAQ,sCACC,uDAEA,uBAItBlF,OAAO6C,GAAGV,YAAYM,OAAOgD,cAAc,SAASV,uCAClC,iBAAkB,CAACW,MAAOX,OAG5C/E,OAAO6C,GAAGV,YAAYM,OAAOkD,4BAA4B,SAASZ,uCAChD,sBAAuB,CAACa,KAAMb,EAAEc,yBAGlD7F,OAAO6C,GAAGV,YAAYM,OAAOqD,qBAAqB,SAASf,uCACzC,yBAA0B,CAACzE,QAASyE,EAAEgB,mBAIxDjF,aACAd,OAAOgG,SAAQ,GACfhG,OAAOiG,OACPjG,OAAO6C,GAAGV,YAAYM,OAAO0C,kBAAkB,+BACzC,iBAAiBe,YAAY,kBAClB,GAATpE,OACA9B,OAAOgG,SAAQ,GAEnBG,YAAW9D,UACPrC,OAAOoG,QACPpG,OAAOoF,KAAK1E,OACZV,OAAOgG,SAAQ,GACVlE,QACD+C,eACA/C,OAAQ,sCACM,qBAEnB,UAGP+C,eACA/C,OAAQ,sCACM,mBAIlB9B,OAAO6C,GAAGV,YAAYM,OAAO4D,UAAU,+BACjC,8BAA8BC,SAAS,8BACvC,iBAAiBA,SAAS,8BAC1B,sBAAsBJ,YAAY,aAGxClG,OAAO6C,GAAGV,YAAYM,OAAO8D,QAAQ,+BAC/B,8BAA8BL,YAAY,8BAC1C,iBAAiBA,YAAY,iBAIlCM,OAAOrE,YAyBRnC,aAAewG,OAAOrE,YAAYsE,aAAa1F,KAAMgB,WACrDK,kBAAkBpC,QAClBmC,YAAcqE,OAAOrE,gBA3BA,KAIjBuE,IAAMC,SAASC,cAAc,UAC7B/F,cAAgBD,KAAKiG,kBAIrBH,IAAII,IAAM,mDAGVJ,IAAII,IAAM,uDAEVC,eAAiBJ,SAASK,qBAAqB,UAAU,GAC7DD,eAAeE,WAAWC,aAAaR,IAAKK,gBAE5CP,OAAOrE,YAAc,CACjBgF,eAAgB9E,UACZF,YAAcqE,OAAOrE,YACrBnC,aAAemC,YAAYsE,aAAa1F,KAAMgB,WAC9CK,kBAAkBpC,WAYlCiG,OACIjG,OAAOiG,YACFX,QAAS,uBAQVnE,KAAKmE,eAGHtF,OAAOoG,aACRd,QAAS,GACP,GAOX8B,KAAKC,WACDrH,OAAOoF,KAAKiC,WACZrH,OAAOoG,mBAQAkB,YACDtH,OAAOoF,KAAKkC,WACbpC,OAAQ,sCACC,gBAAiB,CAACoC,KAAMA,2CAQlBtH,OAAOuC,YACdyC,2CAQOhF,OAAOuC,YACdK,kCAUTzB,KAAKmE,cACE,gBAEStF,OAAOuC,YACb8C,qCAQVlE,KAAKmE,cACE,eAEStF,OAAOuC,YACd8C,mCASTlE,KAAK+D,aACE,eAESlF,OAAOuC,YACdgF,yCAWPzE,aADc9C,OAAOuC,YACPiF,kBAAkB1D,MAAM,YACrChB,MAAM,GAAKA,MAAM,GAQ5B2E,UACIzH,OAAOyH,wCAQazH,OAAOuC,WAQ/BmF,QAAQ9B,MACJ5F,OAAO2H,iBAAiB/B,MAO5BgC,OACI5H,OAAOgG,SAAQ,GAKnB6B,SACI7H,OAAOgG,SAAQ,GAOnB8B,wBACW9H,OAOX+H,WAAWzH,SACPN,OAAO+H,WAAWzH,kCAWd0H,aAAe7G,KAAKoB,iBACjB,CACHoC,UAAW,CAAC,aAAcqD,OAAOC,oBACjCC,eAAgB,CAAC,UAAWF,OAAOC,oBACnCE,eAAuC,QAAvBH,OAAOjC,aAAyB,UAAYiC,OAAOjC,cAQ3EqC,WAAWxE,OACP5D,OAAOuD,aAAaK"}