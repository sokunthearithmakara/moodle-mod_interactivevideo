{"version":3,"file":"spotify.min.js","sources":["../../src/player/spotify.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Spotify Player class\n *\n * @module     mod_interactivevideo/player/spotify\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nclass Spotify {\n    constructor() {\n        this.type = 'spotify';\n        this.frequency = 1.2; // Spotify emits playback_update very very slowly (0.5 - 1 s).\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n        this.useAnimationFrame = false;\n        // Remove the mute button since Spotify does not support mute.\n        $('#controller #mute').remove();\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        let regex = /(?:https?:\\/\\/)?(?:open\\.spotify\\.com)\\/(episode|track)\\/([^/]+)/;\n        let match = regex.exec(url);\n        let videoId = match[2];\n        let type = match[1];\n        videoId = videoId.split(\"?\")[0];\n        this.videoId = videoId;\n        let self = this;\n\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://open.spotify.com/oembed?url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n\n        const data = await getData();\n        try {\n            var json = JSON.parse(data);\n            self.title = json.title;\n            self.posterImage = json.thumbnail_url;\n        } catch (e) {\n            self.title = '';\n            self.posterImage = '';\n        }\n\n        return new Promise((resolve) => {\n            const callback = (EmbedController) => {\n                window.EmbedController = EmbedController;\n                EmbedController.on('ready', () => {\n                    $('#video-wrapper iframe').attr('id', node);\n                    EmbedController.seek(self.start);\n                    EmbedController.play();\n                });\n                let resolved = false;\n                EmbedController.addListener('playback_update', async e => {\n                    self.currentTime = e.data.position / 1000;\n                    if (e.data.duration === 0) {\n                        return;\n                    }\n                    if (resolved) {\n                        return;\n                    }\n                    EmbedController.pause();\n                    resolved = true;\n                    resolve({\n                        duration: e.data.duration / 1000,\n                        title: self.title,\n                        posterImage: self.posterImage,\n                    });\n                });\n            };\n\n            // Load the IFrame Player API code asynchronously.\n            const element = document.getElementById(node);\n            const options = {\n                uri: 'spotify:' + type + ':' + videoId,\n            };\n            if (!window.EmbedController) {\n                var tag = document.createElement('script');\n                tag.src = \"https://open.spotify.com/embed/iframe-api/v1\";\n                tag.async = true;\n                tag.type = 'text/javascript';\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                // Replace the 'player' element with an <iframe> and Spotify player\n                window.onSpotifyIframeApiReady = (IFrameAPI) => {\n                    IFrameAPI = window.IFrameAPI || IFrameAPI;\n                    window.IFrameAPI = IFrameAPI;\n                    IFrameAPI.createController(element, options, callback);\n                };\n            } else {\n                window.IFrameAPI.createController(element, options, callback);\n            }\n        });\n    }\n\n    /**\n     * Creates an instance of the Spotify player.\n     *\n     * @param {string} url - The URL of the Spotify video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://developer.spotify.com/documentation/embeds/references/iframe-api\n        // e.g https://open.spotify.com/episode/7makk4oTQel546B0PZlDM5?si=8b1b1b1b1b1b1b1b\n        let regex = /(?:https?:\\/\\/)?(?:open\\.spotify\\.com)\\/(episode|track)\\/([^/]+)/;\n        let match = regex.exec(url);\n        let videoId = match[2];\n        let type = match[1];\n        videoId = videoId.split(\"?\")[0];\n        this.videoId = videoId;\n        let self = this;\n        $('.video-block, #start-screen').remove();\n        $('#annotation-canvas').removeClass('d-none w-0');\n\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://open.spotify.com/oembed?url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n\n        if (opts.editform) {\n            const data = await getData();\n            try {\n                var json = JSON.parse(data);\n                self.title = json.title;\n                self.posterImage = json.thumbnail_url;\n            } catch (e) {\n                self.title = '';\n                self.posterImage = '';\n            }\n        }\n\n        self.aspectratio = 16 / 9;\n        let ready = false;\n        self.ended = false;\n        const callback = (EmbedController) => {\n            window.EmbedController = EmbedController;\n            EmbedController.on('ready', () => {\n                $('#video-wrapper iframe').attr('id', node);\n                EmbedController.seek(self.start);\n                EmbedController.play();\n            });\n            EmbedController.addListener('playback_update', async e => {\n                self.currentTime = e.data.position / 1000;\n                if (!ready) {\n                    let totaltime = e.data.duration / 1000;\n                    totaltime = Number(totaltime.toFixed(2));\n\n                    if (totaltime === 0) {\n                        return;\n                    }\n\n                    if (totaltime < 40 && end > 40) { // Spotify shows the preview version of the audio if it cannot detect login.\n                        // We don't want to play the preview version.\n                        EmbedController.pause();\n                        EmbedController.destroy();\n                        dispatchEvent('iv:playerError', {message: 'The video is too short.'});\n                        return;\n                    }\n\n                    if (e.data.position / 1000 < self.start) {\n                        EmbedController.seek(self.start);\n                        EmbedController.pause();\n                        return;\n                    }\n                    EmbedController.resume();\n                    totaltime = totaltime - self.frequency;\n                    end = !end ? totaltime : Math.min(end, totaltime);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.totaltime = totaltime;\n                    self.duration = self.end - self.start;\n                    ready = true;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                } else {\n\n                    if (self.ended && e.data.isPaused === false) {\n                        self.ended = false;\n                        EmbedController.restart();\n                        return;\n                    }\n                    if (self.currentTime < self.start) {\n                        EmbedController.pause();\n                        setTimeout(() => {\n                            EmbedController.seek(self.start + self.frequency);\n                            EmbedController.resume();\n                        }, self.frequency);\n                        return;\n                    }\n                    let isPaused = e.data.isPaused;\n                    switch (isPaused) {\n                        case true:\n                            self.paused = true;\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case false:\n                            if (self.paused) {\n                                dispatchEvent('iv:playerPlay');\n                            }\n                            self.paused = false;\n                            dispatchEvent('iv:playerPlaying');\n                            if (self.currentTime >= self.end - self.frequency) {\n                                self.ended = true;\n                                dispatchEvent('iv:playerEnded');\n                            }\n                            break;\n                    }\n                }\n            });\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        const element = document.getElementById(node);\n        const options = {\n            uri: 'spotify:' + type + ':' + videoId,\n            startAt: self.start,\n        };\n        if (!window.EmbedController) {\n            var tag = document.createElement('script');\n            tag.src = \"https://open.spotify.com/embed/iframe-api/v1\";\n            tag.async = true;\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and Spotify player\n            window.onSpotifyIframeApiReady = (IFrameAPI) => {\n                IFrameAPI = window.IFrameAPI || IFrameAPI;\n                window.IFrameAPI = IFrameAPI;\n                IFrameAPI.createController(element, options, callback);\n            };\n        } else {\n            window.IFrameAPI.createController(element, options, callback);\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        window.EmbedController.resume();\n        dispatchEvent('iv:playerPlay');\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        window.EmbedController.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        window.EmbedController.seek(starttime);\n        window.EmbedController.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    seek(time) {\n        this.ended = false;\n        return new Promise((resolve) => {\n            window.EmbedController.seek(time);\n            this.currentTime = time;\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        return this.ended || this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        window.EmbedController.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     */\n    setRate() {\n        return false;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        // Spotify does not support mute\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        // Spotify does not support mute\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return window.EmbedController;\n    }\n\n    /**\n     * Set subtitle\n     */\n    setCaption() {\n        // Spotify does not support captions\n    }\n}\n\nexport default Spotify;"],"names":["constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","remove","url","node","match","exec","videoId","split","self","this","data","$","ajax","M","cfg","wwwroot","dataType","action","contextid","encodeURIComponent","sesskey","json","JSON","parse","title","posterImage","thumbnail_url","e","Promise","resolve","callback","EmbedController","window","on","attr","seek","start","play","resolved","addListener","async","currentTime","position","duration","pause","element","document","getElementById","options","uri","IFrameAPI","createController","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onSpotifyIframeApiReady","end","opts","allowAutoplay","removeClass","editform","aspectratio","ready","ended","isPaused","restart","setTimeout","resume","paused","totaltime","Number","toFixed","destroy","message","Math","min","startAt","stop","starttime","time","getCurrentTime","getDuration","isPlaying","isEnded","ratio","getState","setRate","mute","unMute","originalPlayer","setCaption"],"mappings":"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"}