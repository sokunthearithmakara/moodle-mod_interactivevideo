{"version":3,"file":"spotify.min.js","sources":["../../src/player/spotify.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Spotify Player class\n *\n * @module     mod_interactivevideo/player/spotify\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nclass Spotify {\n    constructor() {\n        this.type = 'spotify';\n        this.frequency = 0.5; // Spotify emits playback_update very very slowly (0.5 - 1 s).\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n        this.useAnimationFrame = false;\n        // Remove the mute button since Spotify does not support mute.\n        $('#controller #mute').remove();\n    }\n    /**\n     * Creates an instance of the Spotify player.\n     *\n     * @param {string} url - The URL of the Spotify video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const node = opts.node || 'player';\n        this.node = node;\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://developer.spotify.com/documentation/embeds/references/iframe-api\n        // e.g https://open.spotify.com/episode/7makk4oTQel546B0PZlDM5?si=8b1b1b1b1b1b1b1b\n        let regex = /(?:https?:\\/\\/)?(?:open\\.spotify\\.com)\\/(episode|track)\\/([^/]+)/;\n        let match = regex.exec(url);\n        let videoId = match[2];\n        let type = match[1];\n        videoId = videoId.split(\"?\")[0];\n        this.videoId = videoId;\n        let self = this;\n        $('.video-block, #start-screen').remove();\n        $('#annotation-canvas').removeClass('d-none');\n\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://open.spotify.com/oembed?url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n        const data = await getData();\n        let json = JSON.parse(data);\n        self.title = json.title;\n        self.posterImage = json.thumbnail_url;\n        self.aspectratio = 16 / 9;\n        let ready = false;\n\n        const callback = (EmbedController) => {\n            window.EmbedController = EmbedController;\n            EmbedController.on('ready', () => {\n                $('#video-wrapper iframe').attr('id', node);\n                EmbedController.seek(self.start);\n                EmbedController.play();\n            });\n            EmbedController.addListener('playback_update', async e => {\n                self.currentTime = e.data.position / 1000;\n                if (!ready) {\n                    let totaltime = e.data.duration / 1000;\n                    totaltime = Number(totaltime.toFixed(2));\n                    if (totaltime === 0) {\n                        return;\n                    }\n                    if (e.data.position / 1000 < self.start) {\n                        EmbedController.seek(self.start);\n                        EmbedController.pause();\n                        return;\n                    }\n                    EmbedController.resume();\n                    totaltime = totaltime - self.frequency;\n                    end = !end ? totaltime : Math.min(end, totaltime);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.totaltime = totaltime;\n                    self.duration = self.end - self.start;\n                    ready = true;\n                    dispatchEvent('iv:playerReady');\n                } else {\n                    let isPaused = e.data.isPaused;\n                    switch (isPaused) {\n                        case true:\n                            self.paused = true;\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case false:\n                            self.paused = false;\n                            if ((self.ended && self.currentTime > self.end) || self.currentTime <= self.start) {\n                                self.ended = false;\n                                EmbedController.seek(self.start);\n                                EmbedController.resume();\n                                return;\n                            }\n                            dispatchEvent('iv:playerPlaying');\n                            if (!self.ended && self.currentTime >= self.end - self.frequency) {\n                                self.ended = true;\n                                dispatchEvent('iv:playerEnded');\n                            }\n                            break;\n                    }\n                }\n            });\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        const element = document.getElementById(node);\n        const options = {\n            uri: 'spotify:' + type + ':' + videoId,\n            startAt: self.start,\n        };\n        if (!window.EmbedController) {\n            var tag = document.createElement('script');\n            tag.src = \"https://open.spotify.com/embed/iframe-api/v1\";\n            tag.async = true;\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and Spotify player\n            window.onSpotifyIframeApiReady = (IFrameAPI) => {\n                IFrameAPI = window.IFrameAPI || IFrameAPI;\n                window.IFrameAPI = IFrameAPI;\n                IFrameAPI.createController(element, options, callback);\n            };\n        } else {\n            window.IFrameAPI.createController(element, options, callback);\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        window.EmbedController.resume();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        window.EmbedController.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        window.EmbedController.seek(starttime);\n        window.EmbedController.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    seek(time) {\n        time = Math.min(time, this.end);\n        time = Math.max(time, this.start);\n        this.ended = false;\n        return new Promise((resolve) => {\n            window.EmbedController.seek(time);\n            this.currentTime = time;\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        return this.ended || this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        window.EmbedController.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     */\n    setRate() {\n        return false;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        // Spotify does not support mute\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        // Spotify does not support mute\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return window.EmbedController;\n    }\n\n    /**\n     * Set subtitle\n     */\n    setCaption() {\n        // Spotify does not support captions\n    }\n}\n\nexport default Spotify;"],"names":["constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","remove","url","start","end","node","match","exec","videoId","split","self","this","removeClass","data","$","ajax","M","cfg","wwwroot","dataType","action","contextid","encodeURIComponent","sesskey","json","JSON","parse","title","posterImage","thumbnail_url","aspectratio","ready","callback","EmbedController","window","on","attr","seek","play","addListener","async","currentTime","e","position","isPaused","paused","ended","resume","totaltime","duration","Number","toFixed","pause","Math","min","element","document","getElementById","options","uri","startAt","IFrameAPI","createController","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onSpotifyIframeApiReady","stop","starttime","time","max","Promise","resolve","getCurrentTime","getDuration","isPlaying","isEnded","ratio","destroy","getState","setRate","mute","unMute","originalPlayer","setCaption"],"mappings":"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"}