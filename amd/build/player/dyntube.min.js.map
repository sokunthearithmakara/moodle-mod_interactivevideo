{"version":3,"file":"dyntube.min.js","sources":["../../src/player/dyntube.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Dyntube Player class\n *\n * @module     mod_interactivevideo/player/dyntube\n * @copyright  2025 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\nclass Dyntube {\n    /**\n     * Creates an instance of the Dyntube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.type = 'dyntube';\n        this.frequency = 0.25;\n        this.useAnimationFrame = false;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n        this.live = false; // Added flag for live video support\n    }\n    /**\n     * Get information about the video\n     * @param {string} url\n     * @param {string} node\n     * @return {Promise<Object>}\n     */\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n        // URL: https://videos.dyntube.com/videos/rbUeUuHky0qQhOIbsPNrzQ\n        // URL: https://videos.dyntube.com/iframes/rbUeUuHky0qQhOIbsPNrzQ\n        let regex = /(?:https?:\\/\\/)?(?:videos\\.dyntube\\.com|dyntube\\.com)\\/(?:videos|iframes)\\/([^/]+)/;\n        var match = regex.exec(url);\n        var videoId = match ? match[1] : null;\n        this.videoId = videoId;\n\n        url = `https://videos.dyntube.com/videos/${videoId}`;\n        // Get oembed data.\n        let oembedUrl = `https://videos.dyntube.com/oembed/oembed.json?url=${encodeURIComponent(url)}`;\n\n        const getData = async() => {\n            try {\n                const data = await $.ajax({\n                    url: oembedUrl,\n                    type: 'GET',\n                    dataType: 'json',\n                });\n                return data;\n            } catch {\n                return {error: true};\n            }\n        };\n\n        let data = await getData();\n        if (data.error) {\n            dispatchEvent('iv:playerError', {error: data});\n            return;\n        }\n\n        self.title = data.title;\n        self.posterImage = data.thumbnail_url;\n        self.aspectratio = data.width / data.height;\n        self.duration = data.duration; // Duration in seconds.\n        let $iframe = $(data.html);\n        self.iframesrc = $iframe.attr('src');\n        // Load the Dyntube API script.\n        var tag = document.createElement('script');\n        tag.src = \"https://embed.dyntube.com/player/v1/player-1.0.3.js\";\n        tag.async = true;\n        tag.as = \"script\";\n        tag.rel = \"preload\";\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n        if ($(`#${node}`).length > 0) {\n            $(`#${node}`).replaceWith(`\n            <iframe id=\"${node}\" allow=\"autoplay; fullscreen\" frameborder=\"0\"\n             webkitallowfullscreen mozallowfullscreen allowfullscreen\n              src=\"${self.iframesrc}\"></iframe>`);\n        }\n\n        /**\n         * Waits for the Dyntube API to be available before initializing the player.\n         * @param {Function} resolve - The function to call when Dyntube is ready.\n         */\n        function waitForDyntube(resolve) {\n            if (window.dyntube && window.dyntube.Player) {\n                player[node] = new window.dyntube.Player(\n                    document.querySelector(`#${node}`),\n                );\n                resolve();\n            } else {\n                window.requestAnimationFrame(() => waitForDyntube(resolve));\n            }\n        }\n\n        await new Promise(waitForDyntube);\n\n        // eslint-disable-next-line consistent-return\n        return new Promise((resolve) => {\n            player[node].on(\"ready\", function() {\n                resolve({\n                    title: self.title,\n                    duration: self.duration,\n                    posterImage: self.posterImage,\n                });\n            });\n        });\n    }\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n\n        // Hide the player first.\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: !showControls,\n            });\n        }\n\n        var self = this;\n\n        this.start = start;\n        this.end = end;\n\n        // URL: https://videos.dyntube.com/videos/rbUeUuHky0qQhOIbsPNrzQ\n        // URL: https://videos.dyntube.com/iframes/rbUeUuHky0qQhOIbsPNrzQ\n        let regex = /(?:https?:\\/\\/)?(?:videos\\.dyntube\\.com|dyntube\\.com)\\/(?:videos|iframes)\\/([^/]+)/;\n        var match = regex.exec(url);\n        var videoId = match ? match[1] : null;\n        this.videoId = videoId;\n\n        url = `https://videos.dyntube.com/videos/${videoId}`;\n        // Get oembed data.\n        let oembedUrl = `https://videos.dyntube.com/oembed/oembed.json?url=${encodeURIComponent(url)}`;\n\n        const getData = async() => {\n            try {\n                const data = await $.ajax({\n                    url: oembedUrl,\n                    type: 'GET',\n                    dataType: 'json',\n                });\n                return data;\n            } catch {\n                return {error: true};\n            }\n        };\n\n        let data = await getData();\n        if (data.error) {\n            dispatchEvent('iv:playerError', {error: data});\n            return;\n        }\n\n        self.title = data.title;\n        self.posterImage = data.thumbnail_url;\n        self.aspectratio = data.width / data.height;\n        self.duration = data.duration; // Duration in seconds.\n        let $iframe = $(data.html);\n        self.iframesrc = $iframe.attr('src');\n\n        // Load the Dyntube API script.\n        var tag = document.createElement('script');\n        tag.src = \"https://embed.dyntube.com/player/v1/player-1.0.3.js\";\n        tag.async = true;\n        tag.as = \"script\";\n        tag.rel = \"preload\";\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n        $(`#${node}`).replaceWith(`\n            <iframe id=\"${node}\" allow=\"autoplay; fullscreen\" frameborder=\"0\"\n             webkitallowfullscreen mozallowfullscreen allowfullscreen\n              src=\"${self.iframesrc}?${showControls ? \"\" : \"controls=hidden\"}&start=${start}&end=${end}\"></iframe>`);\n\n        /**\n         * Waits for the Dyntube API to be available before initializing the player.\n         * @param {Function} resolve - The function to call when Dyntube is ready.\n         */\n        function waitForDyntube(resolve) {\n            if (window.dyntube && window.dyntube.Player) {\n                player[node] = new window.dyntube.Player(\n                    document.querySelector(`#${node}`),\n                );\n                resolve();\n            } else {\n                window.requestAnimationFrame(() => waitForDyntube(resolve));\n            }\n        }\n\n        await new Promise(waitForDyntube);\n\n        player[node].on(\"ready\", function() {\n            player[node].play(); // We need to play the video to get the duration.\n            self.currentTime = start || 0;\n            self.paused = true;\n            self.ended = false;\n            self.volume = 1;\n            end = end || self.duration;\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = self.duration;\n            self.duration = self.end - self.start;\n\n            dispatchEvent('iv:playerReady', null, document.getElementById(node));\n\n            player[node].on(\"play\", function() {\n                self.paused = false;\n                dispatchEvent('iv:playerPlay');\n            });\n\n            player[node].on(\"pause\", function() {\n                self.paused = true;\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player[node].on(\"volumechange\", function(volumeLevel) {\n                dispatchEvent('iv:playerVolumeChange', {volume: volumeLevel});\n            });\n\n            player[node].on(\"timeupdate\", function(currentTime) {\n                if (currentTime >= self.end) {\n                    self.ended = true;\n                    self.paused = true;\n                    player[self.node].pause();\n                    dispatchEvent('iv:playerEnded');\n                    return;\n                }\n                if (currentTime < self.start) {\n                    currentTime = Math.ceil(self.start);\n                    self.seek(currentTime);\n                }\n                dispatchEvent('iv:playerPlaying');\n                self.currentTime = currentTime;\n            });\n\n            player[node].on(\"ended\", function() {\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n        });\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pause();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        this.currentTime = starttime || this.start;\n        player[this.node].pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (time < this.start) {\n            time = this.start;\n        }\n        if (time > this.end) {\n            time = this.end;\n        }\n        dispatchEvent('iv:playerSeekStart', {time: this.currentTime});\n        this.ended = false;\n        player[this.node].seek(Number(time));\n        this.currentTime = time;\n        dispatchEvent('iv:playerSeek', {time});\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.currentTime || this.start;\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.duration;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.ended;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node] = null;\n        $(`#${this.node}`).remove();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.paused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return 1;\n        }\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].mute();\n        this.volume = 0;\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].unmute();\n        player[this.node].setVolume(1.0);\n        this.volume = 1;\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.volume === 0;\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        return track;\n    }\n}\n\nexport default Dyntube;"],"names":["player","constructor","type","frequency","useAnimationFrame","support","playbackrate","quality","password","live","url","node","self","this","match","exec","videoId","oembedUrl","encodeURIComponent","data","async","$","ajax","dataType","error","getData","title","posterImage","thumbnail_url","aspectratio","width","height","duration","$iframe","html","iframesrc","attr","tag","document","createElement","src","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","length","replaceWith","Promise","waitForDyntube","resolve","window","dyntube","Player","querySelector","requestAnimationFrame","on","start","end","opts","showControls","allowAutoplay","getElementById","requireVideoBlock","play","currentTime","paused","ended","volume","Number","toFixed","totaltime","volumeLevel","pause","Math","ceil","seek","stop","starttime","time","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","ratio","destroy","remove","getState","setRate","rate","mute","unMute","unmute","setVolume","isMuted","originalPlayer","setCaption","track"],"mappings":"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"}