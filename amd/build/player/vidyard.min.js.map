{"version":3,"file":"vidyard.min.js","sources":["../../src/player/vidyard.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vidyard Player class\n *\n * @module     mod_interactivevideo/player/vidyard\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player = {};\nclass Vidyard {\n    /**\n     * Constructor of the Vidyard player.\n     */\n    constructor() {\n        this.useAnimationFrame = false;\n        this.type = 'vidyard';\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n        // URL: https://share.vidyard.com/watch/6xY4kDZfFJw8nmfHitJzdJ\n        let regex = /(?:https?:\\/\\/)?(?:share\\.vidyard\\.com)\\/watch\\/([a-zA-Z0-9]+)/i;\n        var match = regex.exec(url);\n        var videoId = match ? match[1] : null;\n        this.videoId = videoId;\n\n        // Load the Dyntube API script.\n        var tag = document.createElement('script');\n        tag.src = \"https://play.vidyard.com/embed/v4.js\";\n        tag.async = true;\n        tag.as = \"script\";\n        tag.rel = \"preload\";\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n        $(`#${node}`).attr({\n            'data-uuid': videoId,\n            'data-v': '4',\n            'data-type': 'inline',\n            'data-autoplay': '0',\n            'data-viral_sharing': '0',\n            'data-embed_button': '0',\n            'data-hide_playlist': '1',\n            'data-name_overlay': '0',\n        }).addClass('vidyard-player-embed');\n\n        return new Promise((resolve) => {\n            window.onVidyardAPI = (vidyardEmbed) => {\n                vidyardEmbed.api.addReadyListener((_, pl) => {\n                    player[node] = pl;\n                    // Put your code here.\n                    $(pl.container).attr('id', node); // Container id got removed by vidyard. We need to set it again.\n                    $(pl.container).parent().removeClass('audio'); // For some reason, vidyard adds audio class to the container.\n                    let targetvideo = pl.metadata.chapters_attributes[0].video_attributes;\n                    self.targetvideo = targetvideo;\n                    self.title = targetvideo.name;\n                    self.posterImage = targetvideo.thumbnail_urls.normal;\n                    resolve({\n                        duration: targetvideo.length_in_seconds,\n                        title: self.title,\n                        posterImage: self.posterImage,\n                    });\n                });\n            };\n        });\n    }\n\n    /**\n     * Creates an instance of the Vidyard player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the Vidyard video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        let showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n        }\n\n        let self = this;\n        let ready = false;\n\n        // URL: https://share.vidyard.com/watch/6xY4kDZfFJw8nmfHitJzdJ\n        let regex = /(?:https?:\\/\\/)?(?:share\\.vidyard\\.com)\\/watch\\/([a-zA-Z0-9]+)/i;\n        var match = regex.exec(url);\n        var videoId = match ? match[1] : null;\n        this.videoId = videoId;\n\n        // Load the Dyntube API script.\n        var tag = document.createElement('script');\n        tag.src = \"https://play.vidyard.com/embed/v4.js\";\n        tag.async = true;\n        tag.as = \"script\";\n        tag.rel = \"preload\";\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n        $(`#${node}`).attr({\n            'data-uuid': videoId,\n            'data-v': '4',\n            'data-type': 'inline',\n            'data-autoplay': '0',\n            'data-second': start || 0,\n            'data-hidden_controls': showControls ? '0' : '1',\n            'data-viral_sharing': '0',\n            'data-embed_button': '0',\n            'data-hide_playlist': '1',\n            'data-name_overlay': '0',\n        }).addClass('vidyard-player-embed');\n\n        window.onVidyardAPI = (vidyardEmbed) => {\n            vidyardEmbed.api.addReadyListener((_, pl) => {\n                player[node] = pl;\n                // Put your code here.\n                $(pl.container).attr('id', node); // Container id got removed by vidyard. We need to set it again.\n                $(pl.container).parent().removeClass('audio'); // For some reason, vidyard adds audio class to the container.\n                let targetvideo = pl.metadata.chapters_attributes[0].video_attributes; // Make sure we're playing the first video.\n                self.targetvideo = targetvideo;\n                self.title = targetvideo.name;\n                self.start = start || 0;\n                let totaltime = Number(targetvideo.length_in_seconds.toFixed(2)) - self.frequency;\n                end = !end ? totaltime : Math.min(end, totaltime);\n                end = Number(end.toFixed(2));\n                self.end = end;\n                self.totaltime = Number(totaltime.toFixed(2));\n                self.duration = self.end - self.start;\n                self.posterImage = targetvideo.thumbnail_urls.normal;\n\n                player[node].disableCaption();\n                let tracks = [];\n                if (targetvideo.captions.length > 0) {\n                    targetvideo.captions.forEach((track) => {\n                        tracks.push({\n                            label: track.name,\n                            code: track.language\n                        });\n                    });\n                    dispatchEvent('iv:playerLoaded', {'tracks': tracks, 'reloaded': reloaded});\n                }\n                player[node].on('ready', function() {\n                    let $div = $(pl.container).find('.vidyard-div-' + videoId + '[role=\"region\"]');\n                    self.aspectratio = $div[0].style['padding-bottom'].replace('%', '') / 100;\n                    self.aspectratio = 1 / self.aspectratio;\n\n                    ready = true;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n\n                    setTimeout(() => {\n                        $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                    }, 1000);\n                });\n\n                player[node].on('play', function() {\n                    self.paused = false;\n                    dispatchEvent('iv:playerPlay');\n                });\n\n                player[node].on('pause', function() {\n                    self.paused = true;\n                    dispatchEvent('iv:playerPaused');\n                });\n\n                player[node].on('videoComplete', async function() {\n                    self.ended = true;\n                    if (pl.metadata.chapters_attributes.length > 1) {\n                        player[node].playVideoAtIndex(0);\n                        player[node].pause();\n                    }\n                    player[node].seek(self.start);\n                    dispatchEvent('iv:playerEnded');\n                });\n\n                player[node].on('timeupdate', function(e) {\n                    if (!ready) {\n                        return;\n                    }\n                    if (e > self.end) {\n                        self.ended = true;\n                        self.paused = true;\n                        player[node].seek(self.start);\n                        player[node].pause();\n                        dispatchEvent('iv:playerEnded');\n                        return;\n                    }\n                    if (e < self.start) {\n                        player[node].seek(self.start);\n                    }\n                    self.paused = false;\n                    self.ended = false;\n                    dispatchEvent('iv:playerPlaying');\n                });\n\n                player[node].on('volumechange', function(e) {\n                    dispatchEvent('iv:playerVolumeChange', {volume: e.volume});\n                });\n            }, videoId);\n        };\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pause();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seek(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        let currentTime = player[this.node].currentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        this.ended = false;\n        return new Promise((resolve) => {\n            player[this.node].seek(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].currentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return this.targetvideo.length_in_seconds;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return this.paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return !this.paused;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.ended;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove();\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n\n        return this.paused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return rate;\n        }\n        player[this.node].setPlaybackSpeed(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(0);\n        this.muted = true;\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(1);\n        this.muted = false;\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.muted;\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return;\n        }\n        if (!track || track === '') {\n            player[this.node].disableCaption();\n            return;\n        }\n        player[this.node].enableCaption(track);\n    }\n}\n\nexport default Vidyard;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","url","node","self","this","match","exec","videoId","tag","document","createElement","src","async","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","attr","addClass","Promise","resolve","window","onVidyardAPI","vidyardEmbed","api","addReadyListener","_","pl","container","parent","removeClass","targetvideo","metadata","chapters_attributes","video_attributes","title","name","posterImage","thumbnail_urls","normal","duration","length_in_seconds","start","end","opts","reloaded","showControls","allowAutoplay","getElementById","requireVideoBlock","ready","totaltime","Number","toFixed","Math","min","disableCaption","tracks","captions","length","forEach","track","push","label","code","language","on","$div","find","aspectratio","style","replace","setTimeout","paused","ended","playVideoAtIndex","pause","seek","e","volume","play","stop","starttime","time","currentTime","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","ratio","destroy","remove","getState","setRate","rate","setPlaybackSpeed","mute","setVolume","muted","unMute","isMuted","originalPlayer","setCaption","enableCaption"],"mappings":"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"}