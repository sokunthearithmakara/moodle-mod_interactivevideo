{"version":3,"file":"html5video.min.js","sources":["../../src/player/html5video.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * HTML5 Video Player class\n * Documentation for DASH.js: https://reference.dashif.org/dash.js/v4.4.0/samples/index.html\n * Documentation for HLS.js: https://github.com/video-dev/hls.js\n * @module     mod_interactivevideo/player/html5video\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nclass Html5Video {\n    /**\n     * Constructor for the HTML5 video player.\n     */\n    constructor() {\n        this.type = \"html5video\";\n        this.frequency = 0.4;\n        this.useAnimationFrame = false;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n    }\n    /**\n     * Loads an instance of an HTML5 video player.\n     *\n     * @param {string} url - The URL of the video to be played.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} [end] - The end time of the video in seconds. If not provided, defaults to the video's duration.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        const autoplay = opts.autoplay || false;\n        this.start = start;\n        this.end = end;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true\n            });\n        }\n        var player = document.getElementById(node);\n        this.posterImage = player.poster;\n        // Check if the url is for video or audio.\n        const video = ['fmp4', 'm4v', 'mov', 'mp4', 'ogv', 'webm', 'mkv', 'avi', 'flv', 'wmv', 'm3u8', 'mpd'];\n        const ext = url.split('.').pop();\n        if (video.indexOf(ext) === -1) {\n            // Change the player to an audio player.\n            this.audio = true;\n            // Append a canvas element to the video.\n            const canvas = '<canvas id=\"visualizer\"></canvas>';\n            player.insertAdjacentHTML('afterend', canvas);\n            player.style.visibility = 'hidden';\n        }\n        // Determine video type based on file extension.\n        if (url.indexOf('.m3u8') !== -1) {\n            let Hls = await import('mod_interactivevideo/player/hls');\n            window.Hls = Hls; // Make Hls globally available.\n            // Handle HLS stream.\n            if (typeof Hls !== 'undefined' && Hls.isSupported()) {\n                var hls = new Hls();\n                this.hls = hls;\n                hls.loadSource(url);\n                // Bind them together.\n                hls.attachMedia(player);\n                this.support.quality = true;\n\n                hls.on(Hls.Events.MANIFEST_PARSED, function(event, data) {\n                    this.hlsdata = data;\n                });\n\n                // Handle quality change.\n                hls.on(Hls.Events.LEVEL_SWITCHED, function(event, data) {\n                    dispatchEvent('iv:playerQualityChange', {quality: data.level});\n                });\n\n                hls.on(Hls.Events.ERROR, function(event, data) {\n                    if (data.fatal) {\n                        dispatchEvent('iv:playerError', {error: data});\n                    }\n                });\n            } else if (player.canPlayType('application/vnd.apple.mpegurl')) {\n                // Some browsers (like Safari) support HLS natively.\n                player.src = url;\n                this.support.quality = false;\n            } else {\n                window.console.error('HLS is not supported in this browser.');\n                this.support.quality = false;\n            }\n        } else if (url.indexOf('.mpd') !== -1) {\n            // Handle DASH stream using dash.js.\n            let dashjs = await import('mod_interactivevideo/player/dash');\n            if (typeof dashjs !== 'undefined') {\n                var dashPlayer = dashjs.MediaPlayer().create();\n                dashPlayer.initialize(player, url, false);\n                this.dash = dashPlayer;\n                dashPlayer.on(dashjs.MediaPlayer.events.REPRESENTATION_SWITCH, function() {\n                    const current = dashPlayer.getCurrentRepresentationForType('video');\n                    if (!current) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerQualityChange', {quality: current.absoluteIndex});\n                });\n                dashPlayer.on(dashjs.MediaPlayer.events.ERROR, function() {\n                    dispatchEvent('iv:playerError');\n                });\n                this.support.quality = true;\n            } else {\n                window.console.error('Dash.js library is not loaded.');\n                this.support.quality = false;\n            }\n        } else {\n            // Standard video source.\n            player.src = url;\n            this.support.quality = false;\n        }\n        player.controls = showControls;\n        player.currentTime = start;\n        player.setAttribute('muted', '');\n\n        if (!this.support.quality && document.getElementById('quality')) {\n            // Remove quality button if not supported.\n            document.getElementById('quality').remove();\n        }\n\n        if (document.body.classList.contains('mobiletheme') || autoplay) {\n            // Preload video on mobile app. Must mute to avoid browser restriction.\n            player.setAttribute('autoplay', '');\n        }\n        // Disable keyboard controls.\n        player.tabIndex = -1;\n\n        let self = this;\n        if (!showControls) {\n            document.body.classList.add('no-original-controls');\n        }\n\n        // Play inline.\n        player.setAttribute('playsinline', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        player.addEventListener('loadedmetadata', function() {\n            self.aspectratio = self.ratio();\n            if (isNaN(self.aspectratio)) {\n                self.aspectratio = 16 / 9;\n            }\n            let totaltime = Number((player.duration).toFixed(2)) - self.frequency;\n            if (player.duration === Infinity || isNaN(player.duration) ||\n                (self.hls && self.hls.latencyController.levelDetails.live)) {\n                totaltime = 0.1;\n                self.live = true;\n            }\n            if (end == 0.1 && !self.live) {\n                end = totaltime;\n            }\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            player.pause();\n\n            if (self.dash) {\n                self.dash.on(window.dashjs.MediaPlayer.events.STREAM_INITIALIZED, () => {\n                    // Turn off the tracks.\n                    self.dash.setTextTrack(null);\n                    let tracks = self.dash.getTracksFor(\"text\");\n                    if (tracks && tracks.length > 0) {\n                        tracks = tracks.map(track => {\n                            const locale = track.lang.split('-')[0];\n                            const country = track.lang.split('-')[1];\n                            let displayNames;\n                            try {\n                                displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                            } catch (e) {\n                                displayNames = new Intl.DisplayNames(['en'], {type: 'language'});\n                            }\n                            let label;\n                            if (country == 'auto') {\n                                label = displayNames.of(locale) + ' (Auto)';\n                            } else {\n                                label = displayNames.of(track.lang) ?? track.lang.toUpperCase();\n                            }\n                            return {\n                                label,\n                                code: track.lang,\n                            };\n                        });\n                        self.captions = tracks;\n                    }\n                    dispatchEvent('iv:playerLoaded', {\n                        tracks: self.captions || null\n                    });\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                });\n            } else if (self.hls) {\n                // Turn off the tracks.\n                self.hls.subtitleTrack = -1;\n                let tracks = self.hls.subtitleTracks;\n                if (tracks && tracks.length > 0) {\n                    tracks = tracks.map(track => {\n                        const locale = track.lang.split('-')[0];\n                        const country = track.lang.split('-')[1];\n                        let displayNames;\n                        try {\n                            displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                        } catch (e) {\n                            displayNames = new Intl.DisplayNames(['en'], {type: 'language'});\n                        }\n                        let label;\n                        if (country == 'auto') {\n                            label = displayNames.of(locale) + ' (Auto)';\n                        } else {\n                            label = displayNames.of(track.lang) ?? track.lang.toUpperCase();\n                        }\n                        return {\n                            label,\n                            code: track.lang,\n                        };\n                    });\n                    self.captions = tracks;\n                }\n                dispatchEvent('iv:playerLoaded', {\n                    tracks: self.captions || null\n                });\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n            } else { // Standard video source.\n                dispatchEvent('iv:playerLoaded', {\n                    tracks: null\n                });\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n            }\n        });\n\n        player.addEventListener('pause', function() {\n            self.paused = true;\n            dispatchEvent('iv:playerPaused');\n        });\n\n        player.addEventListener('play', function() {\n            self.paused = false;\n            dispatchEvent('iv:playerPlay');\n        });\n\n        player.addEventListener('timeupdate', function() {\n            if (self.paused) {\n                return;\n            }\n            if (player.currentTime < self.start) {\n                player.currentTime = self.start;\n            }\n            if (player.currentTime >= self.end + self.frequency && !self.live) {\n                player.currentTime = self.end - self.frequency;\n            }\n            dispatchEvent('iv:playerPlaying');\n            if (self.live) {\n                return;\n            }\n            if (self.ended) {\n                self.ended = false;\n            } else {\n                if (!self.ended && player.currentTime >= self.end) {\n                    self.ended = true;\n                    self.paused = true;\n                    player.pause();\n                    dispatchEvent('iv:playerEnded');\n                }\n            }\n        });\n\n        player.addEventListener('error', function(e) {\n            dispatchEvent('iv:playerError', {error: e});\n        });\n\n        player.addEventListener('ratechange', function() {\n            dispatchEvent('iv:playerRateChange', {rate: player.playbackRate});\n        });\n\n        player.addEventListener('waiting', function() {\n            dispatchEvent('iv:playerBuffering');\n        });\n\n        // Volume change event.\n        player.addEventListener('volumechange', function() {\n            dispatchEvent('iv:playerVolumeChange', {volume: player.volume});\n        });\n\n        this.player = player;\n    }\n\n    /**\n     * Visualizes the audio frequency data of the HTML5 video player using a canvas element.\n     * Credit: https://codepen.io/nfj525/pen/rVBaab by Nick Jones\n     * This method creates an audio context and connects it to the video player's audio source.\n     * It then sets up an analyser to get the frequency data and renders a bar graph visualization\n     * on a canvas element with the id \"visualizer\".\n     *\n     * The visualization is updated in real-time using the `requestAnimationFrame` method.\n     *\n     * @method visualizer\n     */\n    visualizer() {\n        var context = new AudioContext();\n        var src = context.createMediaElementSource(this.player);\n        var analyser = context.createAnalyser();\n        var canvas = document.getElementById(\"visualizer\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var ctx = canvas.getContext(\"2d\");\n        src.connect(analyser);\n        analyser.connect(context.destination);\n\n        analyser.fftSize = 256;\n\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Uint8Array(bufferLength);\n\n        var WIDTH = canvas.width;\n        var HEIGHT = canvas.height;\n\n        var barWidth = (WIDTH / bufferLength) * 2.5;\n        var barHeight;\n        var x = 0;\n\n        const renderFrame = () => {\n            requestAnimationFrame(renderFrame);\n            x = 0;\n            analyser.getByteFrequencyData(dataArray);\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n            for (var i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i];\n                var r = barHeight + (25 * (i / bufferLength));\n                var g = 250 * (i / bufferLength);\n                var b = 50;\n\n                ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n                x += barWidth + 1;\n            }\n        };\n        renderFrame();\n    }\n\n    /**\n     * Plays the HTML5 video using the player instance.\n     *\n     * @method play\n     */\n    play() {\n        if (this.live) {\n            // Seek to the end of the video to simulate live streaming.\n            if (this.dash) {\n                this.dash.seekToOriginalLive();\n            }\n            if (this.hls) {\n                let seektime = this.hls.liveSyncPosition;\n                this.seek(seektime);\n            }\n        }\n        this.player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the video playback.\n     *\n     * This method calls the pause function on the player instance to stop the video.\n     */\n    pause() {\n        this.player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video's current time to.\n     */\n    stop(starttime) {\n        this.player.pause();\n        this.player.currentTime = starttime;\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {boolean} Returns true when the seek operation is initiated.\n     */\n    seek(time) {\n        this.ended = false;\n        this.player.currentTime = time;\n        dispatchEvent('iv:playerSeek', {time});\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return this.player.currentTime;\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return this.player.duration;\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return this.player.paused;\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the video is playing, false if it is paused.\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return !this.player.paused;\n    }\n\n    /**\n     * Checks if the video has ended.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return this.player.ended || this.player.currentTime >= this.end;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video is wider than a 16:9 ratio, it returns the actual video ratio.\n     * Otherwise, it returns the 16:9 ratio.\n     *\n     * @returns {number} The aspect ratio of the video.\n     */\n    ratio() {\n        if (this.audio || !this.player.videoWidth || !this.player.videoHeight) {\n            return 16 / 9;\n        }\n        return this.player.videoWidth / this.player.videoHeight;\n    }\n    /**\n     * Destroys the HTML5 video player instance.\n     *\n     * This method pauses the video, removes the source attribute, and reloads the player.\n     * It is used to clean up the player instance and release any resources it may be holding.\n     */\n    destroy() {\n        document.getElementById('video-wrapper').innerHTML = '<div id=\"player\" style=\"width:100%; max-width: 100%\"></div>';\n        this.player.pause();\n        this.player.removeAttribute('src');\n        this.player.load();\n        if (this.hls) {\n            this.hls.destroy();\n        }\n        if (this.dash) {\n            this.dash.destroy();\n        }\n    }\n    /**\n     * Retrieves the current state of the video player.\n     *\n     * @returns {string} - Returns 'paused' if the player is paused, otherwise 'playing'.\n     */\n    getState() {\n        return this.player.paused ? 'paused' : 'playing';\n    }\n\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate. A value of 1.0 represents normal speed.\n     */\n    setRate(rate) {\n        this.player.playbackRate = rate;\n    }\n\n    /**\n     * Mutes the HTML5 video player.\n     */\n    mute() {\n        this.player.muted = true;\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        this.player.muted = false;\n        this.player.volume = 1;\n    }\n\n    isMuted() {\n        return this.player.muted;\n    }\n\n    /**\n     * Returns the original video player instance.\n     *\n     * @returns {Object} The video player instance.\n     */\n    originalPlayer() {\n        return this.player;\n    }\n\n    /**\n     * Sets the video quality.\n     *\n     * Note: This functionality is not supported.\n     *\n     * @param {string} quality - The desired quality setting.\n     * @returns {string} The quality setting that was passed in.\n     */\n    setQuality(quality) {\n        if (this.support.quality) {\n            // Implement quality change here.\n            if (this.hls) {\n                this.hls.currentLevel = quality;\n            } else if (this.dash) {\n                if (quality === -1) {\n                    // Enable automatic quality switching.\n                    this.dash.updateSettings({\n                        streaming: {\n                            abr: {\n                                autoSwitchBitrate: {\n                                    video: true\n                                }\n                            }\n                        }\n                    });\n                } else {\n                    // Disable automatic quality switching and set manual quality.\n                    this.dash.updateSettings({\n                        streaming: {\n                            abr: {\n                                autoSwitchBitrate: {\n                                    video: false\n                                }\n                            }\n                        }\n                    });\n                    this.dash.setRepresentationForTypeByIndex('video', quality);\n                }\n            }\n        }\n        return quality;\n    }\n\n    getQualities() {\n        if (this.support.quality) {\n            // Prepend an \"Auto\" option for quality selection.\n            let keys, values, current;\n            if (this.hls) {\n                keys = [-1, ...this.hls.levels.map((level, index) => index)];\n                values = ['Auto', ...this.hls.levels.map((level) => level.height + 'p')];\n                current = this.hls.currentLevel;\n            } else if (this.dash) {\n                const qualities = this.dash.getRepresentationsByType('video');\n                keys = [-1, ...qualities.map((quality) => quality.absoluteIndex)];\n                values = ['Auto', ...qualities.map((quality) => quality.height\n                    + 'p (' + Math.round(quality.bitrateInKbit) + 'kbps)')];\n                current = this.dash.getCurrentRepresentationForType('video').absoluteIndex;\n                if (!current) {\n                    current = -1;\n                }\n            }\n\n            return {\n                qualities: keys,\n                qualitiesLabel: values,\n                currentQuality: current,\n            };\n        }\n        return [];\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        if (this.dash) {\n            if (track === 'off' || track == '') {\n                this.dash.setTextTrack(null);\n            } else {\n                const tracks = this.dash.getTracksFor('text');\n                if (tracks && tracks.length > 0) {\n                    const selectedTrack = tracks.find(t => t.lang === track);\n                    if (selectedTrack) {\n                        this.dash.setTextTrack(selectedTrack.id);\n                    } else {\n                        window.console.warn('Caption track not found:', track);\n                    }\n                }\n            }\n        }\n        if (this.hls) {\n            if (track === 'off' || track == '') {\n                this.hls.subtitleTrack = -1; // Disable subtitles.\n            } else {\n                const tracks = this.hls.subtitleTracks;\n                if (tracks && tracks.length > 0) {\n                    const selectedTrack = tracks.find(t => t.lang === track);\n                    if (selectedTrack) {\n                        this.hls.subtitleTrack = selectedTrack.id;\n                    } else {\n                        window.console.warn('Caption track not found:', track);\n                    }\n                }\n            }\n        }\n        return track;\n    }\n}\n\nexport default Html5Video;"],"names":["constructor","type","frequency","useAnimationFrame","support","playbackrate","quality","url","start","end","opts","showControls","node","autoplay","allowAutoplay","document","getElementById","this","requireVideoBlock","player","posterImage","poster","ext","split","pop","indexOf","audio","canvas","insertAdjacentHTML","style","visibility","Hls","window","isSupported","hls","loadSource","attachMedia","on","Events","MANIFEST_PARSED","event","data","hlsdata","LEVEL_SWITCHED","level","ERROR","fatal","error","canPlayType","src","console","dashjs","dashPlayer","MediaPlayer","create","initialize","dash","events","REPRESENTATION_SWITCH","current","getCurrentRepresentationForType","absoluteIndex","controls","currentTime","setAttribute","remove","body","classList","contains","tabIndex","self","add","addEventListener","aspectratio","ratio","isNaN","totaltime","Number","duration","toFixed","Infinity","latencyController","levelDetails","live","Math","min","pause","STREAM_INITIALIZED","setTextTrack","tracks","getTracksFor","length","map","track","locale","lang","country","displayNames","label","Intl","DisplayNames","M","cfg","language","e","of","toUpperCase","code","captions","subtitleTrack","subtitleTracks","paused","ended","rate","playbackRate","volume","visualizer","context","AudioContext","createMediaElementSource","analyser","createAnalyser","width","innerWidth","height","innerHeight","ctx","getContext","connect","destination","fftSize","barHeight","bufferLength","frequencyBinCount","dataArray","Uint8Array","WIDTH","HEIGHT","barWidth","x","renderFrame","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","i","r","g","play","seekToOriginalLive","seektime","liveSyncPosition","seek","stop","starttime","time","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","videoWidth","videoHeight","destroy","innerHTML","removeAttribute","load","getState","setRate","mute","muted","unMute","isMuted","originalPlayer","setQuality","currentLevel","updateSettings","streaming","abr","autoSwitchBitrate","video","setRepresentationForTypeByIndex","getQualities","keys","values","levels","index","qualities","getRepresentationsByType","round","bitrateInKbit","qualitiesLabel","currentQuality","setCaption","selectedTrack","find","t","id","warn"],"mappings":"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"}