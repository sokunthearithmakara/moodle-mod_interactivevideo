{"version":3,"file":"html5video.min.js","sources":["../../src/player/html5video.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * HTML5 Video Player class\n * Documentation for DASH.js: https://reference.dashif.org/dash.js/v4.4.0/samples/index.html\n * Documentation for HLS.js: https://github.com/video-dev/hls.js\n * @module     mod_interactivevideo/player/html5video\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\nimport $ from 'jquery';\n\nlet playerids = {};\nclass Html5Video {\n    /**\n     * Constructor for the HTML5 video player.\n     */\n    constructor() {\n        this.type = \"html5video\";\n        this.frequency = 0.4;\n        this.useAnimationFrame = false;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n\n        const loadVideo = async(player) => {\n            // Determine video type based on file extension.\n            if (url.indexOf('.m3u8') !== -1) {\n                let Hls = await import('mod_interactivevideo/player/hls');\n                window.Hls = Hls; // Make Hls globally available.\n                // Handle HLS stream.\n                if (typeof Hls !== 'undefined' && Hls.isSupported()) {\n                    var hls = new Hls();\n                    this.hls = hls;\n                    hls.loadSource(url);\n                    // Bind them together.\n                    hls.attachMedia(player);\n                } else if (player.canPlayType('application/vnd.apple.mpegurl')) {\n                    // Some browsers (like Safari) support HLS natively.\n                    player.src = url;\n                }\n            } else if (url.indexOf('.mpd') !== -1) {\n                // Handle DASH stream using dash.js.\n                let dashjs = await import('mod_interactivevideo/player/dash');\n                if (typeof dashjs !== 'undefined') {\n                    var dashPlayer = dashjs.MediaPlayer().create();\n                    dashPlayer.initialize(player, url, false);\n                    this.dash = dashPlayer;\n                }\n            } else {\n                // Standard video source.\n                player.src = url;\n            }\n            return player;\n        };\n        return new Promise((resolve) => {\n            var player = document.getElementById(node);\n            playerids[node] = player;\n            self.player = player;\n            // Play inline.\n            player.setAttribute('playsinline', '');\n\n            // Disable picture-in-picture.\n            player.setAttribute('disablePictureInPicture', '');\n            // eslint-disable-next-line promise/catch-or-return, promise/always-return\n            loadVideo(player).then((player) => {\n                player.addEventListener('loadedmetadata', function() {\n                    resolve({\n                        duration: player.duration,\n                        title: player.title,\n                        posterImage: player.poster,\n                    });\n                });\n            });\n        });\n    }\n    /**\n     * Loads an instance of an HTML5 video player.\n     *\n     * @param {string} url - The URL of the video to be played.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} [end] - The end time of the video in seconds. If not provided, defaults to the video's duration.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        const autoplay = opts.autoplay || false;\n        this.node = node;\n        this.start = start;\n        this.end = end;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true\n            });\n        }\n        var player = document.getElementById(node);\n        playerids[node] = player;\n        this.posterImage = player.poster;\n        // Check if the url is for video or audio.\n        const audio = ['mp3', 'wav', 'm4a', 'flac', 'aac', 'wma', 'aiff', 'alac'];\n        const ext = url.split('.').pop();\n        if (audio.find(e => ext.includes(e))) {\n            // Change the player to an audio player.\n            this.audio = true;\n            // Append a canvas element to the video.\n            const canvas = '<canvas id=\"visualizer\"></canvas>';\n            player.insertAdjacentHTML('afterend', canvas);\n            player.style.visibility = 'hidden';\n        }\n        // Determine video type based on file extension.\n        if (url.indexOf('.m3u8') !== -1) {\n            let Hls = await import('mod_interactivevideo/player/hls');\n            window.Hls = Hls; // Make Hls globally available.\n            // Handle HLS stream.\n            if (typeof Hls !== 'undefined' && Hls.isSupported()) {\n                var hls = new Hls();\n                this.hls = hls;\n                hls.loadSource(url);\n                // Bind them together.\n                hls.attachMedia(player);\n                this.support.quality = true;\n\n                hls.on(Hls.Events.MANIFEST_PARSED, function(event, data) {\n                    this.hlsdata = data;\n                });\n\n                // Handle quality change.\n                hls.on(Hls.Events.LEVEL_SWITCHED, function(event, data) {\n                    dispatchEvent('iv:playerQualityChange', {quality: data.level});\n                });\n\n                hls.on(Hls.Events.ERROR, function(event, data) {\n                    if (data.fatal) {\n                        dispatchEvent('iv:playerError', {error: data});\n                    }\n                });\n            } else if (player.canPlayType('application/vnd.apple.mpegurl')) {\n                // Some browsers (like Safari) support HLS natively.\n                player.src = url;\n                this.support.quality = false;\n            } else {\n                window.console.error('HLS is not supported in this browser.');\n                this.support.quality = false;\n            }\n        } else if (url.indexOf('.mpd') !== -1) {\n            // Handle DASH stream using dash.js.\n            let dashjs = await import('mod_interactivevideo/player/dash');\n            if (typeof dashjs !== 'undefined') {\n                var dashPlayer = dashjs.MediaPlayer().create();\n                dashPlayer.initialize(player, url, false);\n                this.dash = dashPlayer;\n                dashPlayer.on(dashjs.MediaPlayer.events.REPRESENTATION_SWITCH, function() {\n                    const current = dashPlayer.getCurrentRepresentationForType('video');\n                    if (!current) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerQualityChange', {quality: current.absoluteIndex});\n                });\n                dashPlayer.on(dashjs.MediaPlayer.events.ERROR, function() {\n                    dispatchEvent('iv:playerError');\n                });\n                this.support.quality = true;\n            } else {\n                window.console.error('Dash.js library is not loaded.');\n                this.support.quality = false;\n            }\n        } else {\n            // Standard video source.\n            player.src = url;\n            this.support.quality = false;\n        }\n        player.controls = showControls;\n        player.currentTime = start;\n        player.setAttribute('muted', '');\n\n        if (!this.support.quality && document.getElementById('quality')) {\n            // Remove quality button if not supported.\n            document.getElementById('quality').remove();\n        }\n\n        if (document.body.classList.contains('mobiletheme') || autoplay) {\n            // Preload video on mobile app. Must mute to avoid browser restriction.\n            player.setAttribute('autoplay', '');\n        }\n        // Disable keyboard controls.\n        player.tabIndex = -1;\n\n        let self = this;\n        if (!showControls) {\n            document.body.classList.add('no-original-controls');\n        }\n\n        // Play inline.\n        player.setAttribute('playsinline', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        player.addEventListener('loadedmetadata', function() {\n            self.aspectratio = self.ratio();\n            if (isNaN(self.aspectratio)) {\n                self.aspectratio = 16 / 9;\n            }\n            let totaltime = Number((player.duration).toFixed(2)) - self.frequency;\n            if (player.duration === Infinity || isNaN(player.duration) ||\n                (self.hls && self.hls.latencyController.levelDetails.live)) {\n                totaltime = 0.1;\n                self.live = true;\n            }\n            if (end == 0.1 && !self.live) {\n                end = totaltime;\n            }\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            player.pause();\n\n            if (self.dash) {\n                self.dash.on(window.dashjs.MediaPlayer.events.STREAM_INITIALIZED, () => {\n                    // Turn off the tracks.\n                    self.dash.setTextTrack(null);\n                    let tracks = self.dash.getTracksFor(\"text\");\n                    if (tracks && tracks.length > 0) {\n                        tracks = tracks.map(track => {\n                            const locale = track.lang.split('-')[0];\n                            const country = track.lang.split('-')[1];\n                            let displayNames;\n                            try {\n                                displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                            } catch (e) {\n                                displayNames = new Intl.DisplayNames(['en'], {type: 'language'});\n                            }\n                            let label;\n                            if (country == 'auto') {\n                                label = displayNames.of(locale) + ' (Auto)';\n                            } else {\n                                label = displayNames.of(track.lang) ?? track.lang.toUpperCase();\n                            }\n                            return {\n                                label,\n                                code: track.lang,\n                            };\n                        });\n                        self.captions = tracks;\n                    }\n                    dispatchEvent('iv:playerLoaded', {\n                        tracks: self.captions || null,\n                        reloaded: reloaded,\n                    });\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                });\n            } else if (self.hls) {\n                // Turn off the tracks.\n                self.hls.subtitleTrack = -1;\n                let tracks = self.hls.subtitleTracks;\n                if (tracks && tracks.length > 0) {\n                    tracks = tracks.map(track => {\n                        const locale = track.lang.split('-')[0];\n                        const country = track.lang.split('-')[1];\n                        let displayNames;\n                        try {\n                            displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                        } catch (e) {\n                            displayNames = new Intl.DisplayNames(['en'], {type: 'language'});\n                        }\n                        let label;\n                        if (country == 'auto') {\n                            label = displayNames.of(locale) + ' (Auto)';\n                        } else {\n                            label = displayNames.of(track.lang) ?? track.lang.toUpperCase();\n                        }\n                        return {\n                            label,\n                            code: track.lang,\n                        };\n                    });\n                    self.captions = tracks;\n                }\n                dispatchEvent('iv:playerLoaded', {\n                    tracks: self.captions || null,\n                    reloaded: reloaded,\n                });\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n            } else { // Standard video source.\n                dispatchEvent('iv:playerLoaded', {\n                    tracks: null,\n                    reloaded: reloaded,\n                });\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n            }\n        });\n\n        player.addEventListener('pause', function() {\n            self.paused = true;\n            dispatchEvent('iv:playerPaused');\n        });\n\n        player.addEventListener('play', function() {\n            self.paused = false;\n            dispatchEvent('iv:playerPlay');\n        });\n\n        player.addEventListener('timeupdate', function() {\n            if (self.paused) {\n                return;\n            }\n            if (player.currentTime < self.start) {\n                player.currentTime = self.start;\n            }\n            if (player.currentTime >= self.end + self.frequency && !self.live) {\n                player.currentTime = self.end - self.frequency;\n            }\n            dispatchEvent('iv:playerPlaying');\n            if (self.live) {\n                return;\n            }\n            if (self.ended) {\n                self.ended = false;\n            } else {\n                if (!self.ended && player.currentTime >= self.end) {\n                    self.ended = true;\n                    self.paused = true;\n                    player.pause();\n                    dispatchEvent('iv:playerEnded');\n                }\n            }\n        });\n\n        player.addEventListener('error', function(e) {\n            dispatchEvent('iv:playerError', {error: e});\n        });\n\n        player.addEventListener('ratechange', function() {\n            dispatchEvent('iv:playerRateChange', {rate: player.playbackRate});\n        });\n\n        player.addEventListener('waiting', function() {\n            dispatchEvent('iv:playerBuffering');\n        });\n\n        // Volume change event.\n        player.addEventListener('volumechange', function() {\n            dispatchEvent('iv:playerVolumeChange', {volume: player.volume});\n        });\n\n        this.player = player;\n    }\n\n    /**\n     * Visualizes the audio frequency data of the HTML5 video player using a canvas element.\n     * Credit: https://codepen.io/nfj525/pen/rVBaab by Nick Jones\n     * This method creates an audio context and connects it to the video player's audio source.\n     * It then sets up an analyser to get the frequency data and renders a bar graph visualization\n     * on a canvas element with the id \"visualizer\".\n     *\n     * The visualization is updated in real-time using the `requestAnimationFrame` method.\n     *\n     * @method visualizer\n     */\n    visualizer() {\n        var context = new AudioContext();\n        var src = context.createMediaElementSource(this.player);\n        var analyser = context.createAnalyser();\n        var canvas = document.getElementById(\"visualizer\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var ctx = canvas.getContext(\"2d\");\n        src.connect(analyser);\n        analyser.connect(context.destination);\n\n        analyser.fftSize = 256;\n\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Uint8Array(bufferLength);\n\n        var WIDTH = canvas.width;\n        var HEIGHT = canvas.height;\n\n        var barWidth = (WIDTH / bufferLength) * 2.5;\n        var barHeight;\n        var x = 0;\n\n        const renderFrame = () => {\n            requestAnimationFrame(renderFrame);\n            x = 0;\n            analyser.getByteFrequencyData(dataArray);\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n            for (var i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i];\n                var r = barHeight + (25 * (i / bufferLength));\n                var g = 250 * (i / bufferLength);\n                var b = 50;\n\n                ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n                x += barWidth + 1;\n            }\n        };\n        renderFrame();\n    }\n\n    /**\n     * Plays the HTML5 video using the player instance.\n     *\n     * @method play\n     */\n    play() {\n\n        if (!playerids[this.node]) {\n            return;\n        }\n        if (this.live) {\n            // Seek to the end of the video to simulate live streaming.\n            if (this.dash) {\n                this.dash.seekToOriginalLive();\n            }\n            if (this.hls) {\n                let seektime = this.hls.liveSyncPosition;\n                this.seek(seektime);\n            }\n        }\n        this.player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the video playback.\n     *\n     * This method calls the pause function on the player instance to stop the video.\n     */\n    pause() {\n        if (!playerids[this.node]) {\n            return false;\n        }\n        this.player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video's current time to.\n     */\n    stop(starttime) {\n        if (!playerids[this.node]) {\n            return;\n        }\n        this.player.pause();\n        this.player.currentTime = starttime;\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {boolean} Returns true when the seek operation is initiated.\n     */\n    seek(time) {\n        if (!playerids[this.node]) {\n            return time;\n        }\n        let currentTime = this.getCurrentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        this.ended = false;\n        this.player.currentTime = time;\n        dispatchEvent('iv:playerSeek', {time});\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        if (!playerids[this.node]) {\n            return 0;\n        }\n        return this.player.currentTime;\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        if (!playerids[this.node]) {\n            return 0;\n        }\n        return this.player.duration;\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        if (!playerids[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        return this.player.paused;\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the video is playing, false if it is paused.\n     */\n    isPlaying() {\n        if (!playerids[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        return !this.player.paused;\n    }\n\n    /**\n     * Checks if the video has ended.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        if (!playerids[this.node]) {\n            return false;\n        }\n        return this.player.ended || this.player.currentTime >= this.end;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video is wider than a 16:9 ratio, it returns the actual video ratio.\n     * Otherwise, it returns the 16:9 ratio.\n     *\n     * @returns {number} The aspect ratio of the video.\n     */\n    ratio() {\n        if (!playerids[this.node]) {\n            return 16 / 9;\n        }\n        if (this.audio || !this.player.videoWidth || !this.player.videoHeight) {\n            return 16 / 9;\n        }\n        return this.player.videoWidth / this.player.videoHeight;\n    }\n    /**\n     * Destroys the HTML5 video player instance.\n     *\n     * This method pauses the video, removes the source attribute, and reloads the player.\n     * It is used to clean up the player instance and release any resources it may be holding.\n     */\n    destroy() {\n        $(`#${this.node}`).replaceWith(`<div id=\"${this.node}\" style=\"width:100%; max-width: 100%\"></div>`);\n        this.player.pause();\n        this.player.removeAttribute('src');\n        this.player.load();\n        if (this.hls) {\n            this.hls.destroy();\n        }\n        if (this.dash) {\n            this.dash.destroy();\n        }\n        playerids[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Retrieves the current state of the video player.\n     *\n     * @returns {string} - Returns 'paused' if the player is paused, otherwise 'playing'.\n     */\n    getState() {\n        if (!playerids[this.node]) {\n            return 'paused';\n        }\n        return this.player.paused ? 'paused' : 'playing';\n    }\n\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate. A value of 1.0 represents normal speed.\n     */\n    setRate(rate) {\n        if (!playerids[this.node]) {\n            return;\n        }\n        this.player.playbackRate = rate;\n    }\n\n    /**\n     * Mutes the HTML5 video player.\n     */\n    mute() {\n        if (!playerids[this.node]) {\n            return;\n        }\n        this.player.muted = true;\n        this.player.volume = 0;\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        if (!playerids[this.node]) {\n            return;\n        }\n        this.player.muted = false;\n        this.player.volume = 1;\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!playerids[this.node]) {\n            return false;\n        }\n        return this.player.muted;\n    }\n\n    /**\n     * Returns the original video player instance.\n     *\n     * @returns {Object} The video player instance.\n     */\n    originalPlayer() {\n        if (!playerids[this.node]) {\n            return null;\n        }\n        return this.player;\n    }\n\n    /**\n     * Sets the video quality.\n     *\n     * Note: This functionality is not supported.\n     *\n     * @param {string} quality - The desired quality setting.\n     * @returns {string} The quality setting that was passed in.\n     */\n    setQuality(quality) {\n        if (!playerids[this.node]) {\n            return quality;\n        }\n        if (this.support.quality) {\n            // Implement quality change here.\n            if (this.hls) {\n                this.hls.currentLevel = quality;\n            } else if (this.dash) {\n                if (quality === -1) {\n                    // Enable automatic quality switching.\n                    this.dash.updateSettings({\n                        streaming: {\n                            abr: {\n                                autoSwitchBitrate: {\n                                    video: true\n                                }\n                            }\n                        }\n                    });\n                } else {\n                    // Disable automatic quality switching and set manual quality.\n                    this.dash.updateSettings({\n                        streaming: {\n                            abr: {\n                                autoSwitchBitrate: {\n                                    video: false\n                                }\n                            }\n                        }\n                    });\n                    this.dash.setRepresentationForTypeByIndex('video', quality);\n                }\n            }\n        }\n        return quality;\n    }\n\n    getQualities() {\n        if (!playerids[this.node]) {\n            return null;\n        }\n        if (this.support.quality) {\n            // Prepend an \"Auto\" option for quality selection.\n            let keys, values, current;\n            if (this.hls) {\n                keys = [-1, ...this.hls.levels.map((level, index) => index)];\n                values = ['Auto', ...this.hls.levels.map((level) => level.height + 'p')];\n                current = this.hls.currentLevel;\n            } else if (this.dash) {\n                const qualities = this.dash.getRepresentationsByType('video');\n                keys = [-1, ...qualities.map((quality) => quality.absoluteIndex)];\n                values = ['Auto', ...qualities.map((quality) => quality.height\n                    + 'p (' + Math.round(quality.bitrateInKbit) + 'kbps)')];\n                current = this.dash.getCurrentRepresentationForType('video').absoluteIndex;\n                if (!current) {\n                    current = -1;\n                }\n            }\n\n            return {\n                qualities: keys,\n                qualitiesLabel: values,\n                currentQuality: current,\n            };\n        }\n        return [];\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        if (!playerids[this.node]) {\n            return null;\n        }\n        if (this.dash) {\n            if (track === 'off' || track == '') {\n                this.dash.setTextTrack(null);\n            } else {\n                const tracks = this.dash.getTracksFor('text');\n                if (tracks && tracks.length > 0) {\n                    const selectedTrack = tracks.find(t => t.lang === track);\n                    if (selectedTrack) {\n                        this.dash.setTextTrack(selectedTrack.id);\n                    } else {\n                        window.console.warn('Caption track not found:', track);\n                    }\n                }\n            }\n        }\n        if (this.hls) {\n            if (track === 'off' || track == '') {\n                this.hls.subtitleTrack = -1; // Disable subtitles.\n            } else {\n                const tracks = this.hls.subtitleTracks;\n                if (tracks && tracks.length > 0) {\n                    const selectedTrack = tracks.find(t => t.lang === track);\n                    if (selectedTrack) {\n                        this.hls.subtitleTrack = selectedTrack.id;\n                    } else {\n                        window.console.warn('Caption track not found:', track);\n                    }\n                }\n            }\n        }\n        return track;\n    }\n}\n\nexport default Html5Video;"],"names":["playerids","constructor","type","frequency","useAnimationFrame","support","playbackrate","quality","url","node","self","this","loadVideo","async","indexOf","Hls","window","isSupported","hls","loadSource","attachMedia","player","canPlayType","src","dashjs","dashPlayer","MediaPlayer","create","initialize","dash","Promise","resolve","document","getElementById","setAttribute","then","addEventListener","duration","title","posterImage","poster","start","end","opts","reloaded","showControls","autoplay","allowAutoplay","requireVideoBlock","ext","split","pop","find","e","includes","audio","canvas","insertAdjacentHTML","style","visibility","on","Events","MANIFEST_PARSED","event","data","hlsdata","LEVEL_SWITCHED","level","ERROR","fatal","error","console","events","REPRESENTATION_SWITCH","current","getCurrentRepresentationForType","absoluteIndex","controls","currentTime","remove","body","classList","contains","tabIndex","add","aspectratio","ratio","isNaN","totaltime","Number","toFixed","Infinity","latencyController","levelDetails","live","Math","min","pause","STREAM_INITIALIZED","setTextTrack","tracks","getTracksFor","length","map","track","locale","lang","country","displayNames","label","Intl","DisplayNames","M","cfg","language","of","toUpperCase","code","captions","subtitleTrack","subtitleTracks","paused","ended","rate","playbackRate","volume","visualizer","context","AudioContext","createMediaElementSource","analyser","createAnalyser","width","innerWidth","height","innerHeight","ctx","getContext","connect","destination","fftSize","barHeight","bufferLength","frequencyBinCount","dataArray","Uint8Array","WIDTH","HEIGHT","barWidth","x","renderFrame","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","i","r","g","play","seekToOriginalLive","seektime","liveSyncPosition","seek","stop","starttime","time","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","videoWidth","videoHeight","destroy","replaceWith","removeAttribute","load","getState","setRate","mute","muted","unMute","isMuted","originalPlayer","setQuality","currentLevel","updateSettings","streaming","abr","autoSwitchBitrate","video","setRepresentationForTypeByIndex","getQualities","keys","values","levels","index","qualities","getRepresentationsByType","round","bitrateInKbit","qualitiesLabel","currentQuality","setCaption","selectedTrack","t","id","warn"],"mappings":"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"}