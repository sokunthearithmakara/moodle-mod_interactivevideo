{"version":3,"file":"wistia.min.js","sources":["../../src/player/wistia.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Wistia Player class\n * Doc: https://docs.wistia.com/docs/javascript-player-api\n *\n * @module     mod_interactivevideo/player/wistia\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player;\n\nclass Wistia {\n    /**\n     * Constructs a new Wistia player instance.\n     */\n    constructor() {\n        this.type = 'wistia';\n        this.useAnimationFrame = true;\n        this.frequency = 0.3;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n    }\n\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        if (opts.passwordprotected) {\n            $('#start-screen, .video-block, #video-block').remove();\n        }\n        if (!showControls) {\n            $('body').addClass('no-original-controls');\n        }\n        // Wistia does not load the video if the player is not visible, so we need to make sure the node parent is visible.\n        $(`#${node}`).parent().removeClass('d-none');\n        const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:wistia\\.com)\\/medias\\/([^/]+)/g;\n        const match = regex.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        $(`#${node}`).html(`<div class=\"wistia_embed wistia_async_${videoId} wmode=transparent\n             controlsVisibleOnLoad=true playButton=true videoFoam=false silentAutoPlay=allow playsinline=true\n              fullscreenButton=false ${this.allowAutoplay ? `time=${start}` : ``}\n               fitStrategy=contain\" style=\"height:100%;width:100%\"></div>`);\n        let self = this;\n        if (opts.editform) {\n            $.get('https://fast.wistia.com/oembed.json?url=' + url)\n                .then(function(data) {\n                    self.posterImage = data.thumbnail_url;\n                    self.title = data.title;\n                    return self.posterImage;\n                }).catch(() => {\n                    return;\n                });\n        }\n        let ready = false;\n        const wistiaOptions = {\n            id: videoId,\n            options: {\n                plugin: {\n                    chapters: {\n                        on: false\n                    },\n                    \"postRoll-v1\": {\n                        on: false\n                    }\n                }\n            },\n            onReady: async function(video) {\n                $('#annotation-canvas').removeClass('d-none');\n                player = video;\n                self.aspectratio = self.ratio();\n                // We don't want to use the end time from the player, just to avoid any issue restarting the video.\n                let totaltime = video.duration() - self.frequency;\n                end = !end ? totaltime : Math.min(end, totaltime);\n                end = Number(end.toFixed(2));\n                self.end = end;\n                self.totaltime = Number(totaltime.toFixed(2));\n                self.duration = self.end - self.start;\n\n                const eventListeners = () => {\n                    video.unmute();\n                    video.on(\"pause\", () => {\n                        self.paused = true;\n                        if ($(document).find('.w-password-protected').length > 0) {\n                            return;\n                        }\n                        if (video.time() >= end) {\n                            self.ended = true;\n                            dispatchEvent('iv:playerEnded');\n                        } else {\n                            dispatchEvent('iv:playerPaused');\n                        }\n                    });\n\n                    video.on(\"seek\", (e) => {\n                        if ($(document).find('.w-password-protected').length > 0) {\n                            return;\n                        }\n                        dispatchEvent('iv:playerSeek', {time: e});\n                    });\n\n                    video.bind('play', async() => {\n                        if (video.time() >= end) {\n                            await video.time(start);\n                        }\n                        self.paused = false;\n                        dispatchEvent('iv:playerPlaying');\n                    });\n\n                    video.on('timechange', (s) => {\n                        self.paused = false;\n                        if (s < start) {\n                            video.time(start);\n                        }\n                        if (s >= end + self.frequency) {\n                            video.time(end - self.frequency);\n                        }\n                        if (s >= end) {\n                            self.ended = true;\n                            dispatchEvent('iv:playerEnded');\n                        }\n                    });\n\n                    video.on(\"error\", (e) => {\n                        dispatchEvent('iv:playerError', {error: e});\n                    });\n\n                    video.on(\"playbackratechange\", (e) => {\n                        dispatchEvent('iv:playerRateChange', {rate: e});\n                    });\n                };\n\n                video.mute();\n                video.play();\n                await video.time(start);\n                await video.pause();\n                if ($(document).find('.w-password-protected').length > 0) {\n                    video.play();\n                } else {\n                    if (!ready) {\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        eventListeners();\n                    }\n                }\n            },\n            onError: function(e) {\n                dispatchEvent('iv:playerError', {error: e});\n            }\n        };\n\n        if (!window._wq) {\n            // Add wistia script\n            var tag = document.createElement('script');\n            tag.src = \"https://fast.wistia.com/assets/external/E-v1.js\";\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            var interval = setInterval(() => {\n                if (window._wq) {\n                    clearInterval(interval);\n                    window._wq.push(wistiaOptions);\n                }\n            }, 1000);\n        } else {\n            window._wq.push(wistiaOptions);\n        }\n    }\n    /**\n     * Plays the Wistia video player.\n     *\n     * This method triggers the play action on the Wistia player instance.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Wistia video player.\n     *\n     * This method calls the `pause` function on the Wistia player instance,\n     * effectively pausing the video playback.\n     */\n    async pause() {\n        await player.pause();\n        this.paused = true;\n    }\n    /**\n     * Stops the video playback and sets the playback time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video playback to after pausing.\n     */\n    stop(starttime) {\n        player.pause();\n        player.time(starttime);\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {number} The time that was sought to.\n     */\n    seek(time) {\n        player.time(time);\n        this.ended = false;\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video player.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return player.time();\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return player.duration();\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return player.state() === 'paused';\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the player is in the 'playing' state, otherwise false.\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return player.state() === 'playing';\n    }\n    /**\n     * Checks if the video player has reached the end of the video.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return this.ended;\n    }\n    /**\n     * Calculates the aspect ratio for the video player.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns the default aspect ratio of 16:9.\n     *\n     * @returns {number} The aspect ratio of the video player.\n     */\n    ratio() {\n        return player.aspect();\n    }\n\n    /**\n     * Destroys the Wistia player instance by removing it from the DOM.\n     */\n    destroy() {\n        player.remove();\n    }\n    /**\n     * Retrieves the current state of the player.\n     *\n     * @returns {Object} The current state of the player.\n     */\n    getState() {\n        return player.state();\n    }\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate.\n     */\n    setRate(rate) {\n        player.playbackRate(rate);\n    }\n    /**\n     * Mutes the Wistia player.\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        player.unmute();\n        player.volume(1);\n    }\n    /**\n     * Returns the original Wistia player instance.\n     *\n     * @returns {Object} The Wistia player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the video quality for the player and dispatches a quality change event.\n     *\n     * @param {string} quality - The desired video quality to set.\n     * @returns {string} The quality that was set.\n     */\n    setQuality(quality) {\n        player.videoQuality(quality);\n        dispatchEvent('iv:playerQualityChange', {quality: quality});\n        return quality;\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Object} An object containing:\n     * - `qualities` {Array<string>}: List of available video quality options.\n     * - `qualitiesLabel` {Array<string>}: List of labels corresponding to the video quality options.\n     * - `currentQuality` {string|number}: The current video quality setting.\n     */\n    getQualities() {\n        return {\n            qualities: ['auto', '360', '540', '720', '1080', '2160'],\n            qualitiesLabel: ['Auto', '360p', '540p', '720p', '1080p', '4k'],\n            currentQuality: player.videoQuality() == 'auto' ? 0 : player.videoQuality(),\n        };\n    }\n}\n\nexport default Wistia;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","url","start","end","opts","showControls","node","allowAutoplay","document","getElementById","this","passwordprotected","remove","addClass","parent","removeClass","videoId","exec","html","self","editform","get","then","data","posterImage","thumbnail_url","title","catch","ready","wistiaOptions","id","options","plugin","chapters","on","onReady","async","video","aspectratio","ratio","totaltime","duration","Math","min","Number","toFixed","mute","play","time","pause","find","length","unmute","paused","ended","e","bind","s","error","rate","onError","window","_wq","push","tag","createElement","src","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","interval","setInterval","clearInterval","stop","starttime","seek","getCurrentTime","getDuration","isPaused","state","isPlaying","isEnded","aspect","destroy","getState","setRate","playbackRate","unMute","volume","originalPlayer","setQuality","videoQuality","getQualities","qualities","qualitiesLabel","currentQuality"],"mappings":";;;;;;;;SA2BIA,wMAMAC,mBACSC,KAAO,cACPC,mBAAoB,OACpBC,UAAY,QACZC,QAAU,CACXC,cAAc,EACdC,SAAS,EACTC,UAAU,cAIPC,IAAKC,MAAOC,SAAKC,4DAAO,SACzBC,aAAeD,KAAKC,eAAgB,EACpCC,KAAOF,KAAKE,MAAQ,cACrBC,oBAAsB,0BAAcC,SAASC,eAAeH,OAC5DI,KAAKH,mDACQ,2BAEbL,MAAQA,MACTE,KAAKO,uCACH,6CAA6CC,SAE9CP,kCACC,QAAQQ,SAAS,uDAGjBP,OAAQQ,SAASC,YAAY,gBAG7BC,QAFQ,8DACMC,KAAKhB,KACH,QACjBe,QAAUA,uCACTV,OAAQY,qDAA8CF,2LAE7BN,KAAKH,6BAAwBL,8FAExDiB,KAAOT,KACPN,KAAKgB,0BACHC,IAAI,2CAA6CpB,KAC9CqB,MAAK,SAASC,aACXJ,KAAKK,YAAcD,KAAKE,cACxBN,KAAKO,MAAQH,KAAKG,MACXP,KAAKK,eACbG,OAAM,aAIbC,OAAQ,QACNC,cAAgB,CAClBC,GAAId,QACJe,QAAS,CACLC,OAAQ,CACJC,SAAU,CACNC,IAAI,iBAEO,CACXA,IAAI,KAIhBC,QAASC,eAAeC,2BAClB,sBAAsBtB,YAAY,UACpCvB,OAAS6C,MACTlB,KAAKmB,YAAcnB,KAAKoB,YAEpBC,UAAYH,MAAMI,WAAatB,KAAKvB,UACxCO,IAAOA,IAAkBuC,KAAKC,IAAIxC,IAAKqC,WAA1BA,UACbrC,IAAMyC,OAAOzC,IAAI0C,QAAQ,IACzB1B,KAAKhB,IAAMA,IACXgB,KAAKqB,UAAYI,OAAOJ,UAAUK,QAAQ,IAC1C1B,KAAKsB,SAAWtB,KAAKhB,IAAMgB,KAAKjB,MAuDhCmC,MAAMS,OACNT,MAAMU,aACAV,MAAMW,KAAK9C,aACXmC,MAAMY,SACR,mBAAEzC,UAAU0C,KAAK,yBAAyBC,OAAS,EACnDd,MAAMU,OAEDnB,QACDA,OAAQ,sCACM,iBAAkB,KAAMpB,SAASC,eAAeH,OA7DlE+B,MAAMe,SACNf,MAAMH,GAAG,SAAS,KACdf,KAAKkC,QAAS,GACV,mBAAE7C,UAAU0C,KAAK,yBAAyBC,OAAS,IAGnDd,MAAMW,QAAU7C,KAChBgB,KAAKmC,OAAQ,sCACC,uDAEA,uBAItBjB,MAAMH,GAAG,QAASqB,KACV,mBAAE/C,UAAU0C,KAAK,yBAAyBC,OAAS,uCAGzC,gBAAiB,CAACH,KAAMO,OAG1ClB,MAAMmB,KAAK,QAAQpB,UACXC,MAAMW,QAAU7C,WACVkC,MAAMW,KAAK9C,OAErBiB,KAAKkC,QAAS,sCACA,uBAGlBhB,MAAMH,GAAG,cAAeuB,IACpBtC,KAAKkC,QAAS,EACVI,EAAIvD,OACJmC,MAAMW,KAAK9C,OAEXuD,GAAKtD,IAAMgB,KAAKvB,WAChByC,MAAMW,KAAK7C,IAAMgB,KAAKvB,WAEtB6D,GAAKtD,MACLgB,KAAKmC,OAAQ,sCACC,sBAItBjB,MAAMH,GAAG,SAAUqB,wCACD,iBAAkB,CAACG,MAAOH,OAG5ClB,MAAMH,GAAG,sBAAuBqB,wCACd,sBAAuB,CAACI,KAAMJ,SAkBxDK,QAAS,SAASL,uCACA,iBAAkB,CAACG,MAAOH,SAI3CM,OAAOC,IAgBRD,OAAOC,IAAIC,KAAKlC,mBAhBH,KAETmC,IAAMxD,SAASyD,cAAc,UACjCD,IAAIE,IAAM,kDACVF,IAAI5B,OAAQ,EACZ4B,IAAIG,GAAK,SACTH,IAAII,IAAM,cACNC,eAAiB7D,SAAS8D,qBAAqB,UAAU,GAC7DD,eAAeE,WAAWC,aAAaR,IAAKK,oBACxCI,SAAWC,aAAY,KACnBb,OAAOC,MACPa,cAAcF,UACdZ,OAAOC,IAAIC,KAAKlC,kBAErB,MAUXkB,OACIvD,OAAOuD,YACFM,QAAS,sBASR7D,OAAOyD,aACRI,QAAS,EAOlBuB,KAAKC,WACDrF,OAAOyD,QACPzD,OAAOwD,KAAK6B,WAQhBC,KAAK9B,aACDxD,OAAOwD,KAAKA,WACPM,OAAQ,sCACC,gBAAiB,CAACN,KAAMA,OAC/BA,KAOX+B,wBACWvF,OAAOwD,OAOlBgC,qBACWxF,OAAOiD,WAOlBwC,mBACQvE,KAAK2C,QAGiB,WAAnB7D,OAAO0F,QAOlBC,mBACQzE,KAAK2C,QAGiB,YAAnB7D,OAAO0F,QAOlBE,iBACW1E,KAAK4C,MAShBf,eACW/C,OAAO6F,SAMlBC,UACI9F,OAAOoB,SAOX2E,kBACW/F,OAAO0F,QAOlBM,QAAQ7B,MACJnE,OAAOiG,aAAa9B,MAKxBb,OACItD,OAAOsD,OAKX4C,SACIlG,OAAO4D,SACP5D,OAAOmG,OAAO,GAOlBC,wBACWpG,OAQXqG,WAAW9F,gBACPP,OAAOsG,aAAa/F,6CACN,yBAA0B,CAACA,QAASA,UAC3CA,QAUXgG,qBACW,CACHC,UAAW,CAAC,OAAQ,MAAO,MAAO,MAAO,OAAQ,QACjDC,eAAgB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,MAC1DC,eAAyC,QAAzB1G,OAAOsG,eAA2B,EAAItG,OAAOsG"}