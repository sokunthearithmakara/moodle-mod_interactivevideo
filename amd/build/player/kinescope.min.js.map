{"version":3,"file":"kinescope.min.js","sources":["../../src/player/kinescope.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Kinescope Player class\n *\n * @module     mod_interactivevideo/player/kinescope\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\n\nclass Kinescope {\n    /**\n     * Constructor for the Kinescope player.\n     */\n    constructor() {\n        this.type = 'kinescope';\n        this.useAnimationFrame = false;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n        this.frequency = 0.3;\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        // Sample video: https://kinescope.io/{token}\n        let regex = /kinescope\\.io\\/(.*)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        this.videoId = videoId;\n        let self = this;\n        return new Promise((resolve) => {\n            const playerEvents = function(playerFactory) {\n                window.playerFactory\n                    .create(node, {\n                        url: 'https://kinescope.io/' + videoId,\n                        behaviour: {\n                            playsInline: true,\n                            keyboard: false,\n                            localStorage: false,\n                            preload: true,\n                        },\n                        ui: {\n                            controls: true,\n                        }\n                    })\n                    .then(function(pl) {\n                        pl.off();\n                        pl.on(pl.Events.Ready, async function(event) {\n                            player[node] = event.target;\n                            let totaltime = Number(event.data.duration.toFixed(2));\n                            // Scrap the video url to get the video title and poster image in the head.\n                            const response = await fetch(url);\n                            const data = await response.text();\n                            let parser = new DOMParser();\n                            let doc = parser.parseFromString(data, 'text/html');\n                            let page = $(doc);\n                            let title = page.find('meta[property=\"og:title\"]').attr('content');\n                            let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                            self.title = title;\n                            self.posterImage = poster;\n                            resolve({\n                                duration: totaltime,\n                                title: title,\n                                posterImage: poster,\n                            });\n                        });\n                    });\n            };\n\n            // Create a player instance.\n            if (!window.playerFactory) {\n                var tag = document.createElement('script');\n                tag.src = 'https://player.kinescope.io/latest/iframe.player.js';\n                tag.async = true;\n                tag.as = \"script\";\n                tag.rel = \"preload\";\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                window.onKinescopeIframeAPIReady = async function(playerFactory) {\n                    window.playerFactory = playerFactory;\n                    playerEvents(playerFactory);\n                };\n            } else {\n                $(`#${node}`).replaceWith(`<iframe id=\"${node}\" class=\"kinescope-player\"></iframe>`);\n                playerEvents(window.playerFactory);\n            }\n        });\n    }\n    /**\n     * Load a Sprout Video player instance.\n     * Documented at https://kinescope.notion.site/Kinescope-Player-Docs-4e1ecb05be98469da3367ddb71edd9d8\n     *\n     * @param {string} url - The URL of the Sprout Video video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.start = start;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        // Sample video: https://kinescope.io/{token}\n        let regex = /kinescope\\.io\\/(.*)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        this.videoId = videoId;\n        let ready = false;\n        let self = this;\n        self.aspectratio = 16 / 9;\n        const playerEvents = function(playerFactory) {\n            playerFactory\n                .create(node, {\n                    url: 'https://kinescope.io/' + videoId,\n                    behaviour: {\n                        playsInline: true,\n                        keyboard: false,\n                        localStorage: false,\n                        preload: true,\n                    },\n                    ui: {\n                        controls: showControls,\n                    }\n                })\n                .then(function(pl) {\n                    pl.on(pl.Events.Ready, async function(event) {\n                        player[node] = event.target;\n                        let totaltime = Number(event.data.duration.toFixed(2)) - self.frequency;\n                        end = !end ? totaltime : Math.min(end, totaltime);\n                        end = Number(end.toFixed(2));\n                        self.aspectratio = event.data.aspectRatio.ratio;\n                        self.end = end;\n                        self.totaltime = Number(totaltime.toFixed(2));\n                        self.duration = self.end - self.start;\n                        self.texttracks = event.data.textTracks;\n                        self.qualities = event.data.qualities;\n                        // Handle text tracks.\n                        player[node].disableTextTrack();\n                        let tracks = [];\n                        if (self.texttracks.length > 0) {\n                            self.texttracks.forEach((track) => {\n                                tracks.push({\n                                    label: track.label,\n                                    code: track.language,\n                                });\n                            });\n                            self.captions = tracks;\n                        }\n\n                        dispatchEvent('iv:playerLoaded', {\n                            tracks: tracks,\n                            qualities: self.getQualities(),\n                            reloaded: reloaded,\n                        });\n\n                        // Scrap the video url to get the video title and poster image in the head.\n                        if (opts.editform) {\n                            const response = await fetch(url);\n                            const data = await response.text();\n                            let parser = new DOMParser();\n                            let doc = parser.parseFromString(data, 'text/html');\n                            let page = $(doc);\n                            let title = page.find('meta[property=\"og:title\"]').attr('content');\n                            let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                            self.title = title;\n                            self.posterImage = poster;\n                        }\n                        await player[node].seekTo(start);\n                        await player[node].pause();\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    });\n                    pl.on(pl.Events.Play, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        self.paused = false;\n                        self.ended = false;\n                        dispatchEvent('iv:playerPlay');\n                        const time = await player[node].getCurrentTime();\n                        if (time >= end) {\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                        }\n                    });\n                    pl.on(pl.Events.Pause, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        self.paused = true;\n                        dispatchEvent('iv:playerPaused');\n                    });\n                    pl.on(pl.Events.Ended, function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        self.ended = true;\n                        self.paused = true;\n                        dispatchEvent('iv:playerEnded');\n                    });\n                    pl.on(pl.Events.TimeUpdate, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        let currentTime = await player[node].getCurrentTime();\n                        if (currentTime < start) {\n                            await player[node].seekTo(start);\n                            self.ended = false;\n                        }\n                        if (currentTime > end + self.frequency) {\n                            await player[node].seekTo(end - self.frequency);\n                            return;\n                        }\n                        if (currentTime >= end) {\n                            self.ended = true;\n                            await player[node].seekTo(end);\n                            dispatchEvent('iv:playerEnded');\n                        } else if (!self.paused) {\n                            self.paused = false;\n                            dispatchEvent('iv:playerPlaying');\n                        };\n                    });\n                    pl.on(pl.Events.QualityChanged, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        dispatchEvent('iv:playerQualityChange', {quality: event.quality});\n                    })\n                    pl.on(pl.Events.PlaybackRateChange, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        dispatchEvent('iv:playerSpeedChange', {rate: event.playbackRate});\n                    });\n                    pl.on(pl.Events.Waiting, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        dispatchEvent('iv:playerBuffering');\n                    });\n                    pl.on(pl.Events.VolumeChange, async function(event) {\n                        if (!ready) {\n                            return;\n                        }\n                        dispatchEvent('iv:playerVolumeChange', {volume: event.data.muted ? 0 : 1});\n                    });\n                });\n        };\n\n        // Create a player instance.\n        if (!window.Kinescope) {\n            var tag = document.createElement('script');\n            tag.src = 'https://player.kinescope.io/latest/iframe.player.js';\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            window.onKinescopeIframeAPIReady = async function(playerFactory) {\n                window.playerFactory = playerFactory;\n                playerEvents(playerFactory);\n            };\n        } else {\n            // Create an iframe.\n            let $parent = $(`#${node}`).parent();\n            $parent.html(`<iframe id=\"${node}\"></iframe>`);\n            playerEvents(window.playerFactory);\n        }\n    }\n    /**\n     * Plays the video using the Sprout Video player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    async play() {\n        if (!player[this.node]) {\n            return;\n        }\n        await player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Sprout Video player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        await player[this.node].pause();\n        this.paused = true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seekTo(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        player[this.node].seekTo(parseFloat(time));\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return await player[this.node].getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        const duration = await player[this.node].getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Sprout Video player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        let paused = await player[this.node].isPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Sprout Video player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        let paused = await player[this.node].isPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Sprout Video player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.ended) {\n            return true;\n        }\n        let ended = await player[this.node].isEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n    /**\n     * Destroys the Sprout Video player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    async destroy() {\n        if (player[this.node]) {\n            player[this.node].off();\n            player[this.node].destroy();\n        } else {\n            $(`#${this.node}`).remove();\n        }\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        const paused = await player[this.node].isPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Sprout Video player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Sprout Video player.\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Sprout Video player by setting the volume to 0.\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].mute();\n    }\n    /**\n     * Unmutes the Sprout Video player by setting the volume to 1.\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].unmute();\n        player[this.node].setVolume(1);\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return player[this.node].isMuted();\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    async setQuality(quality) {\n        if (!player[this.node]) {\n            return quality;\n        }\n        await player[this.node].setVideoQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        if (!player[this.node]) {\n            return null;\n        }\n        let qualities = await player[this.node].getVideoQualityList();\n        let keys = qualities;\n        let values = qualities.map(x => x == 'auto' ? 'Auto' : x);\n        let current = await player[this.node].getCurrentVideoQuality();\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *  @param {String} language\n     */\n    async setCaption(language) {\n        if (!player[this.node]) {\n            return null;\n        }\n        if (language === 'off' || language === '') {\n            await player[this.node].disableTextTrack();\n        } else {\n            await player[this.node].enableTextTrack(language);\n        }\n        return language;\n    }\n\n    /**\n     * Returns the original Sprout Video player instance.\n     *\n     * @returns {Object} The Sprout Video player instance.\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n}\n\nexport default Kinescope;"],"names":["player","constructor","type","useAnimationFrame","support","playbackrate","quality","password","frequency","url","node","videoId","exec","self","this","Promise","resolve","playerEvents","playerFactory","window","create","behaviour","playsInline","keyboard","localStorage","preload","ui","controls","then","pl","off","on","Events","Ready","async","event","target","totaltime","Number","data","duration","toFixed","response","fetch","text","doc","DOMParser","parseFromString","page","title","find","attr","poster","posterImage","replaceWith","tag","document","createElement","src","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onKinescopeIframeAPIReady","start","end","opts","reloaded","showControls","allowAutoplay","getElementById","ready","aspectratio","Math","min","aspectRatio","ratio","texttracks","textTracks","qualities","disableTextTrack","tracks","length","forEach","track","push","label","code","language","captions","getQualities","editform","seekTo","pause","Play","paused","ended","getCurrentTime","Pause","Ended","TimeUpdate","currentTime","QualityChanged","PlaybackRateChange","rate","playbackRate","Waiting","VolumeChange","volume","muted","Kinescope","parent","html","play","stop","starttime","seek","time","parseFloat","getDuration","isPaused","isEnded","destroy","remove","setRate","setPlaybackRate","mute","unMute","unmute","setVolume","isMuted","setVideoQuality","getVideoQualityList","qualitiesLabel","map","x","currentQuality","getCurrentVideoQuality","enableTextTrack","originalPlayer"],"mappings":"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"}