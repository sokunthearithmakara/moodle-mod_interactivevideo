{"version":3,"file":"rutube.min.js","sources":["../../src/player/rutube.js"],"sourcesContent":["/* eslint-disable */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Rutube Player class\n *\n * @module     mod_interactivevideo/player/rutube\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player;\n\nclass Rutube {\n    /**\n     * Constructs a Rutube player instance.\n     */\n    constructor() {\n        this.type = 'rutube';\n        this.useAnimationFrame = true;\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n    }\n    /**\n     * Load a Rutube player instance.\n     * Documented at https://rutube.ru/info/embed\n     *\n     * @param {string} url - The URL of the Rutube video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        this.aspectratio = 16 / 9;\n        // Sample video: https://rutube.ru/video/9235cf652dcb9d29fb02f3f6692d2a47\n        // Private video: https://rutube.ru/video/private/9235cf652dcb9d29fb02f3f6692d2a47/?p=sdf234234234\n        const regex = /https:\\/\\/rutube\\.ru\\/video\\/(?:private\\/)?(.+)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        // Get the value of the private key url parameter.\n        let privateKey = '';\n        let keys = url.split('/?p=');\n        if (keys.length > 1) {\n            privateKey = keys[1];\n            privateKey = privateKey.split('&')[0];\n        }\n        videoId = videoId.split(\"?\")[0];\n        this.videoId = videoId;\n        let ready = false;\n        let self = this;\n        let started = false;\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            data: {\n                action: 'get_from_url',\n                contextid: M.cfg.contextid,\n                url: `https://rutube.ru/api/play/options/${videoId}${privateKey != '' ? `?p=${privateKey}` : ''}`,\n                sesskey: M.cfg.sesskey,\n            },\n        }).done(function(data) {\n            if (data.html === undefined) {\n                dispatchEvent('iv:playerError', {error: data});\n            }\n            self.posterImage = data.thumbnail_url;\n            let totaltime = data.duration / 1000 - self.frequency;\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = Number(totaltime.toFixed(2));\n            self.duration = self.end - self.start;\n            self.currentTime = self.start;\n            let html = $(data.html);\n            self.aspectratio = html.attr('width') / html.attr('height');\n            self.title = data.title;\n            let iframeurl = `https://rutube.ru/play/embed/${videoId}${privateKey != '' ? `?p=${privateKey}` : ''}`;\n            $(`#${node}`).replaceWith(`<iframe id=\"player\" src=\"${iframeurl}\" frameBorder=\"0\" allow=\"clipboard-write; autoplay\"\n                 webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>`);\n\n            player = document.getElementById('player');\n            self.player = player;\n\n            window.addEventListener('message', function(event) {\n                var message = '';\n                try {\n                    message = JSON.parse(event.data);\n                } catch (e) {\n                    return;\n                }\n                switch (message.type) {\n                    case 'player:changeState':\n                        if (message.data.state === 'playing') {\n                            let currentTime = self.currentTime;\n                            if (currentTime < self.start) {\n                                self.seek(self.start);\n                                self.ended = false;\n                                self.paused = false;\n                                dispatchEvent('iv:playerPlaying');\n                                return;\n                            }\n                            if (!self.ended && currentTime >= self.end) {\n                                self.ended = true;\n                                self.paused = true;\n                                dispatchEvent('iv:playerEnded');\n                                return;\n                            }\n                            self.paused = false;\n                            self.ended = false;\n                            dispatchEvent('iv:playerPlaying');\n                        } else if (message.data.state === 'paused') {\n                            self.paused = true;\n                            dispatchEvent('iv:playerPaused');\n                        } else if (message.data.state === 'ended' || message.data.state === 'stopped') {\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                        }\n                        break;\n                    case 'player:ready':\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        break;\n                    case 'player:currentTime':\n                        self.currentTime = message.data.time;\n                        if (self.currentTime < self.start) {\n                            self.currentTime = self.start;\n                            self.seek(self.start);\n                        }\n                        if (self.currentTime > self.end + self.frequency) {\n                            self.seek(self.end - self.frequency);\n                        }\n                        if (self.state === 'paused') {\n                            dispatchEvent('iv:playerSeek', {time: self.currentTime});\n                        }\n                        break;\n                    case 'player:rollState':\n                        if (message.data.state === 'play') { // Ad started\n                            $(\".video-block, #video-block\").addClass('d-none');\n                            $(\"#start-screen\").addClass('bg-transparent d-none');\n                            $('#annotation-canvas').removeClass('d-none');\n                        } else if (message.data.state === 'complete') { // Ad complete/error\n                            $(\".video-block, #video-block\").removeClass('d-none');\n                            $(\"#start-screen\").removeClass('bg-transparent d-none');\n                        }\n                        break;\n                    case 'player:error':\n                        dispatchEvent('iv:playerError', {error: message.data});\n                        break;\n                };\n            });\n        }).catch(function(error) {\n            dispatchEvent('iv:playerError', {error: error});\n        });\n    }\n    doCommand(commandJSON) {\n        return player.contentWindow.postMessage(JSON.stringify(commandJSON), '*');\n    }\n    /**\n     * Plays the video using the Rutube player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        this.doCommand({type: 'player:play', data: {}});\n        this.paused = false;\n    }\n    /**\n     * Pauses the Rutube player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        await this.doCommand({type: 'player:pause', data: {}});\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        this.doCommand({type: 'player:stop', data: {}});\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    seek(time) {\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        this.doCommand({type: 'player:setCurrentTime', data: {time}});\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    getCurrentTime() {\n        return this.currentTime;\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    getDuration() {\n        let duration = this.totaltime;\n        return duration;\n    }\n    /**\n     * Checks if the Rutube player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    isPaused() {\n        return this.paused;\n    }\n    /**\n     * Checks if the Rutube player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Checks if the Rutube player has ended.\n     *\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    isEnded() {\n        return this.ended || this.currentTime >= this.end;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroys the Rutube player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        $(this.player).remove();\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        const paused = await player.isPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Rutube player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Rutube player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Rutube player by setting the volume to 0.\n     */\n    mute() {\n        this.doCommand({type: 'player:mute', data: {}});\n    }\n    /**\n     * Unmutes the Rutube player by setting the volume to 1.\n     */\n    unMute() {\n        this.doCommand({type: 'player:unMute', data: {}});\n        this.doCommand({type: 'player:setVolume', data: {volume: 1}});\n    }\n\n    /**\n     * Set quality of the video (NOT IMPLEMENTED)\n     * @param {String} quality\n     */\n    async setQuality(quality) {\n        return false;\n    }\n    /**\n     * Get the available qualities of the video (NOT IMPLEMENTED)\n     */\n    async getQualities() {\n        return [];\n    }\n\n    /**\n     * Set subtitle of the video (NOT IMPLEMENTED)\n     *  @param {String} language\n     */\n    async setCaption(language) {\n        return false;\n    }\n\n    /**\n     * Returns the original Rutube player instance.\n     *\n     * @returns {Object} The Rutube player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Rutube;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","url","start","end","opts","showControls","node","allowAutoplay","document","getElementById","this","aspectratio","videoId","exec","privateKey","keys","split","length","self","ajax","M","cfg","wwwroot","data","action","contextid","sesskey","done","undefined","html","error","posterImage","thumbnail_url","totaltime","duration","Math","min","Number","toFixed","currentTime","attr","title","iframeurl","replaceWith","window","addEventListener","event","message","JSON","parse","e","state","seek","ended","paused","time","addClass","removeClass","catch","doCommand","commandJSON","contentWindow","postMessage","stringify","play","stop","starttime","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","ratio","destroy","remove","setRate","rate","setPlaybackRate","mute","unMute","volume","language","originalPlayer"],"mappings":"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"}