{"version":3,"file":"panopto.min.js","sources":["../../src/player/panopto.js"],"sourcesContent":["/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Panopto Player class\n *\n * @module     mod_interactivevideo/player/panopto\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport {getString} from 'core/str';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player = {};\nclass Panopto {\n    /**\n     * Constructor of the Panopto player.\n     */\n    constructor() {\n        this.useAnimationFrame = true;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default panopto\n         * @private\n         * @readonly\n         */\n        this.type = 'panopto';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n    }\n\n    async getInfo(url, node) {\n        this.node = node;\n        var EmbedApi;\n        const matches = url.match(/^[^/]+:\\/\\/([^/]*panopto\\.[^/]+)\\/Panopto\\/.+\\?id=(.+)$/);\n        const serverName = matches[1];\n        const sessionId = matches[2];\n        return new Promise((resolve) => {\n            const launchSetup = function() {\n                player[node].unmuteVideo();\n                player[node].setVolume(1);\n                let totaltime = Number(player[node].getDuration().toFixed(2));\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    type: 'POST',\n                    dataType: 'text/plain',\n                    data: {\n                        action: 'get_from_url',\n                        contextid: M.cfg.contextid,\n                        url: url,\n                        sesskey: M.cfg.sesskey,\n                    },\n                    complete: function(res) {\n                        // Get title and poster image from the video.\n                        let parser = new DOMParser();\n                        let doc = parser.parseFromString(res.responseText, 'text/html');\n                        let page = $(doc);\n                        let title = page.find('meta[property=\"og:title\"]').attr('content');\n                        let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                        resolve({\n                            duration: totaltime,\n                            title: title,\n                            posterImage: poster,\n                        });\n                    }\n                });\n            };\n            var options = {\n                sessionId,\n                serverName,\n                width: 1080,\n                height: 720,\n                videoParams: {\n                    interactivity: 'none',\n                    showtitle: false,\n                    autohide: true,\n                    offerviewer: false,\n                    autoplay: true,\n                    showbrand: false,\n                },\n                events: {\n                    onReady: function() { // When video is ready to play.\n                        player[node].muteVideo();\n                        player[node].pauseVideo();\n                        launchSetup();\n                    },\n                }\n            };\n\n            if (!window.EmbedApi) {\n                var tag = document.createElement('script');\n                tag.src = \"https://developers.panopto.com/scripts/embedapi.min.js\";\n                tag.type = 'text/javascript';\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n                window.onPanoptoEmbedApiReady = function() {\n                    EmbedApi = window.EmbedApi;\n                    player[node] = new EmbedApi(node, options);\n                };\n            } else {\n                player[node] = new window.EmbedApi(node, options);\n            }\n        });\n    }\n\n    /**\n     * Creates an instance of the Panopto player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the Panopto video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     * @param {boolean} reloaded\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        let showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n            // ShowControls = true;\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://support.panopto.com/s/article/Learn-About-Panopto-Embed-API\n        var EmbedApi;\n        const matches = url.match(/^[^/]+:\\/\\/([^/]*panopto\\.[^/]+)\\/Panopto\\/.+\\?id=(.+)$/);\n        const serverName = matches[1];\n        const sessionId = matches[2];\n\n        var ready = false;\n        var self = this;\n        self.aspectratio = 16 / 9;\n        let autoplayBlocked = false;\n        const launchSetup = function() {\n            player[node].unmuteVideo();\n            player[node].setVolume(1);\n            let totaltime = Number(player[node].getDuration().toFixed(2)) - self.frequency;\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            if (opts.editform) { // Get title and poster image from the video if it's in edit form.\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    type: 'POST',\n                    dataType: 'text/plain',\n                    data: {\n                        action: 'get_from_url',\n                        contextid: M.cfg.contextid,\n                        url: url,\n                        sesskey: M.cfg.sesskey,\n                    },\n                    complete: function(res) {\n                        // Get title and poster image from the video.\n                        let parser = new DOMParser();\n                        let doc = parser.parseFromString(res.responseText, 'text/html');\n                        let page = $(doc);\n                        let title = page.find('meta[property=\"og:title\"]').attr('content');\n                        let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                        self.title = title;\n                        self.posterImage = poster;\n                        if (!ready) {\n                            ready = true;\n                            if (!autoplayBlocked) {\n                                autoplayBlocked = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                            }\n                            if (!showControls) {\n                                $('.video-block, #video-block').removeClass('no-pointer');\n                            }\n                        }\n                    }\n                });\n            } else {\n                let tracks = player[node].getCaptionTracks();\n                player[node].disableCaptions();\n                if (tracks && tracks.length > 0) {\n                    tracks = tracks.map((track, i) => {\n                        return {\n                            label: track,\n                            code: 'code-' + i,\n                        };\n                    });\n                    dispatchEvent('iv:playerLoaded', {tracks, reloaded: reloaded});\n                }\n                if (!ready) {\n                    ready = true;\n                    if (!autoplayBlocked) {\n                        autoplayBlocked = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    }\n                    if (!showControls) {\n                        $('.video-block, #video-block').removeClass('no-pointer');\n                    }\n                }\n            }\n        };\n        var options = {\n            sessionId,\n            serverName,\n            width: 1080,\n            height: 720,\n            videoParams: {\n                interactivity: 'none',\n                showtitle: false,\n                autohide: true,\n                offerviewer: false,\n                autoplay: true,\n                showbrand: false,\n                start: start,\n                hideoverlay: !showControls,\n            },\n            events: {\n                onReady: function() { // When video is ready to play.\n                    // Do nothing.\n                    if (!ready) {\n                        player[node].muteVideo();\n                        player[node].pauseVideo();\n                        launchSetup();\n                    }\n                },\n                onIframeReady: async function() { // Iframe is ready, but the video isn't ready yet. (e.g. blocked by the browser)\n                    player[node].muteVideo();\n                    player[node].loadVideo();\n                    player[node].pauseVideo(); // If the autoplay is blocked by the browser, we'll get the error event. See onError.\n                },\n                onStateChange: function(state) {\n                    if (ready === false) {\n                        player[node].pauseVideo();\n                        return;\n                    }\n                    switch (state) {\n                        case PlayerState.Ended:\n                            self.ended = true;\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case PlayerState.Playing:\n                            if (player[node].getCurrentTime() >= self.end || player[node].getCurrentTime() < self.start) {\n                                player[node].seekTo(self.start);\n                            }\n                            dispatchEvent('iv:playerPlay');\n                            dispatchEvent('iv:playerPlaying');\n                            self.ended = false;\n                            this.paused = false;\n                            break;\n                        case PlayerState.Paused:\n                            this.paused = true;\n                            if (!self.ended && player[node].getCurrentTime() >= self.end - self.frequency) {\n                                dispatchEvent('iv:playerEnded');\n                                self.ended = true;\n                                return;\n                            }\n                            dispatchEvent('iv:playerPaused');\n                            self.ended = false;\n                            break;\n                    }\n                },\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e});\n                },\n                onError: async function(error) {\n                    if (error === 'playNotAllowed') {\n                        $('#start-screen #play').removeClass('d-none');\n                        $('#start-screen #spinner').remove();\n                        $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                        // $('#start-screen').addClass('no-pointer');\n                        $('#annotation-canvas').removeClass('d-none w-0');\n                        if (opts.editform) {\n                            if (!ready) {\n                                const errorString = await getString('errorplaynotallowed', 'mod_interactivevideo');\n                                $('#video-wrapper')\n                                    .after(`<div class=\"noautoplay small text-danger mt-n3 mb-3\">${errorString}</div>`);\n\n                            }\n                        } else {\n                            if (!autoplayBlocked) {\n                                autoplayBlocked = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                            }\n                        }\n                        return;\n                    } else if (error === 'playWithSoundNotAllowed') {\n                        if (!ready) {\n                            player[node].muteVideo();\n                        }\n                        return;\n                    }\n                    dispatchEvent('iv:playerError', {error});\n                },\n                onLoginShown: function() {\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none w-0');\n                }\n            }\n        };\n\n        if (!window.EmbedApi) {\n            var tag = document.createElement('script');\n            tag.src = \"https://developers.panopto.com/scripts/embedapi.min.js\";\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.onPanoptoEmbedApiReady = function() {\n                EmbedApi = window.EmbedApi;\n                player[node] = new EmbedApi(node, options);\n            };\n        } else {\n            player[node] = new window.EmbedApi(node, options);\n        }\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].playVideo();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pauseVideo();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seekTo(starttime);\n        player[this.node].pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        let currentTime = this.getCurrentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        this.ended = false;\n        return new Promise((resolve) => {\n            player[this.node].seekTo(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        return player[this.node].getState() == PlayerState.Paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        return player[this.node].getState() == PlayerState.Playing;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.ended) {\n            return true;\n        }\n        return player[this.node].getState() == PlayerState.Ended || player[this.node].getCurrentTime() >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // PANOPTO always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        $(`#${this.node}`).remove();\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        // eslint-disable-next-line no-nested-ternary\n        return player[this.node].getState() === 1 ? 'playing' : player[this.node].getState() === 2 ? 'paused' : 'stopped';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return rate;\n        }\n        player[this.node].setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].muteVideo();\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].unmuteVideo();\n        player[this.node].setVolume(1);\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return player[this.node].isMuted();\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return;\n        }\n        if (player[this.node].hasCaptions() === false) {\n            return;\n        }\n        if (!track || track === '') {\n            player[this.node].disableCaptions();\n            return;\n        }\n        track = track.replace('code-', '');\n        player[this.node].enableCaptions(track);\n    }\n}\n\nexport default Panopto;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","url","node","EmbedApi","matches","match","serverName","sessionId","Promise","resolve","options","width","height","videoParams","interactivity","showtitle","autohide","offerviewer","autoplay","showbrand","events","onReady","muteVideo","pauseVideo","unmuteVideo","setVolume","totaltime","Number","getDuration","toFixed","ajax","M","cfg","wwwroot","dataType","data","action","contextid","sesskey","complete","res","doc","DOMParser","parseFromString","responseText","page","title","find","attr","poster","duration","posterImage","launchSetup","window","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onPanoptoEmbedApiReady","start","end","opts","reloaded","showControls","allowAutoplay","getElementById","this","requireVideoBlock","ready","self","aspectratio","autoplayBlocked","hideoverlay","Math","min","editform","removeClass","tracks","getCaptionTracks","disableCaptions","length","map","track","i","label","code","onIframeReady","async","loadVideo","onStateChange","state","PlayerState","Ended","ended","Playing","getCurrentTime","seekTo","paused","Paused","onPlaybackRateChange","e","rate","onError","error","remove","addClass","errorString","after","onLoginShown","play","playVideo","pause","stop","starttime","time","currentTime","isPaused","getState","isPlaying","isEnded","ratio","destroy","setRate","setPlaybackRate","mute","volume","unMute","isMuted","originalPlayer","setCaption","hasCaptions","replace","enableCaptions"],"mappings":"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"}