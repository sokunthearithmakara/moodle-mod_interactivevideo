{"version":3,"file":"panopto.min.js","sources":["../../src/player/panopto.js"],"sourcesContent":["/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Panopto Player class\n *\n * @module     mod_interactivevideo/player/panopto\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nvar player;\nclass Panopto {\n    /**\n     * Constructor of the Panopto player.\n     */\n    constructor() {\n        this.useAnimationFrame = true;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default panopto\n         * @private\n         * @readonly\n         */\n        this.type = 'panopto';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n    }\n    /**\n     * Creates an instance of the Panopto player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the Panopto video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://support.panopto.com/s/article/Learn-About-Panopto-Embed-API\n        var EmbedApi;\n        const matches = url.match(/^[^\\/]+:\\/\\/([^\\/]*panopto\\.[^\\/]+)\\/Panopto\\/.+\\?id=(.+)$/);\n        const serverName = matches[1];\n        const sessionId = matches[2];\n\n        var ready = false;\n        var self = this;\n        self.aspectratio = 16 / 9;\n        var options = {\n            sessionId,\n            serverName,\n            width: 1080,\n            height: 720,\n            videoParams: {\n                interactivity: 'none',\n                showtitle: false,\n                autohide: true,\n                offerviewer: false,\n                autoplay: true,\n                showbrand: false,\n                start: start,\n                hideoverlay: !showControls,\n            },\n            events: {\n                onReady: function() {\n                    // Do nothing.\n                },\n                onIframeReady: async function() {\n                    player.loadVideo();\n                    $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        type: 'POST',\n                        dataType: 'text/plain',\n                        data: {\n                            action: 'get_from_url',\n                            contextid: M.cfg.contextid,\n                            url: url,\n                            sesskey: M.cfg.sesskey,\n                        },\n                        complete: function(res) {\n                            player.pauseVideo();\n                            // We don't want to reach the end of the video to avoid any issue restarting the video.\n                            let totaltime = Number(player.getDuration().toFixed(2)) - self.frequency;\n                            end = !end ? totaltime : Math.min(end, totaltime);\n                            end = Number(end.toFixed(2));\n                            self.end = end;\n                            self.totaltime = totaltime;\n                            self.duration = self.end - self.start;\n                            let tracks = player.getCaptionTracks();\n                            player.disableCaptions();\n                            if (tracks && tracks.length > 0) {\n                                tracks = tracks.map((track, i) => {\n                                    return {\n                                        label: track,\n                                        code: 'code-' + i,\n                                    };\n                                });\n                                dispatchEvent('iv:playerLoaded', {tracks});\n                            }\n                            // Get title and poster image from the video.\n                            let parser = new DOMParser();\n                            let doc = parser.parseFromString(res.responseText, 'text/html');\n                            let page = $(doc);\n                            let title = page.find('meta[property=\"og:title\"]').attr('content');\n                            let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                            self.title = title;\n                            self.posterImage = poster;\n                            ready = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                    });\n                },\n                onStateChange: function(state) {\n                    if (ready === false) {\n                        player.pauseVideo();\n                        return;\n                    }\n                    switch (state) {\n                        case PlayerState.Ended:\n                            self.ended = true;\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case PlayerState.Playing:\n                            if (player.getCurrentTime() >= self.end || player.getCurrentTime() < self.start) {\n                                player.seekTo(self.start);\n                            }\n                            dispatchEvent('iv:playerPlaying');\n                            self.ended = false;\n                            this.paused = false;\n                            break;\n                        case PlayerState.Paused:\n                            this.paused = true;\n                            if (!self.ended && player.getCurrentTime() >= self.end - self.frequency) {\n                                dispatchEvent('iv:playerEnded');\n                                self.ended = true;\n                                return;\n                            }\n                            dispatchEvent('iv:playerPaused');\n                            self.ended = false;\n                            break;\n                    }\n                },\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e});\n                },\n                onError: function(error) {\n                    dispatchEvent('iv:playerError', {error});\n                },\n            }\n        };\n\n        if (!window.EmbedApi) {\n            var tag = document.createElement('script');\n            tag.src = \"https://developers.panopto.com/scripts/embedapi.min.js\";\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.onPanoptoEmbedApiReady = function() {\n                EmbedApi = window.EmbedApi;\n                player = new EmbedApi(node, options);\n            };\n        } else {\n            player = new window.EmbedApi(node, options);\n        }\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.playVideo();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pauseVideo();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        return new Promise((resolve) => {\n            player.seekTo(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return player.getState() == PlayerState.Paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return player.getState() == PlayerState.Playing;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        return player.getState() == PlayerState.Ended || player.getCurrentTime() >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // PANOPTO always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        player = null;\n        $(`#player`).remove();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return player.getState() === 1 ? 'playing' : player.getState() === 2 ? 'paused' : 'stopped';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.muteVideo();\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.unmuteVideo();\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (player.hasCaptions() === false) {\n            return;\n        }\n        if (!track) {\n            player.disableCaptions();\n            return;\n        }\n        track = track.replace('code-', '');\n\n        player.enableCaptions(track);\n    }\n}\n\nexport default Panopto;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","load","url","start","end","opts","showControls","node","EmbedApi","matches","match","serverName","sessionId","ready","self","this","aspectratio","options","width","height","videoParams","interactivity","showtitle","autohide","offerviewer","autoplay","showbrand","hideoverlay","events","onReady","onIframeReady","async","loadVideo","ajax","M","cfg","wwwroot","dataType","data","action","contextid","sesskey","complete","res","pauseVideo","totaltime","Number","getDuration","toFixed","Math","min","duration","tracks","getCaptionTracks","disableCaptions","length","map","track","i","label","code","doc","DOMParser","parseFromString","responseText","page","title","find","attr","poster","posterImage","onStateChange","state","PlayerState","Ended","ended","Playing","getCurrentTime","seekTo","paused","Paused","onPlaybackRateChange","e","rate","onError","error","window","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onPanoptoEmbedApiReady","play","playVideo","pause","stop","starttime","time","Promise","resolve","isPaused","getState","isPlaying","isEnded","ratio","destroy","remove","setRate","setPlaybackRate","mute","muteVideo","unMute","unmuteVideo","originalPlayer","setCaption","hasCaptions","replace","enableCaptions"],"mappings":"gJAyBIA;;;;;;;gKAKAC,mBACSC,mBAAoB,OAQpBC,KAAO,eAKPC,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,GAYjBC,KAAKC,IAAKC,MAAOC,SAAKC,4DAAO,SACnBC,aAAeD,KAAKC,eAAgB,EACpCC,KAAOF,KAAKE,MAAQ,aActBC,cARCL,MAAQA,WAKRC,IAAMA,UAILK,QAAUP,IAAIQ,MAAM,8DACpBC,WAAaF,QAAQ,GACrBG,UAAYH,QAAQ,OAEtBI,OAAQ,EACRC,KAAOC,KACXD,KAAKE,YAAc,GAAK,MACpBC,QAAU,CACVL,UAAAA,UACAD,WAAAA,WACAO,MAAO,KACPC,OAAQ,IACRC,YAAa,CACTC,cAAe,OACfC,WAAW,EACXC,UAAU,EACVC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXvB,MAAOA,MACPwB,aAAcrB,cAElBsB,OAAQ,CACJC,QAAS,aAGTC,cAAeC,iBACXtC,OAAOuC,4BACLC,KAAK,CACH/B,IAAKgC,EAAEC,IAAIC,QAAU,iCACrBxC,KAAM,OACNyC,SAAU,aACVC,KAAM,CACFC,OAAQ,eACRC,UAAWN,EAAEC,IAAIK,UACjBtC,IAAKA,IACLuC,QAASP,EAAEC,IAAIM,SAEnBC,SAAU,SAASC,KACflD,OAAOmD,iBAEHC,UAAYC,OAAOrD,OAAOsD,cAAcC,QAAQ,IAAMlC,KAAKjB,UAC/DO,IAAOA,IAAkB6C,KAAKC,IAAI9C,IAAKyC,WAA1BA,UACbzC,IAAM0C,OAAO1C,IAAI4C,QAAQ,IACzBlC,KAAKV,IAAMA,IACXU,KAAK+B,UAAYA,UACjB/B,KAAKqC,SAAWrC,KAAKV,IAAMU,KAAKX,UAC5BiD,OAAS3D,OAAO4D,mBACpB5D,OAAO6D,kBACHF,QAAUA,OAAOG,OAAS,IAC1BH,OAASA,OAAOI,KAAI,CAACC,MAAOC,KACjB,CACHC,MAAOF,MACPG,KAAM,QAAUF,0CAGV,kBAAmB,CAACN,OAAAA,cAIlCS,KADS,IAAIC,WACAC,gBAAgBpB,IAAIqB,aAAc,aAC/CC,MAAO,mBAAEJ,KACTK,MAAQD,KAAKE,KAAK,6BAA6BC,KAAK,WACpDC,OAASJ,KAAKE,KAAK,6BAA6BC,KAAK,WACzDtD,KAAKoD,MAAQA,MACbpD,KAAKwD,YAAcD,OACnBxD,OAAQ,sCACM,sBAI1B0D,cAAe,SAASC,WACN,IAAV3D,aAII2D,YACCC,YAAYC,MACb5D,KAAK6D,OAAQ,sCACC,6BAEbF,YAAYG,SACTnF,OAAOoF,kBAAoB/D,KAAKV,KAAOX,OAAOoF,iBAAmB/D,KAAKX,QACtEV,OAAOqF,OAAOhE,KAAKX,2CAET,oBACdW,KAAK6D,OAAQ,OACRI,QAAS,aAEbN,YAAYO,eACRD,QAAS,GACTjE,KAAK6D,OAASlF,OAAOoF,kBAAoB/D,KAAKV,IAAMU,KAAKjB,oDAC5C,uBACdiB,KAAK6D,OAAQ,uCAGH,mBACd7D,KAAK6D,OAAQ,OAxBjBlF,OAAOmD,cA4BfqC,qBAAsB,SAASC,uCACb,sBAAuB,CAACC,KAAMD,KAEhDE,QAAS,SAASC,2CACA,iBAAkB,CAACA,MAAAA,cAKxCC,OAAO9E,SAYRf,OAAS,IAAI6F,OAAO9E,SAASD,KAAMU,aAZjB,KACdsE,IAAMC,SAASC,cAAc,UACjCF,IAAIG,IAAM,yDACVH,IAAI3F,KAAO,sBACP+F,eAAiBH,SAASI,qBAAqB,UAAU,GAC7DD,eAAeE,WAAWC,aAAaP,IAAKI,gBAE5CL,OAAOS,uBAAyB,WAC5BvF,SAAW8E,OAAO9E,SAClBf,OAAS,IAAIe,SAASD,KAAMU,WAWxC+E,OACIvG,OAAOwG,iBACFlB,QAAS,EAMlBmB,QACIzG,OAAOmD,kBACFmC,QAAS,EAOlBoB,KAAKC,WACD3G,OAAOqF,OAAOsB,WACd3G,OAAOmD,wBAOAyD,aACA,IAAIC,SAASC,UAChB9G,OAAOqF,OAAOuB,MAAM,uCACN,gBAAiB,CAACA,KAAMA,OACtCE,SAAQ,MAOhB1B,wBACWpF,OAAOoF,iBAMlB9B,qBACWtD,OAAOsD,cAMlByD,mBACQzF,KAAKgE,QAGFtF,OAAOgH,YAAchC,YAAYO,OAM5C0B,mBACQ3F,KAAKgE,QAGFtF,OAAOgH,YAAchC,YAAYG,QAM5C+B,kBACQ5F,KAAK4D,QAGFlF,OAAOgH,YAAchC,YAAYC,OAASjF,OAAOoF,kBAAoB9D,KAAKX,KAMrFwG,eACW,GAAK,EAMhBC,UACIpH,OAAS,oCACIqH,6CACC,sBAMlBL,kBACiC,IAAtBhH,OAAOgH,WAAmB,UAAkC,IAAtBhH,OAAOgH,WAAmB,SAAW,UAMtFM,QAAQ5B,aACJ1F,OAAOuH,gBAAgB7B,MAChBA,KAKX8B,OACIxH,OAAOyH,YAKXC,SACI1H,OAAO2H,cAKXC,wBACW5H,OAOX6H,WAAW7D,QACsB,IAAzBhE,OAAO8H,gBAGN9D,OAILA,MAAQA,MAAM+D,QAAQ,QAAS,IAE/B/H,OAAOgI,eAAehE,QALlBhE,OAAO6D"}