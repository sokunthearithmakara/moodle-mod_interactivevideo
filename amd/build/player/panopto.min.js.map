{"version":3,"file":"panopto.min.js","sources":["../../src/player/panopto.js"],"sourcesContent":["/* eslint-disable no-undef */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Panopto Player class\n *\n * @module     mod_interactivevideo/player/panopto\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport {getString} from 'core/str';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player;\nclass Panopto {\n    /**\n     * Constructor of the Panopto player.\n     */\n    constructor() {\n        this.useAnimationFrame = true;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default panopto\n         * @private\n         * @readonly\n         */\n        this.type = 'panopto';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n    }\n    /**\n     * Creates an instance of the Panopto player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the Panopto video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        let showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n            // ShowControls = true;\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://support.panopto.com/s/article/Learn-About-Panopto-Embed-API\n        var EmbedApi;\n        const matches = url.match(/^[^\\/]+:\\/\\/([^\\/]*panopto\\.[^\\/]+)\\/Panopto\\/.+\\?id=(.+)$/);\n        const serverName = matches[1];\n        const sessionId = matches[2];\n\n        var ready = false;\n        var self = this;\n        self.aspectratio = 16 / 9;\n        let autoplayBlocked = false;\n        const launchSetup = function() {\n            player.unmuteVideo();\n            player.setVolume(1);\n            let totaltime = Number(player.getDuration().toFixed(2)) - self.frequency;\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            if (opts.editform) { // Get title and poster image from the video if it's in edit form.\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    type: 'POST',\n                    dataType: 'text/plain',\n                    data: {\n                        action: 'get_from_url',\n                        contextid: M.cfg.contextid,\n                        url: url,\n                        sesskey: M.cfg.sesskey,\n                    },\n                    complete: function(res) {\n                        // Get title and poster image from the video.\n                        let parser = new DOMParser();\n                        let doc = parser.parseFromString(res.responseText, 'text/html');\n                        let page = $(doc);\n                        let title = page.find('meta[property=\"og:title\"]').attr('content');\n                        let poster = page.find('meta[property=\"og:image\"]').attr('content');\n                        self.title = title;\n                        self.posterImage = poster;\n                        if (!ready) {\n                            ready = true;\n                            if (!autoplayBlocked) {\n                                autoplayBlocked = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                            }\n                            if (!showControls) {\n                                $('.video-block, #video-block').removeClass('no-pointer');\n                            }\n                        }\n                    }\n                });\n            } else {\n                let tracks = player.getCaptionTracks();\n                player.disableCaptions();\n                if (tracks && tracks.length > 0) {\n                    tracks = tracks.map((track, i) => {\n                        return {\n                            label: track,\n                            code: 'code-' + i,\n                        };\n                    });\n                    dispatchEvent('iv:playerLoaded', {tracks});\n                }\n                if (!ready) {\n                    ready = true;\n                    if (!autoplayBlocked) {\n                        autoplayBlocked = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    }\n                    if (!showControls) {\n                        $('.video-block, #video-block').removeClass('no-pointer');\n                    }\n                }\n            }\n        };\n        var options = {\n            sessionId,\n            serverName,\n            width: 1080,\n            height: 720,\n            videoParams: {\n                interactivity: 'none',\n                showtitle: false,\n                autohide: true,\n                offerviewer: false,\n                autoplay: true,\n                showbrand: false,\n                start: start,\n                hideoverlay: !showControls,\n            },\n            events: {\n                onReady: function() { // When video is ready to play.\n                    // Do nothing.\n                    if (!ready) {\n                        player.muteVideo();\n                        player.pauseVideo();\n                        launchSetup();\n                    }\n                },\n                onIframeReady: async function() { // Iframe is ready, but the video isn't ready yet. (e.g. blocked by the browser)\n                    player.muteVideo();\n                    player.loadVideo();\n                    player.pauseVideo(); // If the autoplay is blocked by the browser, we'll get the error event. See onError.\n                },\n                onStateChange: function(state) {\n                    if (ready === false) {\n                        player.pauseVideo();\n                        return;\n                    }\n                    switch (state) {\n                        case PlayerState.Ended:\n                            self.ended = true;\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case PlayerState.Playing:\n                            if (player.getCurrentTime() >= self.end || player.getCurrentTime() < self.start) {\n                                player.seekTo(self.start);\n                            }\n                            dispatchEvent('iv:playerPlaying');\n                            self.ended = false;\n                            this.paused = false;\n                            break;\n                        case PlayerState.Paused:\n                            this.paused = true;\n                            if (!self.ended && player.getCurrentTime() >= self.end - self.frequency) {\n                                dispatchEvent('iv:playerEnded');\n                                self.ended = true;\n                                return;\n                            }\n                            dispatchEvent('iv:playerPaused');\n                            self.ended = false;\n                            break;\n                    }\n                },\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e});\n                },\n                onError: async function(error) {\n                    if (error === 'playNotAllowed') {\n                        $('#start-screen #play').removeClass('d-none');\n                        $('#start-screen #spinner').remove();\n                        $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                        // $('#start-screen').addClass('no-pointer');\n                        $('#annotation-canvas').removeClass('d-none');\n                        if (opts.editform) {\n                            if (!ready) {\n                                const errorString = await getString('errorplaynotallowed', 'mod_interactivevideo');\n                                $('#video-wrapper')\n                                    .after(`<div class=\"noautoplay small text-danger mt-n3 mb-3\">${errorString}</div>`);\n\n                            }\n                        } else {\n                            if (!autoplayBlocked) {\n                                autoplayBlocked = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                            }\n                        }\n                        return;\n                    } else if (error === 'playWithSoundNotAllowed') {\n                        if (!ready) {\n                            player.muteVideo();\n                        }\n                        return;\n                    }\n                    dispatchEvent('iv:playerError', {error});\n                },\n                onLoginShown: function() {\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block, #video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none');\n                }\n            }\n        };\n\n        if (!window.EmbedApi) {\n            var tag = document.createElement('script');\n            tag.src = \"https://developers.panopto.com/scripts/embedapi.min.js\";\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.onPanoptoEmbedApiReady = function() {\n                EmbedApi = window.EmbedApi;\n                player = new EmbedApi(node, options);\n            };\n        } else {\n            player = new window.EmbedApi(node, options);\n        }\n    }\n\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.playVideo();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pauseVideo();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        this.ended = false;\n        return new Promise((resolve) => {\n            player.seekTo(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return player.getState() == PlayerState.Paused;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return player.getState() == PlayerState.Playing;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        return player.getState() == PlayerState.Ended || player.getCurrentTime() >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // PANOPTO always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        player = null;\n        $(`#player`).remove();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return player.getState() === 1 ? 'playing' : player.getState() === 2 ? 'paused' : 'stopped';\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.muteVideo();\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.unmuteVideo();\n        player.setVolume(1);\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (player.hasCaptions() === false) {\n            return;\n        }\n        if (!track) {\n            player.disableCaptions();\n            return;\n        }\n        track = track.replace('code-', '');\n\n        player.enableCaptions(track);\n    }\n}\n\nexport default Panopto;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","url","start","end","opts","showControls","node","EmbedApi","allowAutoplay","document","getElementById","this","requireVideoBlock","matches","match","serverName","sessionId","ready","self","aspectratio","autoplayBlocked","options","width","height","videoParams","interactivity","showtitle","autohide","offerviewer","autoplay","showbrand","hideoverlay","events","onReady","muteVideo","pauseVideo","unmuteVideo","setVolume","totaltime","Number","getDuration","toFixed","Math","min","duration","editform","ajax","M","cfg","wwwroot","dataType","data","action","contextid","sesskey","complete","res","doc","DOMParser","parseFromString","responseText","page","title","find","attr","poster","posterImage","removeClass","tracks","getCaptionTracks","disableCaptions","length","map","track","i","label","code","launchSetup","onIframeReady","async","loadVideo","onStateChange","state","PlayerState","Ended","ended","Playing","getCurrentTime","seekTo","paused","Paused","onPlaybackRateChange","e","rate","onError","error","remove","addClass","errorString","after","onLoginShown","window","tag","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onPanoptoEmbedApiReady","play","playVideo","pause","stop","starttime","time","Promise","resolve","isPaused","getState","isPlaying","isEnded","ratio","destroy","setRate","setPlaybackRate","mute","unMute","originalPlayer","setCaption","hasCaptions","replace","enableCaptions"],"mappings":"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"}