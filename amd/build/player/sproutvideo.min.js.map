{"version":3,"file":"sproutvideo.min.js","sources":["../../src/player/sproutvideo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Sprout Video Player class\n *\n * @module     mod_interactivevideo/player/sproutvideo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player;\n\nclass SproutVideo {\n    /**\n     * Constructs a new Sprout Video player instance.\n     */\n    constructor() {\n        this.type = 'sproutvideo';\n        this.useAnimationFrame = true;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n        this.frequency = 0.1;\n    }\n    /**\n     * Load a Sprout Video player instance.\n     * Documented at https://sproutvideo.com/help/articles/27-javascript_player_api\n     *\n     * @param {string} url - The URL of the Sprout Video video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        this.end = end;\n        let regex = /(?:https?:\\/\\/)?(?:[^.]+\\.)*(?:sproutvideo\\.com\\/(?:videos|embed)|vids\\.io\\/videos)\\/(.+)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        if (!url.includes('embed')) {\n            videoId = videoId.split('/')[0];\n        }\n        this.videoId = videoId;\n        let ready = false;\n        let self = this;\n\n        self.ended = false;\n        self.paused = false;\n\n        const executeFunction = (player) => {\n            player.bind('ready', function() {\n                let totaltime = Number(player.getDuration()).toFixed(2) - self.frequency;\n                end = !end || end == 0 ? totaltime : Math.min(end, totaltime);\n                end = Number(end).toFixed(2);\n                self.end = end;\n                self.totaltime = totaltime;\n                self.duration = self.end - self.start;\n                ready = true;\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                player.setVolume(1.0);\n            });\n\n            player.bind('qualityLevels', function(event) {\n                self.qualities = event.data;\n            });\n\n            player.bind('qualityLevelChange', function(event) {\n                dispatchEvent('iv:playerQualityChange', {quality: event.data.height});\n            });\n\n            player.bind('rateChange', function(event) {\n                dispatchEvent('iv:playerRateChange', {rate: event.data});\n            });\n\n            player.bind('progress', function(event) {\n                if (!ready) {\n                    player.setVolume(0.0);\n                    return;\n                }\n                let currentTime = event.data.time;\n                if (currentTime < start) {\n                    player.seek(start);\n                }\n                if (currentTime >= end) {\n                    player.seek(start);\n                    dispatchEvent('iv:playerEnded');\n                    self.ended = true;\n                }\n            });\n\n            player.bind('play', function() {\n                if (!ready) {\n                    player.setVolume(0.0);\n                    return;\n                }\n                let currentTime = player.getCurrentTime();\n                if (self.ended || currentTime >= end) {\n                    player.seek(start);\n                }\n                self.paused = false;\n                self.ended = false;\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.bind('pause', function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (player.getCurrentTime() >= end) {\n                    dispatchEvent('iv:playerEnded');\n                    self.ended = true;\n                } else {\n                    dispatchEvent('iv:playerPaused');\n                }\n            });\n\n            player.bind('completed', function() {\n                self.ended = true;\n                dispatchEvent('iv:playerEnded');\n            });\n        };\n\n        // Get video info using oEmbed: https://sproutvideo.com/oembed.json?url=https://sproutvideo.com/videos/ac91d7b31a1ee6c125.\n\n        const getData = async() => {\n            try {\n                const data = await $.ajax({\n                    url: `https://sproutvideo.com/oembed.json?url=https://sproutvideo.com/videos/${videoId}`,\n                    type: 'GET',\n                    dataType: 'json',\n                });\n                return data;\n            } catch {\n                return {error: true};\n            }\n        };\n        let data = await getData();\n        let iframeurl = '';\n        if (data.error) {\n            iframeurl = `https://videos.sproutvideo.com/embed/${videoId}`;\n            self.title = 'Private Video';\n            self.aspectratio = 16 / 9;\n            if (!url.includes('embed')) {\n                dispatchEvent('iv:playerError', {message: 'Video not found'});\n            }\n        } else {\n            self.title = data.title;\n            self.aspectratio = data.width / data.height;\n            self.posterImage = data.thumbnail_url;\n            // Get iframe url from data.html\n            let iframe = $(data.html);\n            iframeurl = iframe.attr('src');\n        }\n\n        iframeurl += '?fullscreenButton=false&volume=0';\n        if (!showControls) {\n            iframeurl += '&showControls=false&bigPlayButton=false';\n        }\n        if (start > 0) {\n            iframeurl += `&t=${start}`;\n        }\n\n        $.get(iframeurl).catch(() => {\n            dispatchEvent('iv:playerError', {message: 'Video not found'});\n        });\n\n        $('.video-block').remove();\n        $('#annotation-canvas').removeClass('d-none');\n        $(`#${node}`).replaceWith(`<iframe id=\"${node}\" class='sproutvideo-player'\n                 src='${iframeurl}' frameborder='0' referrerpolicy=\"no-referrer-when-downgrade\"\n                  allow=\"autoplay; fullscreen; picture-in-picture; encrypted-media;\"></iframe>`);\n\n        // Create a player instance.\n        if (!window.SV) {\n            var tag = document.createElement('script');\n            tag.src = 'https://c.sproutvideo.com/player_api.js';\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            tag.onload = function() {\n                player = new window.SV.Player({videoId: videoId.split('/')[0]});\n                executeFunction(player);\n            };\n        } else {\n            player = new window.SV.Player({videoId: videoId.split('/')[0]});\n            executeFunction(player);\n        }\n\n    }\n    /**\n     * Plays the video using the Sprout Video player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Sprout Video player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    pause() {\n        player.pause();\n        this.paused = true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    seek(time) {\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        player.seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const duration = await player.getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Sprout Video player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    isPaused() {\n        return this.paused;\n    }\n    /**\n     * Checks if the Sprout Video player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    isPlaying() {\n        return !this.paused;\n    }\n    /**\n     * Checks if the Sprout Video player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    isEnded() {\n        return this.ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    ratio() {\n        return this.aspectratio;\n    }\n    /**\n     * Destroys the Sprout Video player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player) {\n            $('#player').attr('src', '');\n            player.unbind();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    getState() {\n        const paused = this.paused;\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Sprout Video player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Sprout Video player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Sprout Video player by setting the volume to 0.\n     */\n    mute() {\n        player.setVolume(0.0);\n    }\n    /**\n     * Unmutes the Sprout Video player by setting the volume to 1.\n     */\n    unMute() {\n        player.setVolume(1.0);\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setQualityLevel(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        let qualities = this.qualities;\n        let keys = qualities.map(x => x.height);\n        // Add auto quality to the top of the list\n        keys.unshift('auto');\n        let values = qualities.map(x => x.label);\n        // Add auto quality to the top of the list\n        values.unshift('Auto');\n        let current = player.getQualityLevel();\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     */\n    setCaption() {\n        // Not supported\n    }\n\n    /**\n     * Returns the original Sprout Video player instance.\n     *\n     * @returns {Object} The Sprout Video player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default SproutVideo;"],"names":["player","constructor","type","useAnimationFrame","support","playbackrate","quality","password","frequency","url","start","end","opts","showControls","node","allowAutoplay","document","getElementById","this","videoId","exec","includes","split","ready","self","ended","paused","executeFunction","bind","totaltime","Number","getDuration","toFixed","Math","min","duration","setVolume","event","qualities","data","height","rate","currentTime","time","seek","getCurrentTime","async","$","ajax","dataType","error","getData","iframeurl","title","aspectratio","message","width","posterImage","thumbnail_url","html","attr","get","catch","remove","removeClass","replaceWith","window","SV","Player","tag","createElement","src","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","play","pause","stop","starttime","isPaused","isPlaying","isEnded","ratio","destroy","unbind","console","getState","setRate","setPlaybackRate","mute","unMute","setQuality","setQualityLevel","keys","map","x","unshift","values","label","qualitiesLabel","currentQuality","getQualityLevel","setCaption","originalPlayer"],"mappings":"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"}