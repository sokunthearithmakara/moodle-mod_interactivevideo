{"version":3,"file":"sproutvideo.min.js","sources":["../../src/player/sproutvideo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Sprout Video Player class\n *\n * @module     mod_interactivevideo/player/sproutvideo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\n\nclass SproutVideo {\n    /**\n     * Constructs a new Sprout Video player instance.\n     */\n    constructor() {\n        this.type = 'sproutvideo';\n        this.useAnimationFrame = true;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n            password: true,\n        };\n        this.frequency = 0.1;\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        let regex = /(?:https?:\\/\\/)?(?:[^.]+\\.)*(?:sproutvideo\\.com\\/(?:videos|embed)|vids\\.io\\/videos)\\/(.+)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        if (!url.includes('embed')) {\n            videoId = videoId.split('/')[0];\n        }\n        this.videoId = videoId;\n        let self = this;\n        const getData = async() => {\n            try {\n                const data = await $.ajax({\n                    url: `https://sproutvideo.com/oembed.json?url=https://sproutvideo.com/videos/${videoId}`,\n                    type: 'GET',\n                    dataType: 'json',\n                });\n                return data;\n            } catch {\n                return {error: true};\n            }\n        };\n\n        let data = await getData();\n        let iframeurl = '';\n        if (data.error) {\n            iframeurl = `https://videos.sproutvideo.com/embed/${videoId}`;\n            self.title = 'Private Video';\n            self.aspectratio = 16 / 9;\n            if (!url.includes('embed')) {\n                return null;\n            }\n        } else {\n            self.title = data.title;\n            self.aspectratio = data.width / data.height;\n            self.posterImage = data.thumbnail_url;\n            // Get iframe url from data.html\n            let iframe = $(data.html);\n            iframeurl = iframe.attr('src');\n        }\n\n        iframeurl += '?fullscreenButton=false&volume=0';\n\n        $(`#${node}`).replaceWith(`<iframe id=\"${node}\" class='sproutvideo-player'\n                 src='${iframeurl}' frameborder='0' referrerpolicy=\"no-referrer-when-downgrade\"\n                  allow=\"autoplay; fullscreen; picture-in-picture; encrypted-media;\"></iframe>`);\n\n        return new Promise((resolve) => {\n            const executeFunction = (player) => {\n                player.bind('ready', function() {\n                    resolve({\n                        duration: player.getDuration(),\n                        title: player.getVideoTitle(),\n                        posterImage: self.posterImage,\n                    });\n                });\n            };\n\n            // Create a player instance.\n            if (!window.SV) {\n                var tag = document.createElement('script');\n                tag.src = 'https://c.sproutvideo.com/player_api.js';\n                tag.async = true;\n                tag.as = \"script\";\n                tag.rel = \"preload\";\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                tag.onload = function() {\n                    player[node] = new window.SV.Player({videoId: videoId.split('/')[0]});\n                    executeFunction(player[node]);\n                };\n            } else {\n                player[node] = new window.SV.Player({videoId: videoId.split('/')[0]});\n                executeFunction(player[node]);\n            }\n        });\n    }\n    /**\n     * Load a Sprout Video player instance.\n     * Documented at https://sproutvideo.com/help/articles/27-javascript_player_api\n     *\n     * @param {string} url - The URL of the Sprout Video video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        this.start = start;\n        this.end = end;\n        let regex = /(?:https?:\\/\\/)?(?:[^.]+\\.)*(?:sproutvideo\\.com\\/(?:videos|embed)|vids\\.io\\/videos)\\/(.+)/;\n        let match = regex.exec(url);\n        let videoId = match[1];\n        if (!url.includes('embed')) {\n            videoId = videoId.split('/')[0];\n        }\n        this.videoId = videoId;\n        let ready = false;\n        let self = this;\n\n        self.ended = false;\n        self.paused = false;\n\n        const executeFunction = (player) => {\n            player.bind('ready', function() {\n                let totaltime = Number(player.getDuration()).toFixed(2) - self.frequency;\n                end = !end || end == 0 ? totaltime : Math.min(end, totaltime);\n                end = Number(end).toFixed(2);\n                self.end = end;\n                self.totaltime = totaltime;\n                self.duration = self.end - self.start;\n                ready = true;\n                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                player.setVolume(1.0);\n            });\n\n            player.bind('qualityLevels', function(event) {\n                self.qualities = event.data;\n            });\n\n            player.bind('qualityLevelChange', function(event) {\n                dispatchEvent('iv:playerQualityChange', {quality: event.data.height});\n            });\n\n            player.bind('rateChange', function(event) {\n                dispatchEvent('iv:playerRateChange', {rate: event.data});\n            });\n\n            player.bind('progress', function(event) {\n                if (!ready) {\n                    player.setVolume(0.0);\n                    return;\n                }\n                let currentTime = event.data.time;\n                if (currentTime < start) {\n                    player.seek(start);\n                }\n                if (currentTime >= end) {\n                    player.seek(start);\n                    dispatchEvent('iv:playerEnded');\n                    self.ended = true;\n                }\n            });\n\n            player.bind('play', function() {\n                if (!ready) {\n                    player.setVolume(0.0);\n                    return;\n                }\n                let currentTime = player.getCurrentTime();\n                if (self.ended || currentTime >= end) {\n                    player.seek(start);\n                }\n                self.paused = false;\n                self.ended = false;\n                dispatchEvent('iv:playerPlay');\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.bind('pause', function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (player.getCurrentTime() >= end) {\n                    dispatchEvent('iv:playerEnded');\n                    self.ended = true;\n                } else {\n                    dispatchEvent('iv:playerPaused');\n                }\n            });\n\n            player.bind('completed', function() {\n                self.ended = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.bind('volume', function(e) {\n                dispatchEvent('iv:playerVolumeChange', {volume: e.data});\n            });\n        };\n\n        // Get video info using oEmbed: https://sproutvideo.com/oembed.json?url=https://sproutvideo.com/videos/ac91d7b31a1ee6c125.\n\n        const getData = async() => {\n            try {\n                const data = await $.ajax({\n                    url: `https://sproutvideo.com/oembed.json?url=https://sproutvideo.com/videos/${videoId}`,\n                    type: 'GET',\n                    dataType: 'json',\n                });\n                return data;\n            } catch {\n                return {error: true};\n            }\n        };\n        let data = await getData();\n        let iframeurl = '';\n        if (data.error) {\n            iframeurl = `https://videos.sproutvideo.com/embed/${videoId}`;\n            self.title = 'Private Video';\n            self.aspectratio = 16 / 9;\n            if (!url.includes('embed')) {\n                dispatchEvent('iv:playerError', {message: 'Video not found'});\n            }\n        } else {\n            self.title = data.title;\n            self.aspectratio = data.width / data.height;\n            self.posterImage = data.thumbnail_url;\n            // Get iframe url from data.html\n            let iframe = $(data.html);\n            iframeurl = iframe.attr('src');\n        }\n\n        iframeurl += '?fullscreenButton=false&volume=0';\n        if (!showControls) {\n            iframeurl += '&showControls=false&bigPlayButton=false';\n        }\n        if (start > 0) {\n            iframeurl += `&t=${start}`;\n        }\n\n        $.get(iframeurl).catch(() => {\n            dispatchEvent('iv:playerError', {message: 'Video not found'});\n        });\n\n        $('.video-block').remove();\n        $('#annotation-canvas').removeClass('d-none w-0');\n        $(`#${node}`).replaceWith(`<iframe id=\"${node}\" class='sproutvideo-player'\n                 src='${iframeurl}' frameborder='0' referrerpolicy=\"no-referrer-when-downgrade\"\n                  allow=\"autoplay; fullscreen; picture-in-picture; encrypted-media;\"></iframe>`);\n\n        // Create a player instance.\n        if (!window.SV) {\n            var tag = document.createElement('script');\n            tag.src = 'https://c.sproutvideo.com/player_api.js';\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            tag.onload = function() {\n                player[node] = new window.SV.Player({videoId: videoId.split('/')[0]});\n                executeFunction(player[node]);\n            };\n        } else {\n            player[node] = new window.SV.Player({videoId: videoId.split('/')[0]});\n            executeFunction(player[node]);\n        }\n\n    }\n    /**\n     * Plays the video using the Sprout Video player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Sprout Video player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pause();\n        this.paused = true;\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seek(starttime);\n        player[this.node].pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time in seconds to which the video was seeked.\n     */\n    seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        if (time < 0) {\n            time = 0;\n        }\n        this.ended = false;\n        player[this.node].seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        const duration = await player[this.node].getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Sprout Video player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return this.paused;\n    }\n    /**\n     * Checks if the Sprout Video player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return !this.paused;\n    }\n    /**\n     * Checks if the Sprout Video player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return this.ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n    /**\n     * Destroys the Sprout Video player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player[this.node]) {\n            $(`#${this.node}`).remove();\n            player[this.node].unbind();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 'paused';\n        }\n        const paused = this.paused;\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Sprout Video player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Sprout Video player.\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Sprout Video player by setting the volume to 0.\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(0.0);\n    }\n    /**\n     * Unmutes the Sprout Video player by setting the volume to 1.\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setVolume(1.0);\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return player[this.node].getVolume() === 0;\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        if (!player[this.node]) {\n            return quality;\n        }\n        player[this.node].setQualityLevel(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        if (!player[this.node]) {\n            return null;\n        }\n        let qualities = this.qualities;\n        let keys = qualities.map(x => x.height);\n        // Add auto quality to the top of the list\n        keys.unshift('auto');\n        let values = qualities.map(x => x.label);\n        // Add auto quality to the top of the list\n        values.unshift('Auto');\n        let current = player[this.node].getQualityLevel();\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     */\n    setCaption() {\n        if (!player[this.node]) {\n            return null;\n        }\n        // Not supported\n        return false;\n    }\n\n    /**\n     * Returns the original Sprout Video player instance.\n     *\n     * @returns {Object} The Sprout Video player instance.\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n}\n\nexport default SproutVideo;"],"names":["player","constructor","type","useAnimationFrame","support","playbackrate","quality","password","frequency","url","node","videoId","exec","includes","split","self","this","data","async","$","ajax","dataType","error","getData","iframeurl","title","aspectratio","width","height","posterImage","thumbnail_url","html","attr","replaceWith","Promise","resolve","executeFunction","bind","duration","getDuration","getVideoTitle","window","SV","Player","tag","document","createElement","src","as","rel","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","start","end","opts","showControls","allowAutoplay","getElementById","ready","ended","paused","totaltime","Number","toFixed","Math","min","setVolume","event","qualities","rate","currentTime","time","seek","getCurrentTime","e","volume","message","get","catch","remove","removeClass","play","pause","stop","starttime","isPaused","isPlaying","isEnded","ratio","destroy","unbind","console","getState","setRate","setPlaybackRate","mute","unMute","isMuted","getVolume","setQuality","setQualityLevel","keys","map","x","unshift","values","label","qualitiesLabel","currentQuality","getQualityLevel","setCaption","originalPlayer"],"mappings":"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"}