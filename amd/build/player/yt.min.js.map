{"version":3,"file":"yt.min.js","sources":["../../src/player/yt.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Youtube Player class\n * Documented at https://developers.google.com/youtube/iframe_api_reference\n *\n * @module     mod_interactivevideo/player/yt\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player;\nclass Yt {\n    /**\n     * Creates an instance of the YouTube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.useAnimationFrame = true;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default yt\n         * @private\n         * @readonly\n         */\n        this.type = 'yt';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n            password: true,\n        };\n        this.live = false; // Added flag for live video support\n    }\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const preload = opts.preload || false;\n        const node = opts.node || 'player';\n        // Hide the player first.\n        $(`#video-wrapper`).addClass('d-none');\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n        var YT;\n        let regex = new RegExp(\n            '(?:https?:\\\\/\\\\/)?' +\n            '(?:www\\\\.)?' +\n            '(?:youtube\\\\.com|youtu\\\\.be|youtube-nocookie\\\\.com)' +\n            '(?:\\\\/embed\\\\/|\\\\/watch\\\\?v=|\\\\/)([^\\\\/]+)',\n            'g'\n        );\n        var match = regex.exec(url);\n        var videoId = match[1];\n        videoId = videoId.split(\"&\")[0];\n        this.videoId = videoId;\n        this.posterImage = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n        // If the img size is 90x120, it means the maxresdefault.jpg is not available. So we use hqdefault.jpg instead.\n        const img = new Image();\n        img.src = this.posterImage;\n        img.onload = () => {\n            if (img.width == 120 && img.height == 90) {\n                this.posterImage = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\n            }\n        };\n\n        let loadedcaption = false;\n        var ready = false;\n        var self = this;\n        let hasError = false;\n        var options = {\n            videoId: videoId,\n            width: 1080,\n            height: 720,\n            playerVars: {\n                autoplay: opts.autoplay || 0,\n                hl: M.cfg.language,\n                start: start,\n                end: end,\n                controls: showControls ? 1 : 0,\n                showinfo: 0,\n                fs: 0,\n                iv_load_policy: 3,\n                cc_load_policy: 0,\n                autohide: 1,\n                rel: 0,\n                playsinline: 1,\n                disablekb: 1,\n                mute: 1,\n            },\n            events: {\n                onError: function(e) {\n                    hasError = true;\n                    dispatchEvent('iv:playerError', {error: e.data});\n                },\n                onReady: function(e) {\n                    // Unhide the player.\n                    $(`#video-wrapper`).removeClass('d-none');\n                    self.title = e.target.videoTitle;\n                    // We don't want to use the end time from the player, just to avoid any issue restarting the video.\n                    if (e.target.getDuration() <= 0 && e.target.videoTitle == '') {\n                        dispatchEvent('iv:playerError', {error: 'Video not found'});\n                        return;\n                    }\n                    let totaltime = Number(e.target.getDuration().toFixed(2)) - self.frequency;\n                    if (e.target.getDuration() == 0) {\n                        totaltime = 0.1;\n                        self.live = true;\n                    }\n                    if (end == 0.1 && !self.live) {\n                        end = totaltime;\n                    }\n                    end = !end ? totaltime : Math.min(end, totaltime);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.totaltime = totaltime;\n                    self.duration = self.end - self.start;\n                    self.aspectratio = self.ratio();\n                    // It's always good idea to play the video at the beginning to download some data.\n                    // Otherwise, if user seek before start, they're gonna get blackscreen.\n                    if (preload == true && customStart == false) { // For editing form\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    } else {\n                        e.target.mute();\n                        e.target.playVideo();\n                        let count = 0;\n                        let interval = setInterval(() => {\n                            count++;\n                            if (ready === true) {\n                                clearInterval(interval);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                return;\n                            }\n                            if (e.target.getCurrentTime() > 0 || count > 6) {\n                                clearInterval(interval);\n                                if (hasError) {\n                                    return;\n                                }\n                                if (self.live) {\n                                    self.start = e.target.getCurrentTime();\n                                    self.end = e.target.getCurrentTime() + 1;\n                                }\n                                e.target.seekTo(self.start);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                ready = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                            }\n                        }, 1000);\n                    }\n                },\n\n                onAutoplayBlocked: function(e) {\n                    $(`.video-block, #video-block`).remove();\n                    if (ready === false) {\n                        e.target.unMute();\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                    }\n                },\n\n                onStateChange: function(e) {\n                    if (ready === false) {\n                        return;\n                    }\n                    // For non-live videos, enforce start/end boundaries\n                    if (!self.live) {\n                        if (player.getCurrentTime() < self.start) {\n                            player.seekTo(self.start);\n                            player.playVideo();\n                        }\n                        if (player.getCurrentTime() >= self.end + self.frequency) {\n                            player.seekTo(self.end - self.frequency);\n                            player.playVideo();\n                        }\n                    }\n                    switch (e.data) {\n                        case YT.PlayerState.ENDED:\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case YT.PlayerState.PLAYING:\n                            self.paused = false;\n                            if (self.ended) {\n                                self.ended = false;\n                                if (player.getCurrentTime() < self.start) {\n                                    player.seekTo(self.start);\n                                } else if (player.getCurrentTime() >= self.end) {\n                                    player.seekTo(self.start);\n                                }\n                            }\n                            dispatchEvent('iv:playerPlaying');\n                            if (!self.live && player.getCurrentTime() >= self.end) {\n                                self.ended = true;\n                                self.paused = true;\n                                dispatchEvent('iv:playerEnded');\n                            }\n                            break;\n                        case YT.PlayerState.PAUSED:\n                            self.paused = true;\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case YT.PlayerState.CUED:\n                            if (!self.live && player.getCurrentTime() >= self.end) {\n                                player.seekTo(self.start);\n                            }\n                            break;\n                    }\n                },\n\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.data});\n                },\n\n                onApiChange: function() {\n                    // Always load captions\n                    if (!loadedcaption) {\n                        player.loadModule('captions');\n                        loadedcaption = true;\n                    }\n                    player.setOption('captions', 'track', {});\n\n                    let tracks;\n                    try {\n                        tracks = player.getOption('captions', 'tracklist');\n                    } catch (e) {\n                        tracks = [];\n                    }\n                    if (tracks && tracks.length > 0) {\n                        // Set the first track as active.\n                        tracks = tracks.map((track) => {\n                            return {\n                                label: track.displayName,\n                                code: track.languageCode,\n                            };\n                        });\n                        self.captions = tracks;\n                    }\n                    loadedcaption = true;\n                    dispatchEvent('iv:playerLoaded', {tracks});\n                },\n            }\n        };\n\n        if (url.includes('youtube-nocookie')) {\n            options.host = 'https://www.youtube-nocookie.com';\n        }\n        // Load the IFrame Player API code asynchronously.\n        if (!window.YT) {\n            var tag = document.createElement('script');\n            tag.src = \"https://www.youtube.com/iframe_api\";\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and YouTube player\n            window.onYouTubeIframeAPIReady = function() {\n                YT = window.YT || {};\n                player = new YT.Player(node, options);\n            };\n        } else {\n            YT = window.YT || {};\n            player = new YT.Player(node, options);\n        }\n        return new Promise((resolve) => {\n            resolve(true);\n        });\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.playVideo();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pauseVideo();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        this.ended = false;\n        return new Promise((resolve) => {\n            player.seekTo(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return player.getPlayerState() == window.YT.PlayerState.PAUSED;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return player.getPlayerState() == window.YT.PlayerState.PLAYING;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (this.ended) {\n            return true;\n        }\n        return player.getPlayerState() == window.YT.PlayerState.ENDED || player.getCurrentTime() >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // YT always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        player.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return player.getPlayerState();\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.unMute();\n        player.setVolume(100);\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        player.setOption('captions', 'track', track ? {languageCode: track} : {});\n    }\n}\n\nexport default Yt;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","password","live","url","start","end","opts","showControls","customStart","preload","node","YT","addClass","allowAutoplay","document","getElementById","this","requireVideoBlock","videoId","RegExp","exec","split","posterImage","img","Image","src","onload","width","height","loadedcaption","ready","self","hasError","options","playerVars","autoplay","hl","M","cfg","language","controls","showinfo","fs","iv_load_policy","cc_load_policy","autohide","rel","playsinline","disablekb","mute","events","onError","e","error","data","onReady","removeClass","title","target","videoTitle","getDuration","totaltime","Number","toFixed","Math","min","duration","aspectratio","ratio","playVideo","count","interval","setInterval","clearInterval","pauseVideo","unMute","getCurrentTime","seekTo","onAutoplayBlocked","remove","onStateChange","PlayerState","ENDED","ended","paused","PLAYING","PAUSED","CUED","onPlaybackRateChange","rate","onApiChange","tracks","loadModule","setOption","getOption","length","map","track","label","displayName","code","languageCode","captions","includes","host","window","Player","tag","createElement","async","as","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","Promise","resolve","play","pause","stop","starttime","time","isPaused","getPlayerState","isPlaying","isEnded","destroy","getState","setRate","setPlaybackRate","setVolume","originalPlayer","setCaption"],"mappings":"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"}