{"version":3,"file":"yt.min.js","sources":["../../src/player/yt.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Youtube Player class\n * Documented at https://developers.google.com/youtube/iframe_api_reference\n *\n * @module     mod_interactivevideo/player/yt\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nlet player = {};\nclass Yt {\n    /**\n     * Creates an instance of the YouTube player.\n     *\n     * @constructor\n     */\n    constructor() {\n        this.useAnimationFrame = true;\n        /**\n         * The type of the player\n         * @type {String}\n         * @default yt\n         * @private\n         * @readonly\n         */\n        this.type = 'yt';\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n            password: true,\n        };\n        this.live = false; // Added flag for live video support\n    }\n    /**\n     * Get information about the video\n     * @param {string} url\n     * @param {string} node\n     * @return {Promise<Object>}\n     */\n    async getInfo(url, node) {\n        this.node = node;\n        return new Promise((resolve) => {\n            var YT;\n            let regex = new RegExp(\n                '(?:https?:\\\\/\\\\/)?' +\n                '(?:www\\\\.)?' +\n                '(?:youtube\\\\.com|youtu\\\\.be|youtube-nocookie\\\\.com)' +\n                '(?:\\\\/embed\\\\/|\\\\/watch\\\\?v=|\\\\/)([^\\\\/]+)',\n                'g'\n            );\n            var match = regex.exec(url);\n            var videoId = match[1];\n            videoId = videoId.split(\"&\")[0];\n            var options = {\n                videoId: videoId,\n                width: 1080,\n                height: 720,\n                playerVars: {\n                    autoplay: 0,\n                    hl: M.cfg.language,\n                    controls: 1,\n                    showinfo: 0,\n                    fs: 0,\n                    \"iv_load_policy\": 3,\n                    \"cc_load_policy\": 0,\n                    autohide: 1,\n                    rel: 0,\n                    playsinline: 1,\n                    disablekb: 0,\n                },\n                events: {\n                    onReady: function(e) {\n                        resolve({\n                            title: e.target.videoTitle,\n                            duration: e.target.getDuration(),\n                            posterImage: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,\n                        });\n                    },\n                }\n            };\n            if (!window.YT) {\n                var tag = document.createElement('script');\n                tag.src = \"https://www.youtube.com/iframe_api\";\n                tag.async = true;\n                tag.as = \"script\";\n                tag.rel = \"preload\";\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                // Replace the 'player' element with an <iframe> and YouTube player\n                window.onYouTubeIframeAPIReady = function() {\n                    YT = window.YT || {};\n                    player[node] = new YT.Player(node, options);\n                };\n            } else {\n                YT = window.YT || {};\n                player[node] = new YT.Player(node, options);\n            }\n        });\n    }\n    /**\n     * Load the video\n     * @param {string} url\n     * @param {number} start\n     * @param {number} end\n     * @param {object} opts\n     * @param {boolean} reloaded\n     * @return {Promise<Boolean>}\n     */\n    async load(url, start, end, opts = {}, reloaded = false) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const preload = opts.preload || false;\n        const node = opts.node || 'player';\n        this.node = node;\n\n        // Hide the player first.\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked', {\n                requireVideoBlock: true,\n            });\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n        var YT;\n        let regex = new RegExp(\n            '(?:https?:\\\\/\\\\/)?' +\n            '(?:www\\\\.)?' +\n            '(?:youtube\\\\.com|youtu\\\\.be|youtube-nocookie\\\\.com)' +\n            '(?:\\\\/embed\\\\/|\\\\/watch\\\\?v=|\\\\/)([^\\\\/]+)',\n            'g'\n        );\n        var match = regex.exec(url);\n        var videoId = match[1];\n        videoId = videoId.split(\"&\")[0];\n        this.videoId = videoId;\n        this.posterImage = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n        // If the img size is 90x120, it means the maxresdefault.jpg is not available. So we use hqdefault.jpg instead.\n        const img = new Image();\n        img.src = this.posterImage;\n        img.onload = () => {\n            if (img.width == 120 && img.height == 90) {\n                this.posterImage = `https://img.youtube.com/vi/${videoId}/hqdefault.jpg`;\n            }\n        };\n\n        let loadedcaption = false;\n        var ready = false;\n        var self = this;\n        let hasError = false;\n        var options = {\n            videoId: videoId,\n            width: 1080,\n            height: 720,\n            playerVars: {\n                autoplay: opts.autoplay || 0,\n                hl: M.cfg.language,\n                start: start,\n                end: end,\n                controls: showControls ? 1 : 0,\n                showinfo: 0,\n                fs: 0,\n                \"iv_load_policy\": 3,\n                \"cc_load_policy\": 0,\n                autohide: 1,\n                rel: 0,\n                playsinline: 1,\n                disablekb: opts.keyboard ? 0 : 1,\n                mute: 1,\n            },\n            events: {\n                onError: function(e) {\n                    hasError = true;\n                    dispatchEvent('iv:playerError', {error: e.data});\n                },\n                onReady: function(e) {\n                    self.title = e.target.videoTitle;\n                    // We don't want to use the end time from the player, just to avoid any issue restarting the video.\n                    if (e.target.getDuration() <= 0 && e.target.videoTitle == '') {\n                        dispatchEvent('iv:playerError', {error: 'Video not found'});\n                        return;\n                    }\n                    let totaltime = Number(e.target.getDuration().toFixed(2)) - self.frequency;\n                    if (e.target.getDuration() == 0) {\n                        totaltime = 0.1;\n                        self.live = true;\n                    }\n                    if (end == 0.1 && !self.live) {\n                        end = totaltime;\n                    }\n                    end = !end ? totaltime : Math.min(end, totaltime);\n                    end = Number(end.toFixed(2));\n                    self.end = end;\n                    self.totaltime = totaltime;\n                    self.duration = self.end - self.start;\n                    self.aspectratio = self.ratio();\n                    // It's always good idea to play the video at the beginning to download some data.\n                    // Otherwise, if user seek before start, they're gonna get blackscreen.\n                    if (preload == true && customStart == false) { // For editing form\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        $(`#video-wrapper`).removeClass('invisible');\n                    } else {\n                        e.target.mute();\n                        e.target.playVideo();\n                        let count = 0;\n                        let interval = setInterval(() => {\n                            count++;\n                            if (ready === true) {\n                                clearInterval(interval);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                return;\n                            }\n                            if (e.target.getCurrentTime() > 0 || count > 6) {\n                                clearInterval(interval);\n                                if (hasError) {\n                                    return;\n                                }\n                                if (self.live) {\n                                    self.start = e.target.getCurrentTime();\n                                    self.end = e.target.getCurrentTime() + 1;\n                                }\n                                e.target.seekTo(self.start);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                ready = true;\n                                dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                                $(`#video-wrapper`).removeClass('invisible');\n                            }\n                        }, 1000);\n                    }\n                },\n\n                onAutoplayBlocked: function(e) {\n                    $(`.video-block, #video-block`).remove();\n                    if (ready === false) {\n                        e.target.unMute();\n                        ready = true;\n                        dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        $(`#video-wrapper`).removeClass('invisible');\n                    }\n                },\n\n                onStateChange: function(e) {\n                    if (ready === false) {\n                        return;\n                    }\n                    // For non-live videos, enforce start/end boundaries\n                    if (!self.live) {\n                        if (player[self.node].getCurrentTime() < self.start) {\n                            player[self.node].seekTo(self.start);\n                            player[self.node].playVideo();\n                        }\n                        if (player[self.node].getCurrentTime() >= self.end + self.frequency) {\n                            player[self.node].seekTo(self.end - self.frequency);\n                            player[self.node].playVideo();\n                        }\n                    }\n                    switch (e.data) {\n                        case YT.PlayerState.ENDED:\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case YT.PlayerState.PLAYING:\n                            self.paused = false;\n                            if (self.ended) {\n                                self.ended = false;\n                                if (player[self.node].getCurrentTime() < self.start) {\n                                    player[self.node].seekTo(self.start);\n                                } else if (player[self.node].getCurrentTime() >= self.end) {\n                                    player[self.node].seekTo(self.start);\n                                }\n                            }\n                            dispatchEvent('iv:playerPlay');\n                            dispatchEvent('iv:playerPlaying');\n                            if (!self.live && player[self.node].getCurrentTime() >= self.end) {\n                                self.ended = true;\n                                self.paused = true;\n                                dispatchEvent('iv:playerEnded');\n                            }\n                            break;\n                        case YT.PlayerState.PAUSED:\n                            self.paused = true;\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case YT.PlayerState.CUED:\n                            if (!self.live && player[self.node].getCurrentTime() >= self.end) {\n                                player[self.node].seekTo(self.start);\n                            }\n                            break;\n                    }\n                },\n\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.data});\n                },\n\n                onApiChange: function() {\n                    // Always load captions\n                    if (!loadedcaption) {\n                        player[self.node].loadModule('captions');\n                        loadedcaption = true;\n                    }\n                    player[self.node].setOption('captions', 'track', {});\n\n                    let tracks;\n                    try {\n                        tracks = player[self.node].getOption('captions', 'tracklist');\n                    } catch (e) {\n                        tracks = [];\n                    }\n                    if (tracks && tracks.length > 0) {\n                        // Set the first track as active.\n                        tracks = tracks.map((track) => {\n                            return {\n                                label: track.displayName,\n                                code: track.languageCode,\n                            };\n                        });\n                        self.captions = tracks;\n                    }\n                    loadedcaption = true;\n                    dispatchEvent('iv:playerLoaded', {tracks, reloaded: reloaded});\n                },\n            }\n        };\n\n        if (url.includes('youtube-nocookie')) {\n            options.host = 'https://www.youtube-nocookie.com';\n        }\n        // Load the IFrame Player API code asynchronously.\n        if (!window.YT) {\n            var tag = document.createElement('script');\n            tag.src = \"https://www.youtube.com/iframe_api\";\n            tag.async = true;\n            tag.as = \"script\";\n            tag.rel = \"preload\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and YouTube player\n            window.onYouTubeIframeAPIReady = function() {\n                YT = window.YT || {};\n                player[node] = new YT.Player(node, options);\n            };\n        } else {\n            YT = window.YT || {};\n            player[node] = new YT.Player(node, options);\n        }\n        return new Promise((resolve) => {\n            resolve(true);\n        });\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].playVideo();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pauseVideo();\n        this.paused = true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].seekTo(starttime);\n        player[this.node].pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        if (!player[this.node]) {\n            return false;\n        }\n        let currentTime = this.getCurrentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        this.ended = false;\n        return new Promise((resolve) => {\n            player[this.node].seekTo(time, true);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        if (this.paused) {\n            return true;\n        }\n        return player[this.node].getPlayerState() == window.YT.PlayerState.PAUSED;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.paused) {\n            return false;\n        }\n        try {\n            return player[this.node].getPlayerState() == window.YT.PlayerState.PLAYING;\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (!player[this.node]) {\n            return false;\n        }\n        if (this.ended) {\n            return true;\n        }\n        return player[this.node].getPlayerState() == window.YT.PlayerState.ENDED || player[this.node].getCurrentTime() >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // YT always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getPlayerState();\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        if (!player[this.node]) {\n            return 1;\n        }\n        player[this.node].setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].mute();\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].unMute();\n        player[this.node].setVolume(100);\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return player[this.node].isMuted();\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].setOption('captions', 'track', track ? {languageCode: track} : {});\n    }\n}\n\nexport default Yt;"],"names":["player","constructor","useAnimationFrame","type","frequency","support","playbackrate","quality","password","live","url","node","Promise","resolve","YT","videoId","RegExp","exec","options","split","width","height","playerVars","autoplay","hl","M","cfg","language","controls","showinfo","fs","autohide","rel","playsinline","disablekb","events","onReady","e","title","target","videoTitle","duration","getDuration","posterImage","window","Player","tag","document","createElement","src","async","as","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","start","end","opts","reloaded","showControls","customStart","preload","allowAutoplay","getElementById","this","requireVideoBlock","img","Image","onload","loadedcaption","ready","self","hasError","keyboard","mute","onError","error","data","totaltime","Number","toFixed","Math","min","aspectratio","ratio","removeClass","playVideo","count","interval","setInterval","clearInterval","pauseVideo","unMute","getCurrentTime","seekTo","onAutoplayBlocked","remove","onStateChange","PlayerState","ENDED","ended","paused","PLAYING","PAUSED","CUED","onPlaybackRateChange","rate","onApiChange","tracks","loadModule","setOption","getOption","length","map","track","label","displayName","code","languageCode","captions","includes","host","play","pause","stop","starttime","time","currentTime","isPaused","getPlayerState","isPlaying","isEnded","destroy","getState","setRate","setPlaybackRate","volume","setVolume","isMuted","originalPlayer","setCaption"],"mappings":"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"}