{"version":3,"file":"soundcloud.min.js","sources":["../../src/player/soundcloud.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * SoundCloud Player class\n *\n * @module     mod_interactivevideo/player/soundcloud\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nvar player;\nclass SoundCloud {\n    constructor() {\n        this.type = 'soundcloud';\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n        this.useAnimationFrame = false;\n    }\n    /**\n     * Creates an instance of the SoundCloud player.\n     *\n     * @param {string} url - The URL of the SoundCloud video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const node = opts.node || 'player';\n        this.node = node;\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://developers.soundcloud.com/docs/api/html5-widget#parameters\n        // e.g https://soundcloud.com/forss/flickermood\n        let self = this;\n        $('.video-block').remove();\n        $('#annotation-canvas').removeClass('d-none');\n\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://soundcloud.com/oembed?format=json&url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n        const data = await getData();\n        let json = JSON.parse(data);\n        self.title = json.title;\n        self.posterImage = json.thumbnail_url;\n        self.aspectratio = 16 / 9;\n        let ready = false;\n\n        $(`#${node}`).replaceWith(json.html);\n        $(`#video-wrapper`).find('iframe').attr({\n            id: node,\n            width: '100%',\n            height: '100%',\n            allow: 'autoplay; fullscreen;',\n            allowfullscreen: 'true',\n        });\n        let SC;\n        const callback = function() {\n            SC = window.SC || SC;\n            player = SC.Widget(node);\n            self.player = player;\n            player.bind(window.SC.Widget.Events.READY, function() {\n                player.getDuration(function(duration) {\n                    self.totaltime = Number((duration / 1000).toFixed(2));\n                    self.end = end ? Math.min(end, self.totaltime) : self.totaltime;\n                    self.currentTime = start;\n                    self.ended = false;\n                    self.player.seekTo(start * 1000);\n                    self.player.pause();\n                    ready = true;\n                    dispatchEvent('iv:playerReady');\n                });\n            });\n\n            player.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n                if (!ready) {\n                    return;\n                }\n\n                let currentTime = data.currentPosition / 1000;\n                self.currentTime = currentTime;\n                if (self.paused) {\n                    return;\n                }\n                if (!self.ended && currentTime >= self.end) {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                    return;\n                }\n                if (self.ended || self.currentTime < self.start) {\n                    self.ended = false;\n                    player.seekTo(self.start * 1000);\n                }\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.bind(window.SC.Widget.Events.PLAY, function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = false;\n            });\n\n            player.bind(window.SC.Widget.Events.PAUSE, function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (self.ended) {\n                    return;\n                }\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player.bind(window.SC.Widget.Events.FINISH, function() {\n                if (!ready) {\n                    return;\n                }\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.bind(window.SC.Widget.Events.ERROR, function(data) {\n                dispatchEvent('iv:playerError', {error: data});\n            });\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        if (!window.SC) {\n            var tag = document.createElement('script');\n            tag.src = \"https://w.soundcloud.com/player/api.js\";\n            tag.async = true;\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and SoundCloud player\n            tag.onload = function() {\n                SC = window.SC;\n                callback();\n            };\n        } else {\n            callback();\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        this.player.play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        this.player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        this.player.seekTo(starttime * 1000);\n        this.player.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    seek(time) {\n        time = Math.min(time, this.end);\n        time = Math.max(time, this.start);\n        this.ended = false;\n        return new Promise((resolve) => {\n            this.player.seekTo(time * 1000);\n            this.currentTime = time;\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return new Promise((resolve) => {\n            this.player.getPosition(function(position) {\n                resolve(position / 1000);\n            });\n        });\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return new Promise((resolve) => {\n            this.player.isPaused(function(paused) {\n                resolve(paused);\n            });\n        });\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return new Promise((resolve) => {\n            this.player.isPaused(function(paused) {\n                resolve(!paused);\n            });\n        });\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        return this.ended || this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // SOUNDCLOUD always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        try {\n            this.player.pause();\n            $(`#${this.node}`).remove();\n            dispatchEvent('iv:playerDestroyed');\n        } catch (e) {\n            // Do nothing\n        }\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     */\n    setRate() {\n        return false;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        this.player.setVolume(0);\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        this.player.setVolume(100);\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n\n    /**\n     * Set subtitle\n     */\n    setCaption() {\n        // SoundCloud does not support captions\n    }\n}\n\nexport default SoundCloud;"],"names":["player","constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","url","start","end","node","self","this","remove","removeClass","data","$","ajax","M","cfg","wwwroot","dataType","action","contextid","encodeURIComponent","sesskey","json","JSON","parse","title","posterImage","thumbnail_url","aspectratio","SC","ready","replaceWith","html","find","attr","id","width","height","allow","allowfullscreen","callback","window","Widget","bind","Events","READY","getDuration","duration","totaltime","Number","toFixed","Math","min","currentTime","ended","seekTo","pause","PLAY_PROGRESS","currentPosition","paused","PLAY","PAUSE","FINISH","ERROR","error","tag","document","createElement","src","async","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","play","stop","starttime","seek","time","max","Promise","resolve","getCurrentTime","getPosition","position","isPaused","isPlaying","isEnded","ratio","destroy","e","getState","setRate","mute","setVolume","unMute","originalPlayer","setCaption"],"mappings":"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"}