{"version":3,"file":"soundcloud.min.js","sources":["../../src/player/soundcloud.js"],"sourcesContent":["\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * SoundCloud Player class\n *\n * @module     mod_interactivevideo/player/soundcloud\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player = {};\nclass SoundCloud {\n    constructor() {\n        this.type = 'soundcloud';\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n        this.useAnimationFrame = false;\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://soundcloud.com/oembed?format=json&url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n        const data = await getData();\n        let json = JSON.parse(data);\n        self.title = json.title;\n        self.posterImage = json.thumbnail_url;\n        let ready = false;\n\n        let $parent = $(`#${node}`).parent();\n        $(`#${node}`).replaceWith(json.html);\n        $parent.find('iframe').attr({\n            id: node,\n            width: '100%',\n            height: '100%',\n            allow: 'autoplay; fullscreen;',\n            allowfullscreen: 'true',\n        });\n        return new Promise((resolve) => {\n            let SC;\n            const callback = function() {\n                SC = window.SC || SC;\n                player[node] = SC.Widget(node);\n                self.player = player[node];\n                self.player.bind(window.SC.Widget.Events.READY, function() {\n                    self.player.getDuration(function(duration) {\n                        self.totaltime = Number((duration / 1000).toFixed(2));\n                        ready = true;\n                        resolve({\n                            duration: self.totaltime,\n                            title: self.title,\n                            posterImage: self.posterImage,\n                        });\n                    });\n                });\n\n                self.player.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n                    if (!ready) {\n                        return;\n                    }\n\n                    let currentTime = data.currentPosition / 1000;\n                    self.currentTime = currentTime;\n                });\n            };\n\n            // Load the IFrame Player API code asynchronously.\n            if (!window.SC) {\n                var tag = document.createElement('script');\n                tag.src = \"https://w.soundcloud.com/player/api.js\";\n                tag.async = true;\n                tag.type = 'text/javascript';\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                // Replace the 'player' element with an <iframe> and SoundCloud player\n                tag.onload = function() {\n                    SC = window.SC;\n                    callback();\n                };\n            } else {\n                callback();\n            }\n        });\n    }\n    /**\n     * Creates an instance of the SoundCloud player.\n     *\n     * @param {string} url - The URL of the SoundCloud video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const node = opts.node || 'player';\n        this.node = node;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n\n        // Documented at https://developers.soundcloud.com/docs/api/html5-widget#parameters\n        // e.g https://soundcloud.com/forss/flickermood\n        let self = this;\n        $('.video-block').remove();\n        $('#annotation-canvas').removeClass('d-none w-0');\n\n        const getData = function() {\n            return $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                dataType: 'text',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: 'https://soundcloud.com/oembed?format=json&url=' + encodeURIComponent(url),\n                    sesskey: M.cfg.sesskey,\n                }\n            });\n        };\n        const data = await getData();\n        let json = JSON.parse(data);\n        self.title = json.title;\n        self.posterImage = json.thumbnail_url;\n        self.aspectratio = 16 / 9;\n        let ready = false;\n\n        $(`#${node}`).replaceWith(json.html);\n        $(`#video-wrapper`).find('iframe').attr({\n            id: node,\n            width: '100%',\n            height: '100%',\n            allow: 'autoplay; fullscreen;',\n            allowfullscreen: 'true',\n        });\n        let SC;\n        const callback = function() {\n            SC = window.SC || SC;\n            player[node] = SC.Widget(node);\n            self.player = player[node];\n            self.player.bind(window.SC.Widget.Events.READY, function() {\n                self.player.getDuration(function(duration) {\n                    self.totaltime = Number((duration / 1000).toFixed(2));\n                    self.end = end ? Math.min(end, self.totaltime) : self.totaltime;\n                    self.currentTime = start;\n                    self.ended = false;\n                    self.player.seekTo(start * 1000);\n                    self.player.pause();\n                    ready = true;\n                    dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                });\n            });\n\n            self.player.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n                if (!ready) {\n                    return;\n                }\n\n                let currentTime = data.currentPosition / 1000;\n                self.currentTime = currentTime;\n                if (self.paused) {\n                    return;\n                }\n                if (!self.ended && currentTime >= self.end) {\n                    self.ended = true;\n                    dispatchEvent('iv:playerEnded');\n                    return;\n                }\n                if (self.ended || self.currentTime < self.start) {\n                    self.ended = false;\n                    self.player.seekTo(self.start * 1000);\n                }\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            self.player.bind(window.SC.Widget.Events.PLAY, function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = false;\n                dispatchEvent('iv:playerPlay');\n            });\n\n            self.player.bind(window.SC.Widget.Events.PAUSE, function() {\n                if (!ready) {\n                    return;\n                }\n                self.paused = true;\n                if (self.ended) {\n                    return;\n                }\n                dispatchEvent('iv:playerPaused');\n            });\n\n            self.player.bind(window.SC.Widget.Events.FINISH, function() {\n                if (!ready) {\n                    return;\n                }\n                self.ended = true;\n                self.paused = true;\n                dispatchEvent('iv:playerEnded');\n            });\n\n            self.player.bind(window.SC.Widget.Events.ERROR, function(data) {\n                dispatchEvent('iv:playerError', {error: data});\n            });\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        if (!window.SC) {\n            var tag = document.createElement('script');\n            tag.src = \"https://w.soundcloud.com/player/api.js\";\n            tag.async = true;\n            tag.type = 'text/javascript';\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and SoundCloud player\n            tag.onload = function() {\n                SC = window.SC;\n                callback();\n            };\n        } else {\n            callback();\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        if (!this.player) {\n            return;\n        }\n        this.player.play();\n        this.paused = false;\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        if (!this.player) {\n            return false;\n        }\n        this.player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        this.player.seekTo(starttime * 1000);\n        this.player.pause();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Promise<Boolean>}\n     */\n    async seek(time) {\n        time = Math.min(time, this.end);\n        time = Math.max(time, this.start);\n        this.ended = false;\n        let currentTime = await this.getCurrentTime();\n        dispatchEvent('iv:playerSeekStart', {time: currentTime});\n        return new Promise((resolve) => {\n            this.player.seekTo(time * 1000);\n            this.currentTime = time;\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(true);\n        });\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return new Promise((resolve) => {\n            this.player.getPosition(function(position) {\n                resolve(position / 1000);\n            });\n        });\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return this.totaltime;\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        if (this.paused) {\n            return true;\n        }\n        return new Promise((resolve) => {\n            this.player.isPaused(function(paused) {\n                resolve(paused);\n            });\n        });\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        if (this.paused) {\n            return false;\n        }\n        return new Promise((resolve) => {\n            this.player.isPaused(function(paused) {\n                resolve(!paused);\n            });\n        });\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        return this.ended || this.currentTime >= this.end;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // SOUNDCLOUD always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        try {\n            this.player.pause();\n            $(`#${this.node}`).remove();\n        } catch (e) {\n            // Do nothing\n        }\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return this.isPaused ? 'paused' : 'playing';\n    }\n    /**\n     * Set playback rate of the video\n     */\n    setRate() {\n        return false;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        this.player.setVolume(0);\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        this.player.setVolume(100);\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    async isMuted() {\n        return new Promise((resolve) => {\n            this.player.getVolume(function(volume) {\n                resolve(volume === 0);\n            });\n        });\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n\n    /**\n     * Set subtitle\n     */\n    setCaption() {\n        // SoundCloud does not support captions\n    }\n}\n\nexport default SoundCloud;"],"names":["player","constructor","type","frequency","support","playbackrate","quality","password","useAnimationFrame","url","node","self","this","data","$","ajax","M","cfg","wwwroot","dataType","action","contextid","encodeURIComponent","sesskey","json","JSON","parse","title","posterImage","thumbnail_url","ready","$parent","parent","replaceWith","html","find","attr","id","width","height","allow","allowfullscreen","Promise","resolve","SC","callback","window","Widget","bind","Events","READY","getDuration","duration","totaltime","Number","toFixed","PLAY_PROGRESS","currentTime","currentPosition","tag","document","createElement","src","async","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","start","end","allowAutoplay","getElementById","remove","removeClass","aspectratio","Math","min","ended","seekTo","pause","paused","PLAY","PAUSE","FINISH","ERROR","error","play","stop","starttime","time","max","getCurrentTime","getPosition","position","isPaused","isPlaying","isEnded","ratio","destroy","e","getState","setRate","mute","setVolume","volume","unMute","getVolume","originalPlayer","setCaption"],"mappings":"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"}