{"version":3,"file":"rumble.min.js","sources":["../../src/player/rumble.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Rumble Player class\n * Doc: https://www.rumbleplayer.com/developers/Player-Methods.html\n *\n * @module     mod_interactivevideo/player/rumble\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport allowAutoplay from 'mod_interactivevideo/player/checkautoplay';\n\nvar player = {};\n\nclass Rumble {\n    /**\n     * Constructor for the Rumble player.\n     */\n    constructor() {\n        this.type = 'rumble';\n        this.useAnimationFrame = true;\n        this.frequency = 0.1;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n    }\n    async getInfo(url, node) {\n        this.node = node;\n        let self = this;\n        return new Promise((resolve) => {\n            let oEmbed = 'https://rumble.com/api/Media/oembed.json?url=' + encodeURIComponent(url);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                type: 'POST',\n                data: {\n                    action: 'get_from_url',\n                    contextid: M.cfg.contextid,\n                    url: oEmbed, // The URL to get the oEmbed data from.\n                    sesskey: M.cfg.sesskey,\n                },\n            }).done(function(data) {\n                // Reset api.\n                let firstAPIrun = false;\n                self.title = data.title;\n                self.posterImage = data.thumbnail_url;\n                self.duration = Number(data.duration).toFixed(2);\n                let html = $(data.html);\n                let embedurl = html.attr('src');\n                // Regex to get the video id from the embed url https://rumble.com/embed/{id}/\n                let videoId = embedurl.match(/embed\\/([a-zA-Z0-9]+)/)[1];\n                videoId = videoId.split('/')[0]; // This includes the video id and pub id\n                self.videoId = videoId;\n                // Load the Rumble player library.\n                var tag = document.createElement('script');\n                tag.src = 'https://rumble.com/embedJS/' + videoId;\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n                tag.onload = async() => {\n                    // Get the id from the videoId (pubId.videoId || videoId).\n                    let id = videoId.split('.')[1] ? videoId.split('.')[1] : videoId;\n                    window.Rumble(\"play\", {\n                        video: id,\n                        div: node,\n                        rel: 0,\n                        autoplay: 2,\n                        ui: {\n                            logo: {\n                                hidden: true\n                            },\n                            \"fullscreen\": {\n                                hidden: true\n                            },\n                            \"autoplay\": {\n                                hidden: true\n                            },\n                        },\n                        api: function(api) {\n                            // Not sure if rumble has a ready event, so we use this to make sure we only dispatch the event once.\n                            player[node] = api;\n                            if (!firstAPIrun) {\n                                firstAPIrun = true;\n                                resolve({\n                                    duration: self.duration,\n                                    title: self.title,\n                                    posterImage: self.posterImage,\n                                });\n                            }\n                        }\n                    });\n                };\n            });\n        });\n    }\n    /**\n     * Load a new Rumble player instance.\n     *\n     * @param {string} url - The URL of the Rumble video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    async load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.node = node;\n        this.start = start;\n        this.allowAutoplay = await allowAutoplay(document.getElementById(node));\n        if (!this.allowAutoplay) {\n            dispatchEvent('iv:autoplayBlocked');\n        }\n        $('#start-screen, .video-block').addClass('no-pointer');\n        let ready = false;\n        let firstAPIrun = false;\n        let self = this;\n        self.ended = 'unknown';\n        self.paused = 'unknown';\n\n        let oEmbed = 'https://rumble.com/api/Media/oembed.json?url=' + encodeURIComponent(url);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            data: {\n                action: 'get_from_url',\n                contextid: M.cfg.contextid,\n                url: oEmbed, // The URL to get the oEmbed data from.\n                sesskey: M.cfg.sesskey,\n            },\n        }).done(function(data) {\n            // Reset api.\n            firstAPIrun = false;\n            self.title = data.title;\n            self.aspectratio = data.width / data.height;\n            self.posterImage = data.thumbnail_url;\n            let totaltime = Number(data.duration).toFixed(2) - self.frequency;\n            end = !end || end == 0 ? totaltime : Math.min(end, totaltime);\n            end = Number(end).toFixed(2);\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            let html = $(data.html);\n            let embedurl = html.attr('src');\n            // Regex to get the video id from the embed url https://rumble.com/embed/{id}/\n            let videoId = embedurl.match(/embed\\/([a-zA-Z0-9]+)/)[1];\n            videoId = videoId.split('/')[0]; // This includes the video id and pub id\n            self.videoId = videoId;\n            // Load the Rumble player library.\n            var tag = document.createElement('script');\n            tag.src = 'https://rumble.com/embedJS/' + videoId;\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            tag.onload = async() => {\n                // Get the id from the videoId (pubId.videoId || videoId).\n                let id = videoId.split('.')[1] ? videoId.split('.')[1] : videoId;\n                window.Rumble(\"play\", {\n                    video: id,\n                    div: node,\n                    rel: 0,\n                    autoplay: 2,\n                    ui: {\n                        logo: {\n                            hidden: true\n                        },\n                        \"fullscreen\": {\n                            hidden: true\n                        },\n                        \"autoplay\": {\n                            hidden: true\n                        },\n                    },\n                    api: function(api) {\n                        // Not sure if rumble has a ready event, so we use this to make sure we only dispatch the event once.\n                        player[node] = api;\n                        player[node].mute();\n                        if (!showControls) {\n                            $('body').addClass('no-original-controls');\n                        }\n                        if (!firstAPIrun) {\n                            player[node].setCurrentTime(start);\n                            ready = true;\n                            firstAPIrun = true;\n                            dispatchEvent('iv:playerReady', null, document.getElementById(node));\n                        }\n                        $(document).on('timeupdate', function() {\n                            if (!ready) {\n                                return;\n                            }\n\n                            if (player[node].getCurrentTime() < start) {\n                                player[node].setCurrentTime(start);\n                            }\n                            if (player[node].getCurrentTime() >= end + self.frequency) {\n                                player[node].setCurrentTime(end - self.frequency);\n                            }\n                        });\n                        api.on('play', function() {\n                            if (!ready) {\n                                return;\n                            }\n                            self.paused = false;\n                            if (player[node].getCurrentTime() < start) {\n                                player[node].setCurrentTime(start);\n                            }\n                            if (self.ended && player[node].getCurrentTime() >= end) {\n                                player[node].setCurrentTime(start);\n                                player[node].play();\n                                self.ended = false;\n                            }\n                            self.ended = false;\n                            dispatchEvent('iv:playerPlay');\n                            dispatchEvent('iv:playerPlaying');\n                            if (!showControls && !$('body').hasClass('no-original-controls')) {\n                                $('body').addClass('no-original-controls');\n                            }\n                        });\n                        api.on(\"pause\", () => {\n                            if (!ready) {\n                                return;\n                            }\n                            if (self.ended) {\n                                return;\n                            }\n                            self.paused = true;\n                            if (player[node].getCurrentTime() >= end) {\n                                self.ended = true;\n                                dispatchEvent('iv:playerEnded');\n                                return;\n                            } else {\n                                dispatchEvent('iv:playerPaused');\n                            }\n                        });\n                        api.on(\"videoEnd\", () => {\n                            if (!ready) {\n                                return;\n                            }\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                        });\n                    }\n                });\n            };\n        });\n\n    }\n    /**\n     * Plays the Rumble video player.\n     *\n     * This method triggers the play action on the Rumble player instance.\n     */\n    play() {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Rumble video player.\n     *\n     * This method calls the `pause` function on the Rumble player instance,\n     * effectively pausing the video playback.\n     */\n    pause() {\n        if (!player[this.node]) {\n            return false;\n        }\n        player[this.node].pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the playback time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video playback to after pausing.\n     */\n    stop(starttime) {\n        if (!player[this.node]) {\n            return;\n        }\n        player[this.node].pause();\n        player[this.node].setCurrentTime(starttime);\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time (in seconds) to seek to.\n     * @returns {Promise} A promise that resolves when the video player has seeked to the specified time.\n     */\n    seek(time) {\n        if (!player[this.node]) {\n            return time;\n        }\n        time = parseFloat(time);\n        return new Promise((resolve) => {\n            if (time < 0) {\n                time = 0;\n            }\n            this.ended = false;\n            player[this.node].setCurrentTime(time);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(time);\n        });\n    }\n    /**\n     * Retrieves the current playback time of the video player.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getCurrentTime();\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        if (!player[this.node]) {\n            return 0;\n        }\n        return player[this.node].getDuration();\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        if (!player[this.node]) {\n            return true;\n        }\n        return this.paused && player[this.node].getPaused();\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the player is in the 'playing' state, otherwise false.\n     */\n    isPlaying() {\n        if (!player[this.node]) {\n            return false;\n        }\n        return !this.paused;\n    }\n    /**\n     * Checks if the video player has reached the end of the video.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        if (this.ended === 'unknown') {\n            return false;\n        }\n        return this.ended || player[this.node].getCurrentTime() >= this.end;\n    }\n    /**\n     * Calculates the aspect ratio for the video player.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns the default aspect ratio of 16:9.\n     *\n     * @returns {number} The aspect ratio of the video player.\n     */\n    async ratio() {\n        if (!player[this.node]) {\n            return 16 / 9;\n        }\n        return this.aspectratio;\n    }\n\n    /**\n     * Destroys the Rumble player instance by removing it from the DOM.\n     */\n    destroy() {\n        try {\n            $(`#${this.node}`).remove();\n        } catch (e) {\n            window.console.error(e);\n        }\n        player[this.node] = null;\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Retrieves the current state of the player.\n     *\n     * @returns {Object} The current state of the player.\n     */\n    async getState() {\n        const paused = this.paused;\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate of the video player.\n     *\n     */\n    setRate() {\n        // Rumble does not support playback rate.\n    }\n    /**\n     * Mutes the Rumble player.\n     */\n    mute() {\n        player[this.node].mute();\n        this.muted = true;\n        dispatchEvent('iv:playerVolumeChange', {volume: 0});\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        player[this.node].unmute();\n        player[this.node].setVolume(1);\n        this.muted = false;\n        dispatchEvent('iv:playerVolumeChange', {volume: 1});\n    }\n\n    isMuted() {\n        return this.muted;\n    }\n    /**\n     * Returns the original Rumble player instance.\n     *\n     * @returns {Object} The Rumble player instance.\n     */\n    originalPlayer() {\n        return player[this.node];\n    }\n    /**\n     * Sets the video quality for the player and dispatches a quality change event.\n     *\n     */\n    setQuality() {\n        // Rumble does not support video quality.\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Object} An object containing:\n     * - `qualities` {Array<string>}: List of available video quality options.\n     * - `qualitiesLabel` {Array<string>}: List of labels corresponding to the video quality options.\n     * - `currentQuality` {string|number}: The current video quality setting.\n     */\n    getQualities() {\n        return null;\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        // Rumble does not support captions.\n        return track;\n    }\n}\n\nexport default Rumble;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","url","node","self","this","Promise","resolve","oEmbed","encodeURIComponent","ajax","M","cfg","wwwroot","data","action","contextid","sesskey","done","firstAPIrun","title","posterImage","thumbnail_url","duration","Number","toFixed","videoId","html","attr","match","split","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","async","id","window","Rumble","video","div","rel","autoplay","ui","logo","hidden","api","start","end","opts","showControls","allowAutoplay","getElementById","addClass","ready","ended","paused","aspectratio","width","height","totaltime","Math","min","mute","setCurrentTime","on","getCurrentTime","play","hasClass","pause","stop","starttime","seek","time","parseFloat","getDuration","isPaused","getPaused","isPlaying","isEnded","destroy","remove","e","console","error","setRate","muted","volume","unMute","unmute","setVolume","isMuted","originalPlayer","setQuality","getQualities","setCaption","track"],"mappings":"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"}