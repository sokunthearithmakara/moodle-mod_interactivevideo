{"version":3,"file":"rumble.min.js","sources":["../../src/player/rumble.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Rumble Player class\n * Doc: https://www.rumbleplayer.com/developers/Player-Examples.html\n *\n * @module     mod_interactivevideo/player/rumble\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\n\nvar player;\n\nclass Rumble {\n    /**\n     * Constructor for the Rumble player.\n     */\n    constructor() {\n        this.type = 'rumble';\n        this.useAnimationFrame = true;\n        this.frequency = 0.1;\n        this.support = {\n            playbackrate: false,\n            quality: false,\n            password: false,\n        };\n    }\n    /**\n     * Load a new Rumble player instance.\n     *\n     * @param {string} url - The URL of the Rumble video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    load(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.start = start;\n\n        $('#start-screen, .video-block').addClass('no-pointer');\n        let ready = false;\n        let firstAPIrun = false;\n        let self = this;\n        self.ended = 'unknown';\n        self.paused = 'unknown';\n\n        let oEmbed = 'https://rumble.com/api/Media/oembed.json?url=' + encodeURIComponent(url);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            data: {\n                action: 'get_from_url',\n                contextid: M.cfg.contextid,\n                url: oEmbed, // The URL to get the oEmbed data from.\n                sesskey: M.cfg.sesskey,\n            },\n        }).done(function(data) {\n            // Reset api.\n            firstAPIrun = false;\n            self.title = data.title;\n            self.aspectratio = data.width / data.height;\n            self.posterImage = data.thumbnail_url;\n            let totaltime = Number(data.duration).toFixed(2) - self.frequency;\n            end = !end || end == 0 ? totaltime : Math.min(end, totaltime);\n            end = Number(end).toFixed(2);\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            let html = $(data.html);\n            let embedurl = html.attr('src');\n            // Regex to get the video id from the embed url https://rumble.com/embed/{id}/\n            let videoId = embedurl.match(/embed\\/([a-zA-Z0-9]+)/)[1];\n            videoId = videoId.split('/')[0]; // This includes the video id and pub id\n            self.videoId = videoId;\n            // Load the Rumble player library.\n            var tag = document.createElement('script');\n            tag.src = 'https://rumble.com/embedJS/' + videoId;\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            tag.onload = async() => {\n                // Get the id from the videoId (pubId.videoId || videoId).\n                let id = videoId.split('.')[1] ? videoId.split('.')[1] : videoId;\n                window.Rumble(\"play\", {\n                    video: id,\n                    div: node,\n                    rel: 0,\n                    autoplay: 2,\n                    ui: {\n                        logo: {\n                            hidden: true\n                        },\n                        \"fullscreen\": {\n                            hidden: true\n                        },\n                        \"autoplay\": {\n                            hidden: true\n                        },\n                    },\n                    api: function(api) {\n                        // Not sure if rumble has a ready event, so we use this to make sure we only dispatch the event once.\n                        player = api;\n                        player.setVolume(0);\n                        if (!showControls) {\n                            $('body').addClass('no-original-controls');\n                        }\n                        if (!firstAPIrun) {\n                            player.setCurrentTime(start);\n                            ready = true;\n                            firstAPIrun = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                        $(document).on('timeupdate', function() {\n                            if (!ready) {\n                                return;\n                            }\n\n                            self.paused = true;\n                            if (player.getCurrentTime() < start) {\n                                player.setCurrentTime(start);\n                            }\n                            if (player.getCurrentTime() >= end + self.frequency) {\n                                player.setCurrentTime(end - self.frequency);\n                            }\n                        });\n                        api.on('play', function() {\n                            if (!ready) {\n                                return;\n                            }\n                            self.paused = false;\n                            if (player.getCurrentTime() < start) {\n                                player.setCurrentTime(start);\n                            }\n                            if (self.ended && player.getCurrentTime() >= end) {\n                                player.setCurrentTime(start);\n                                player.play();\n                                self.ended = false;\n                            }\n                            self.ended = false;\n                            dispatchEvent('iv:playerPlaying');\n                            if (!showControls && !$('body').hasClass('no-original-controls')) {\n                                $('body').addClass('no-original-controls');\n                            }\n                        });\n                        api.on(\"pause\", () => {\n                            if (!ready) {\n                                return;\n                            }\n                            if (self.ended) {\n                                return;\n                            }\n                            self.paused = true;\n                            if (player.getCurrentTime() >= end) {\n                                self.ended = true;\n                                dispatchEvent('iv:playerEnded');\n                                return;\n                            } else {\n                                dispatchEvent('iv:playerPaused');\n                            }\n                        });\n                        api.on(\"videoEnd\", () => {\n                            if (!ready) {\n                                return;\n                            }\n                            self.ended = true;\n                            self.paused = true;\n                            dispatchEvent('iv:playerEnded');\n                        });\n                    }\n                });\n            };\n        });\n\n    }\n    /**\n     * Plays the Rumble video player.\n     *\n     * This method triggers the play action on the Rumble player instance.\n     */\n    play() {\n        player.play();\n        this.paused = false;\n    }\n    /**\n     * Pauses the Rumble video player.\n     *\n     * This method calls the `pause` function on the Rumble player instance,\n     * effectively pausing the video playback.\n     */\n    pause() {\n        player.pause();\n        this.paused = true;\n        return true;\n    }\n    /**\n     * Stops the video playback and sets the playback time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video playback to after pausing.\n     */\n    stop(starttime) {\n        player.pause();\n        player.setCurrentTime(starttime);\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time (in seconds) to seek to.\n     * @returns {Promise} A promise that resolves when the video player has seeked to the specified time.\n     */\n    seek(time) {\n        time = parseFloat(time);\n        return new Promise((resolve) => {\n            if (time < 0) {\n                time = 0;\n            }\n            this.ended = false;\n            player.setCurrentTime(time);\n            dispatchEvent('iv:playerSeek', {time: time});\n            resolve(time);\n        });\n    }\n    /**\n     * Retrieves the current playback time of the video player.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        return this.paused && player.getPaused();\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the player is in the 'playing' state, otherwise false.\n     */\n    isPlaying() {\n        return !this.isPaused();\n    }\n    /**\n     * Checks if the video player has reached the end of the video.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return this.ended || player.getCurrentTime() >= this.end;\n    }\n    /**\n     * Calculates the aspect ratio for the video player.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns the default aspect ratio of 16:9.\n     *\n     * @returns {number} The aspect ratio of the video player.\n     */\n    async ratio() {\n        return this.aspectratio;\n    }\n\n    /**\n     * Destroys the Rumble player instance by removing it from the DOM.\n     */\n    destroy() {\n        $(\"#player\").remove();\n        player.off();\n    }\n    /**\n     * Retrieves the current state of the player.\n     *\n     * @returns {Object} The current state of the player.\n     */\n    async getState() {\n        const paused = this.paused;\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate of the video player.\n     *\n     */\n    setRate() {\n        // Rumble does not support playback rate.\n    }\n    /**\n     * Mutes the Rumble player.\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        player.unmute();\n    }\n    /**\n     * Returns the original Rumble player instance.\n     *\n     * @returns {Object} The Rumble player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the video quality for the player and dispatches a quality change event.\n     *\n     */\n    setQuality() {\n        // Rumble does not support video quality.\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Object} An object containing:\n     * - `qualities` {Array<string>}: List of available video quality options.\n     * - `qualitiesLabel` {Array<string>}: List of labels corresponding to the video quality options.\n     * - `currentQuality` {string|number}: The current video quality setting.\n     */\n    getQualities() {\n        return null;\n    }\n}\n\nexport default Rumble;"],"names":["player","constructor","type","useAnimationFrame","frequency","support","playbackrate","quality","password","load","url","start","end","opts","showControls","node","addClass","ready","firstAPIrun","self","this","ended","paused","oEmbed","encodeURIComponent","ajax","M","cfg","wwwroot","data","action","contextid","sesskey","done","title","aspectratio","width","height","posterImage","thumbnail_url","totaltime","Number","duration","toFixed","Math","min","videoId","html","attr","match","split","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onload","async","id","window","Rumble","video","div","rel","autoplay","ui","logo","hidden","api","setVolume","setCurrentTime","on","getCurrentTime","play","hasClass","pause","stop","starttime","seek","time","parseFloat","Promise","resolve","getDuration","isPaused","getPaused","isPlaying","isEnded","destroy","remove","off","setRate","mute","unMute","unmute","originalPlayer","setQuality","getQualities"],"mappings":"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"}