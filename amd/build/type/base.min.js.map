{"version":3,"file":"base.min.js","sources":["../../src/type/base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base class to be extended by other content types\n *\n * @module     mod_interactivevideo/type/base\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {renderContent, defaultDisplayContent, formatText} from 'mod_interactivevideo/displaycontent';\nimport {renderAnnotationItems} from 'mod_interactivevideo/viewannotation';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {add as addToast} from 'core/toast';\nimport ModalForm from 'core_form/modalform';\nimport 'mod_interactivevideo/libraries/jquery-ui';\n\nclass Base {\n    /**\n     * Creates an instance of the base class for interactive video.\n     *\n     * @param {Object} player - The player object.\n     * @param {Array} annotations - The annotations object.\n     * @param {number} interaction - The interaction id.\n     * @param {number} course - The course id.\n     * @param {number} userid - The user id.\n     * @param {number} completionpercentage - The required completion percentage set in the activity settings.\n     * @param {number} gradeiteminstance - The grade item instance id.\n     * @param {number} grademax - The maximum grade set in the activity settings.\n     * @param {string} vtype - The video type (yt, vimeo, dailymotion, html4video).\n     * @param {boolean} preventskip - Prevent skipping of the video.\n     * @param {number} totaltime - The total time of the video in seconds including the skipped segments.\n     * @param {number} start - The start time of the video.\n     * @param {number} end - The end time of the video.\n     * @param {Object} properties - Properties of the interaction type defined in the PHP class.\n     * @param {number} cm - The course module id.\n     * @param {string} token - Access token.\n     * @param {Object} displayoptions - Display options.\n     * @param {number} completionid - Completion record id.\n     * @param {number} extracompletion - Extra completion.\n     * @param {Object} [options={}] - Additional options.\n     *\n     */\n    constructor(player, annotations, interaction, course, userid, completionpercentage, gradeiteminstance, grademax, vtype,\n        preventskip, totaltime, start, end, properties, cm, token, displayoptions, completionid, extracompletion, options = {}) {\n        /**\n         * Access token\n         * @type {string}\n         * @private\n         */\n        this.token = token;\n\n        /**\n         * The course module id\n         * @type {number}\n         * @private\n         */\n        this.cm = cm;\n\n        /**\n         * The player object\n         * @type {Object}\n         * @private\n         */\n\n        this.player = player;\n        /**\n         * The annotations object\n         * @type {Array}\n         * @private\n         */\n        this.annotations = annotations;\n        /**\n         * The interaction id\n         * @type {number}\n         * @private\n         */\n        this.interaction = interaction;\n        /**\n         * The course id\n         * @type {number}\n         * @private\n         */\n        this.course = course;\n        /**\n         * The user id\n         * @type {number}\n         * @private\n         */\n        this.userid = userid;\n        /**\n         * The required completion percentage set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.completionpercentage = completionpercentage;\n        /**\n         * The grade item instance id\n         * @type {number}\n         * @private\n         */\n        this.gradeiteminstance = gradeiteminstance;\n        /**\n         * The maximum grade set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.grademax = grademax;\n        /**\n         * The video type\n         * @type {string} (yt, vimeo, dailymotion, html4video)\n         * @private\n         */\n        this.vtype = vtype;\n        /**\n         * Prevent skipping of the video\n         * @type {boolean}\n         * @private\n         * @default false\n         */\n        this.preventskip = preventskip;\n        /**\n         * The total time of the video in seconds including the skipped segments.\n         * @type {number}\n         * @private\n         */\n        this.totaltime = totaltime;\n        /**\n         * The start time of the video\n         * @type {number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {number}\n         * @private\n         */\n        this.end = end;\n        /**\n         * Properties of the interaction type defined in the php class\n         * @type {Object}\n         * @private\n         */\n        this.prop = properties;\n        /**\n         * Display options\n         * @type {Object}\n         * @private\n         */\n        this.displayoptions = displayoptions;\n        /**\n         * Completion id\n         * @type {number}\n         */\n        this.completionid = Number(completionid);\n        /**\n         * Extra completion\n         * @type {Object}\n         */\n        this.extracompletion = extracompletion ? JSON.parse(extracompletion) : {};\n\n        /**\n         * Additional options\n         */\n        this.options = options;\n\n        /**\n         * Cache the annotations\n         * @type {Object}\n         */\n        this.cache = {};\n    }\n\n    /**\n     * Dispatch an event\n     * @param {string} name The event name\n     * @param {Object} detail The event detail\n     * @returns {void}\n     */\n    dispatchEvent(name, detail) {\n        dispatchEvent(name, detail);\n    }\n\n    /**\n     * Enable the HTML5 color picker in form elements\n     * @returns {void}\n     */\n    enableColorPicker() {\n        $(document).on('input', 'input[type=\"color\"]', function() {\n            const color = $(this).val();\n            $(this).closest('.color-picker').css('background-color', color);\n            $(this).closest('.fitem').find('input[type=\"text\"]').val(color);\n        });\n        $(document).on('change', 'input[type=\"color\"]', function() {\n            $('.modal-backdrop').removeClass('opacity-0');\n        });\n        $(document).off('click', '.modal input[type=\"color\"]').on('click', '.modal input[type=\"color\"]', function() {\n            $('.modal-backdrop').addClass('opacity-0');\n        });\n    }\n\n    /**\n     * Formats the given text content.\n     *\n     * @param {string} text - The text content to format.\n     * @param {boolean} [shorttext=false] - Optional flag to indicate if the text should be formatted as short text.\n     * @returns {string} The formatted text.\n     */\n    formatContent(text, shorttext = false) {\n        return formatText(text, shorttext);\n    }\n\n    /**\n     * Renders the given annotation in the specified format.\n     *\n     * @param {Object} annotation - The annotation object to render.\n     * @param {string} [format='html'] - The format in which to render the annotation. Defaults to 'html'.\n     * @returns {promise} The rendered content.\n     */\n    async render(annotation, format = 'html') {\n        return renderContent(annotation, format);\n    }\n\n    /**\n     * Adds a notification with a specified message and type.\n     *\n     * @param {string} msg - The message to be displayed in the notification.\n     * @param {string} [type='danger'] - The type of the notification (e.g., 'success', 'info', 'warning', 'danger').\n     */\n    addNotification(msg, type = 'danger') {\n        addToast(msg, {type});\n    }\n    /**\n     * Initialize the interaction type\n     * @returns {void}\n     */\n    init() {\n        // Do nothing.\n    }\n    /**\n     * Check if the interaction is skipped\n     * @param {number} timestamp The timestamp of the interaction\n     * @returns {boolean}\n     */\n    isSkipped(timestamp) {\n        return this.isInSkipSegment(timestamp) || !this.isBetweenStartAndEnd(timestamp);\n    }\n\n    /**\n     * Converts a given number of seconds into a formatted string (HH:MM:SS).\n     *\n     * @param {number} s - The number of seconds to convert.\n     * @param {boolean} [dynamic=false] - If true, omits the hours part if less than 1 hour.\n     * @param {boolean} [rounded=false] - If true, rounds the seconds to the nearest whole number.\n     * @returns {string} The formatted time string.\n     */\n    convertSecondsToHMS(s, dynamic = false, rounded = false) {\n        if (rounded) {\n            s = Math.round(s);\n        }\n        const hours = Math.floor(s / 3600).toString().padStart(2, '0');\n        const minutes = Math.floor((s % 3600) / 60).toString().padStart(2, '0');\n        let seconds = (s % 60).toFixed(2);\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        if (rounded) {\n            seconds = Math.floor(s % 60).toString().padStart(2, '0');\n        }\n        if (dynamic && (s / 3600) < 1) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    /**\n     * HMS to seconds\n     * @param {string} hms The time in HH:MM:SS or MM:SS or SS format\n     * @returns {number}\n     */\n    convertHMSToSeconds(hms) {\n        return hms.split(':').reduce((acc, time) => (60 * acc) + +time);\n    }\n\n    /**\n     * Render edit items\n     * @param {Array} annotations The annotations array\n     * @param {Object} listItem The list item\n     * @param {Object} item The annotation object\n     * @returns {void}\n     */\n    renderEditItem(annotations, listItem, item) {\n        this.annotations = annotations;\n        listItem.removeAttr('id').removeClass('d-none');\n        listItem.attr('data-type', item.type);\n        listItem.addClass(item.type + (this.isSkipped(item.timestamp) ? ' skipped' : ''));\n        listItem.attr('data-timestamp', item.timestamp)\n            .attr('data-id', item.id);\n\n        listItem.find('.timestamp').text(this.convertSecondsToHMS(item.timestamp, this.totaltime < 3600, true))\n            .attr('data-timestamp', item.timestamp);\n\n        listItem.find('.title').html(item.formattedtitle);\n        if (item.hascompletion == 1) {\n            listItem.find('.btn.xp span').text(item.xp);\n            listItem.attr('data-xp', item.xp);\n        } else {\n            listItem.find('.btn.xp').remove();\n        }\n\n        listItem.find('.type-icon i').addClass(this.prop.icon);\n        listItem.find('.type-icon').attr('title', this.prop.title);\n        // If out of range, make the title text grey\n        if (Number(item.timestamp) > this.end || Number(item.timestamp) < this.start || this.isSkipped(item.timestamp)) {\n            listItem.find('.title').addClass('text-secondary');\n            listItem.attr('data-xp', 0);\n            // Append a badge to the title\n            listItem.find('.title')\n                .append(`<span class=\"badge badge-warning ml-2\">\n                            ${M.util.get_string('skipped', 'mod_interactivevideo')}</span>`);\n        }\n\n        listItem.find('[data-field]').attr('data-id', item.id);\n        listItem.find('[data-field=\"xp\"]').val(item.xp);\n        listItem.find('[data-field=\"title\"]').val(item.title);\n        listItem.find('[data-field=\"timestamp\"]').val(this.convertSecondsToHMS(item.timestamp));\n        if (!this.prop.allowmultiple) {\n            listItem.find('.btn.copy').remove();\n        }\n        listItem.appendTo('#annotation-list');\n        return listItem;\n    }\n\n    /**\n     * Check if the timestamp is between the start and end\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isBetweenStartAndEnd(timestamp) {\n        return timestamp <= this.end && timestamp >= this.start;\n    }\n\n    /**\n     * Check if the annotation is already added at the timestamp\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isAlreadyAdded(timestamp) {\n        return this.annotations.some(x => x.timestamp == timestamp);\n    }\n\n    /**\n     * Check if the annotation is in the skip segment\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isInSkipSegment(timestamp) {\n        return this.annotations.some(x => x.type == 'skipsegment' &&\n            Number(x.timestamp) < Number(timestamp) && Number(x.title) > Number(timestamp));\n    }\n\n    /**\n     * Validate the timestamp format\n     * @param {string} timestamp The timestamp\n     * @returns {boolean}\n     */\n    validateTimestampFormat(timestamp) {\n        return /^([0-9]{2}):([0-5][0-9]):([0-5][0-9])(\\.\\d{2})?$/.test(timestamp);\n    }\n\n    /**\n     * Validate the timestamp\n     * @param {string} fld The field\n     * @param {string} hiddenfield The hidden field\n     * @returns {void}\n     */\n    validateTimestampFieldValue(fld, hiddenfield) {\n        const self = this;\n        $(document).on('change', `form [name=${fld}]`, async function(e) {\n            e.preventDefault();\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is between the start and end time.\n            const parts = $(this).val().split(':');\n            const timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                const message = M.util.get_string('timemustbebetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp does not already exist.\n            if (self.isAlreadyAdded(timestamp)) {\n                self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is not in the skip segment.\n            if (self.isInSkipSegment(timestamp)) {\n                self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            $(`form [name=${hiddenfield}]`).val(timestamp);\n\n            await self.player.seek(timestamp, true);\n            // Make sure the video is paused.\n            await self.player.pause();\n        });\n    }\n\n    /**\n     * Add an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} timestamp The timestamp\n     * @param {number} coursemodule The course module id\n     * @returns {void}\n     */\n    addAnnotation(annotations, timestamp, coursemodule) {\n        let self = this;\n        this.annotations = annotations;\n        if (!this.isBetweenStartAndEnd(timestamp)) {\n            const message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                \"start\": self.convertSecondsToHMS(self.start),\n                \"end\": self.convertSecondsToHMS(self.end),\n            });\n            self.addNotification(message);\n            return;\n        }\n\n        if (self.isAlreadyAdded(timestamp)) {\n            self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n            return;\n        }\n\n        if (self.isInSkipSegment(timestamp)) {\n            self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n            return;\n        }\n\n        const startHMS = self.convertSecondsToHMS(self.start);\n        const endHMS = self.convertSecondsToHMS(self.end);\n        const timestampHMS = timestamp > 0 ? self.convertSecondsToHMS(timestamp) : startHMS;\n\n        const data = {\n            id: 0,\n            timestamp: timestamp > 0 ? timestamp : self.start,\n            timestampassist: timestampHMS,\n            title: self.prop.title,\n            start: startHMS,\n            end: endHMS,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n        };\n\n        const form = new ModalForm({\n            formClass: self.prop.form,\n            args: data,\n            modalConfig: {\n                title: M.util.get_string('addinteractiontitle', 'mod_interactivevideo', {\n                    \"name\": self.prop.title.toLowerCase(),\n                    \"time\": timestampHMS\n                }),\n            }\n        });\n        $(\"#contentmodal\").modal('hide');\n        $('#addcontentdropdown a').removeClass('active');\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            setTimeout(() => {\n                $('body').addClass('modal-open');\n            }, 500);\n            try {\n                self.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: function(data) {\n                    const newAnnotation = JSON.parse(data);\n                    dispatchEvent('annotationupdated', {\n                        annotation: newAnnotation,\n                        action: 'add'\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Copy an annotation\n     * @param {number} id The annotation id\n     * @param {number} timestamp The timestamp\n     * @returns {void}\n     */\n    cloneAnnotation(id, timestamp) {\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'copy_item',\n                id: id,\n                sesskey: M.cfg.sesskey,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n                timestamp: timestamp\n            },\n            success: function(data) {\n                const newAnnotation = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: newAnnotation,\n                    action: 'clone'\n                });\n            }\n        });\n    }\n\n    /**\n     * Edit an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    editAnnotation(annotations, id) {\n        this.annotations = annotations;\n        let self = this;\n        const annotation = annotations.find(x => x.id == id);\n        const timestamp = annotation.timestamp;\n        const timestampassist = this.convertSecondsToHMS(timestamp);\n\n        annotation.timestampassist = timestampassist;\n        annotation.start = this.convertSecondsToHMS(this.start);\n        annotation.end = this.convertSecondsToHMS(this.end);\n        annotation.contextid = M.cfg.contextid;\n\n        const title = annotation.type === 'skipsegment'\n            ? M.util.get_string('skipsegmentcontent', 'ivplugin_skipsegment').toLowerCase()\n            : annotation.formattedtitle;\n\n        let modalTitle = M.util.get_string('editinteractiontitlenotime', 'mod_interactivevideo', title);\n        if (timestamp > 0) {\n            modalTitle = M.util.get_string('editinteractiontitle', 'mod_interactivevideo', {\n                name: title,\n                time: timestampassist\n            });\n        }\n\n        const form = new ModalForm({\n            formClass: this.prop.form,\n            args: annotation,\n            modalConfig: {\n                title: modalTitle,\n            }\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            try {\n                this.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            this.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            this.annotations = this.annotations.filter(x => x.id != id);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n            }).done(function(data) {\n                const updated = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: updated,\n                    action: 'edit'\n                });\n            });\n        });\n    }\n\n    /**\n     * Delete an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    deleteAnnotation(annotations, id) {\n        this.annotations = annotations;\n        const annotation = this.annotations.find(x => x.id == id);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'delete_item',\n                sesskey: M.cfg.sesskey,\n                id: id,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.interaction,\n            },\n            success: function() {\n                dispatchEvent('annotationdeleted', {\n                    annotation: annotation,\n                });\n            },\n        });\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form\n     * @return {jQuery} The modal body element\n     */\n    onEditFormLoaded(form) {\n        return form.modal.modal.find('.modal-body');\n    }\n\n    /**\n     * Called after the annotation is edited/added/quick edited (after everything is rendered).\n     * @param {Object} annotation The annotation object\n     * @return {void}\n     */\n    postEditCallback(annotation) {\n        return this.runInteraction(annotation);\n    }\n\n    /**\n     * Check if the page is in edit mode\n     * @returns {boolean}\n     */\n    isEditMode() {\n        return this.options.isEditMode;\n    }\n\n    /**\n     * Check if the page is in preview mode\n     * @returns {boolean}\n     */\n    isPreviewMode() {\n        return this.options.isPreviewMode;\n    }\n\n    /**\n     * Check if the annotation is clickable from video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isClickable(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.clickablebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.clickableaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Visibility on the video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isVisible(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.visiblebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.visibleaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Render the item on the video navigation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderItemOnVideoNavigation(annotation) {\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        if (!this.totaltime) {\n            this.totaltime = this.end - this.start;\n        }\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        if (this.isVisible(annotation)) {\n            let classes = annotation.type + ' annotation li-draggable ';\n            if (annotation.completed) {\n                classes += 'completed ';\n            }\n            if (!this.isClickable(annotation)) {\n                classes += 'no-pointer-events ';\n            }\n            if (this.isSkipped(annotation.timestamp)) {\n                classes += 'skipped ';\n            }\n            if (annotation.hascompletion == 0) {\n                classes += 'no-completion ';\n            }\n            if (this.isEditMode()) {\n                $(\"#video-nav ul\").append(`<li class=\"${classes}\"  data-timestamp=\"${annotation.timestamp}\"\n        data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\">\n        <div class=\"item\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n        data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" data-original-title='<div class=\"d-flex align-items-center\">\n        <i class=\"${this.prop.icon} mr-2\"></i>\n        <span>${annotation.formattedtitle}</span></div>'></div></li>`);\n            } else {\n                $(\"#interactions-nav ul\").append(`<li class=\"${classes}\"  data-timestamp=\"${annotation.timestamp}\"\n                    data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\"><div class=\"item\" data-toggle=\"tooltip\"\n                     data-container=\"#wrapper\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\"\n                       data-original-title='<div class=\"d-flex align-items-center\">\n                        <i class=\"${this.prop.icon} mr-2\"></i>\n                        <span>${annotation.formattedtitle}</span></div>'></div></li>`);\n            }\n        }\n    }\n\n    /**\n     * Render the viewer for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {Promise}\n     */\n    renderViewer(annotation) {\n        return defaultDisplayContent(annotation, this.player, this.start, this.end);\n    }\n\n    /**\n     * Render the container for the annotation\n     * @param  {Object} annotation The annotation object\n     */\n    renderContainer(annotation) {\n        if (annotation.hascompletion == 0) {\n            return;\n        }\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        if (annotation.completiontracking != 'manual') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $completiontoggle.prop('disabled', true);\n            $completiontoggle.find('span').text(\n                annotation.completed\n                    ? `${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`\n                    : `${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`\n            );\n        }\n        if (annotation.completed) {\n            return;\n        }\n        if ((annotation.completiontracking == 'view' || annotation.completiontracking == 'manual')\n            && annotation.requiremintime > 0) {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2 info\" data-toggle=\"tooltip\"\n            data-container=\"#wrapper\" data-trigger=\"hover\"\n            data-title=\"${M.util.get_string(\"spendatleast\", \"mod_interactivevideo\", annotation.requiremintime)}\"></i>`);\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('show');\n            }, 1000);\n            setTimeout(function() {\n                $message.find('[data-toggle=\"tooltip\"]').tooltip('hide');\n            }, 3000);\n        }\n    }\n\n    /**\n     * Callback to excute after the content is rendered.\n     * @returns {void}\n     */\n    postContentRender() {\n        // To be overridden by the child class.\n    }\n\n    /**\n     * Set draggable\n     * @param {string} elem The element to make draggable\n     */\n    setModalDraggable(elem) {\n        $(elem).draggable({handle: \".modal-header\"});\n    }\n\n    /**\n     * Formats a given time in seconds into a human-readable string.\n     *\n     * @param {number} seconds - The time in seconds to format.\n     * @returns {string} A string representing the formatted time in hours, minutes, and seconds.\n     */\n    formatTime(seconds) {\n        seconds = parseInt(seconds);\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    }\n\n\n    /**\n     * Callback to excute after item is successfully marked complete or incomplete.\n     * @param {Array} annotations Updated annotations\n     * @param {Object} thisItem The current annotation\n     * @param {string} action The action performed (e.g. mark-done, mark-undone)\n     * @param {string} type The type of completion (e.g. manual, automatic)\n     */\n    completionCallback(annotations, thisItem, action, type) {\n        const $message = $(`#message[data-id='${thisItem.id}']`);\n        const $toggleButton = $message.find(`#completiontoggle`);\n        if (type == 'manual') {\n            $toggleButton.prop('disabled', false);\n            $toggleButton.find(`i`)\n                .removeClass('fa-spin bi-arrow-repeat')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n            $toggleButton.find(`span`).show();\n        } else if (type == 'automatic') {\n            $toggleButton.find(`i`).removeClass('bi-check2 bi-circle')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n        }\n\n        let audio;\n        if (action == 'mark-done') {\n            $toggleButton\n                .removeClass('btn-secondary mark-done')\n                .addClass('btn-success mark-undone');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/point-awarded.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('badge-secondary').addClass('alert-success');\n            if (thisItem.xp > 0) {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).text(thisItem.earned == thisItem.xp ?\n                    Number(thisItem.earned) + ' XP' : `${Number(thisItem.earned)}/${thisItem.xp} XP`);\n            } else {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).hide();\n            }\n        } else if (action == 'mark-undone') {\n            $toggleButton\n                .removeClass('btn-success mark-undone').addClass('btn-secondary mark-done');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('alert-success').addClass('badge-secondary');\n        }\n\n        // Update the completion button.\n        $toggleButton.find(`span`).text('');\n        if (thisItem.earned > 0) {\n            if (action == 'mark-undone') {\n                this.addNotification(M.util.get_string('xplost', 'mod_interactivevideo', Number(thisItem.earned)), 'info');\n            } else if (action == 'mark-done') {\n                this.addNotification(M.util.get_string('xpearned', 'mod_interactivevideo', Number(thisItem.earned)), 'success');\n            }\n        }\n\n        if (type == 'manual') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}`);\n            }\n        } else if (type == 'automatic') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`);\n            }\n        }\n        return 'done';\n    }\n\n    /**\n     * Toggle completion of an item\n     * @param {number} id The annotation id\n     * @param {string} action The action to perform (mark-done, mark-undone)\n     * @param {string} type The type of completion (manual, automatic)\n     * @param {{}} [details={}] Completion details\n     * @returns {Promise}\n     */\n    toggleCompletion(id, action, type = 'manual', details = {}) {\n        // Skip if the page is the interactions page or in preview-mode.\n        if (this.isEditMode()) {\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        if (this.isPreviewMode()) {\n            this.addNotification(M.util.get_string('completionnotrecordedinpreviewmode', 'mod_interactivevideo'));\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        // Gradable items (hascompletion)\n        const gradableitems = this.annotations.filter(x => x.hascompletion == '1');\n        const totalXp = gradableitems.map(({xp}) => Number(xp)).reduce((a, b) => a + b, 0);\n        let completedItems = gradableitems.filter(({completed}) => completed);\n        let earnedXp = completedItems.map(({earned}) => Number(earned)).reduce((a, b) => a + b, 0);\n\n        completedItems = completedItems.map(({id}) => id);\n        let thisItem = gradableitems.find(({id: itemId}) => itemId == id);\n        let completionDetails = {\n            id,\n        };\n        if (action == 'mark-done') {\n            const completeTime = new Date();\n            completionDetails.hasDetails = details.details ? true : false;\n            completionDetails.xp = details.xp || thisItem.xp;\n            let windowAnno = window.ANNOS.find(x => x.id == id);\n            completionDetails.duration = details.duration\n                || (windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime));\n            completionDetails.timecompleted = details.timecompleted || completeTime.getTime();\n            const completiontime = completeTime.toLocaleString();\n            let duration = this.formatTime(completionDetails.duration / 1000);\n            completionDetails.reportView = details.reportView ||\n                `<span data-toggle=\"tooltip\" data-html=\"true\"\n                 data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                 ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span></span>'>\n                 <i class=\"fa fa-check text-success\"></i><br><span>${Number(completionDetails.xp)}</span></span>`;\n        }\n        if (action == 'mark-done') {\n            completedItems.push(id.toString());\n            earnedXp += Number(completionDetails.xp);\n        } else if (action == 'mark-undone') {\n            completedItems = completedItems.filter(itemId => itemId != id);\n            earnedXp -= Number(thisItem.earned);\n        }\n\n        let completed;\n        if (Number(this.completionpercentage) > 0) { // Completion percentage is set.\n            completed = (completedItems.length / gradableitems.length) * 100 >= Number(this.completionpercentage) ? 1 : 0;\n        } else {\n            completed = gradableitems.length == completedItems.length ? 1 : 0;\n        }\n        return new Promise((resolve) => {\n            $.ajax({\n                url: `${M.cfg.wwwroot}/mod/interactivevideo/ajax.php`,\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_progress',\n                    markdone: action == 'mark-done',\n                    sesskey: M.cfg.sesskey,\n                    id: this.interaction,\n                    uid: this.userid,\n                    percentage: (completedItems.length / gradableitems.length) * 100,\n                    g: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                    gradeiteminstance: this.gradeiteminstance,\n                    c: completed,\n                    xp: earnedXp,\n                    completeditems: JSON.stringify(completedItems),\n                    completiondetails: JSON.stringify(completionDetails),\n                    details: JSON.stringify(details.details || {}),\n                    annotationtype: thisItem.type,\n                    token: this.token,\n                    cmid: this.cm,\n                    completionid: this.completionid,\n                    contextid: thisItem.contextid,\n                    updatestate: this.completionpercentage > 0 || Object.keys(this.extracompletion).length != 0 ? 1 : 0,\n                    courseid: this.course,\n                },\n                success: (res) => {\n                    // Update the annotations array.\n                    const annotations = this.annotations.map(x => {\n                        if (x.id == id) {\n                            x.completed = action == 'mark-done';\n                            x.earned = completionDetails.xp || 0;\n                        }\n                        return x;\n                    });\n\n                    renderAnnotationItems(annotations, this.start, this.totaltime);\n                    thisItem.earned = completionDetails.xp || 0;\n                    this.completionCallback(annotations, thisItem, action, type);\n                    dispatchEvent('completionupdated', {\n                        annotations,\n                        completionpercentage: (completedItems.length / gradableitems.length) * 100,\n                        grade: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                        completed,\n                        xp: earnedXp,\n                        completeditems: completedItems,\n                        target: thisItem,\n                        action,\n                        type,\n                        response: res,\n                    });\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Enable manual completion of item\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    enableManualCompletion(annotation) {\n        let self = this;\n        const $message = $(`#message[data-id='${annotation.id}']`);\n        $message.off('click', 'button#completiontoggle').on('click', 'button#completiontoggle', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            // Implement required min minutes.\n            if ($(this).hasClass('mark-done') && annotation.requiremintime > 0) {\n                // Duration in minutes\n                const windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                const duration = (windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime)) / 1000 / 60; // Minutes.\n                if (duration < annotation.requiremintime) {\n                    self.addNotification(\n                        M.util.get_string('youmustspendatleastminutesbeforemarkingcomplete', 'mod_interactivevideo',\n                            {\n                                timerequire: annotation.requiremintime,\n                                timespent: duration.toFixed(2)\n                            }), 'danger');\n                    return;\n                }\n\n            }\n            $(this).attr('disabled', true);\n            $(this).find('i').removeClass('bi-check2 bi-circle').addClass('fa-spin bi-arrow-repeat');\n            $(this).find('span').hide();\n            // Get the completed items\n            const annoid = $(this).data('id');\n            self.toggleCompletion(annoid, $(this).hasClass('mark-done') ? 'mark-done' : 'mark-undone', 'manual');\n        });\n    }\n\n\n    /**\n     * Applies content to the specified annotation element.\n     *\n     * This function renders the content for the given annotation, updates the\n     * corresponding message element in the DOM, and performs post-render actions.\n     * If the annotation is marked as completed, it exits early. If the annotation\n     * requires completion tracking and the tracking type is 'view', it toggles the\n     * completion status automatically.\n     *\n     * @param {Object} annotation - The annotation object containing content and metadata.\n     * @returns {Promise<void>} A promise that resolves when the content is applied.\n     */\n    async applyContent(annotation) {\n        const self = this;\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await self.render(annotation);\n        }\n        const data = self.cache[annotation.id];\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find(`.modal-body`).html(data);\n        $message.find(`.modal-body`).attr('id', 'content');\n        self.postContentRender(annotation);\n        if (annotation.completed || self.isEditMode()) {\n            return;\n        }\n        this.completiononview(annotation);\n    }\n\n    /**\n     * Method to handle automatic completion on view with required minimum time\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    completiononview(annotation) {\n        let self = this;\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'view') {\n            let duration = 0;\n            let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n            if (windowAnno) {\n                duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n            }\n            if (duration > annotation.requiremintime * 60 * 1000) {\n                self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n                return;\n            }\n\n            const intervalFunction = async function() {\n                let runInterval = setInterval(async function() {\n                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                    if (!windowAnno || windowAnno.completed) {\n                        clearInterval(runInterval);\n                        return;\n                    }\n                    duration = duration + 1000 * 10;\n                    if (duration > annotation.requiremintime * 60 * 1000) {\n                        clearInterval(runInterval);\n                        self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n                    }\n                }, 1000 * 10);\n\n                $(document).on('interactionclose', function(e) {\n                    if (e.detail.annotation.id == annotation.id) {\n                        clearInterval(runInterval);\n                    }\n                });\n\n            };\n\n            intervalFunction();\n\n            $(document).on('interactionrun', function(e) {\n                if (e.detail.annotation.id == annotation.id) {\n                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                    if (windowAnno && !windowAnno.completed) {\n                        intervalFunction();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * What happens when an item runs\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async runInteraction(annotation) {\n        let self = this;\n        let isPaused = await self.player.isPaused();\n        if (!isPaused) {\n            await self.player.pause();\n            this.runInteraction(annotation);\n            return;\n        }\n\n        await this.renderViewer(annotation);\n        this.renderContainer(annotation);\n        self.applyContent(annotation);\n\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual') {\n            this.enableManualCompletion(annotation);\n        }\n\n        if (annotation.displayoptions == 'popup') {\n            $('#annotation-modal').on('shown.bs.modal', function() {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n    }\n\n    /**\n     * Data to show when the report viewer clicks on the completion checkmark\n     * @param {Object} annotation the current annotation\n     * @param {Number} userid the user id\n     * @returns {Promise}\n     */\n    getCompletionData(annotation, userid) {\n        return Promise.resolve({\n            annotation: annotation,\n            userid: userid\n        });\n    }\n\n    /**\n     * View when the report viewer clicks on the title of the interaction item on the report page\n     * @param {Object} annotation the annotation\n     * @returns {void}\n     */\n    async displayReportView(annotation) {\n        const data = await this.render(annotation, 'html');\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find(`.modal-body`).html(data);\n        $message.find(`.modal-body`).attr('id', 'content');\n        this.postContentRender(annotation);\n    }\n\n    /**\n     * Get the log data for multiple users from annotation_log table\n     * @param {Object} annotation the annotation\n     * @param {Array} userids array of user ids\n     * @returns {Promise}\n     */\n    getLogs(annotation, userids) {\n        let self = this;\n        userids = userids.join(',');\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_logs_by_userids',\n                    annotationid: annotation.id,\n                    contextid: annotation.contextid,\n                    userids: userids,\n                    sesskey: M.cfg.sesskey,\n                    token: self.token,\n                    cmid: self.interaction,\n                },\n                success: (data) => {\n                    try {\n                        resolve(JSON.parse(data));\n                    } catch (error) {\n                        resolve([]);\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * Delete the completion data for an item for a user\n     * @param {number} recordid The record id\n     * @param {number} itemid The item id\n     * @param {number} userid The user id\n     * @returns\n     */\n    async deleteCompletionData(recordid, itemid, userid) {\n        let self = this;\n        let deleted = await new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'delete_completion_data',\n                    id: recordid,\n                    itemid: itemid,\n                    userid: userid,\n                    sesskey: M.cfg.sesskey,\n                    cmid: self.cm,\n                    contextid: M.cfg.contextid,\n                },\n                success: (data) => {\n                    if (data.id) {\n                        resolve(true);\n                    }\n                    resolve(false);\n                }\n            });\n        }\n        );\n        return deleted;\n    }\n\n    /**\n     * Util function to input the timestamp on the modal form.\n     * @param {Object} options The options\n     * @returns {void}\n     * */\n    timepicker(options) {\n        // Normalize the options.\n        options = options || {};\n        options.modal = options.modal || true;\n        options.disablelist = options.disablelist || false;\n        options.required = options.required || false;\n        let self = this;\n        $(document).off('click', '#confirmtime');\n        // Pick a time button.\n        $(document).off('click', `.pickatime button`).on('click', `.pickatime button`, async function(e) {\n            e.preventDefault();\n            const $this = $(this);\n            const currenttime = await self.player.getCurrentTime();\n            const field = $(this).data('field');\n            const fieldval = $(`[name=${field}]`).val();\n            if (fieldval) {\n                const parts = fieldval.split(':');\n                const time = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n                await self.player.seek(time); // Go to the time.\n            }\n            // Hide this modal.\n            if (options.modal) {\n                $this.closest('.modal').addClass('d-none');\n                $('.modal-backdrop').addClass('d-none');\n            }\n            if (options.disablelist) {\n                $('#annotationwrapper').addClass('no-pointer-events');\n            }\n            $('#timeline-btns .col:first-child').hide().before(`<div class=\"col confirmtime-wrapper\n                d-flex justify-content-start align-items-center\n                     \"><button class=\"btn btn-circle pulse btn-primary\" id=\"confirmtime\"\n                     title=\"${M.util.get_string('confirmtime', 'ivplugin_contentbank')}\">\n                     <i class=\"fa fa-check\"></i></button></div>`);\n\n            $(document).on('click', '#confirmtime', async function(e) {\n                e.preventDefault();\n                // Show the modal.\n                if (options.modal) {\n                    $this.closest('.modal').removeClass('d-none');\n                    $('.modal-backdrop').removeClass('d-none');\n                }\n                if (options.disablelist) {\n                    $('#annotationwrapper').removeClass('no-pointer-events');\n                }\n                // Remove the button.\n                // Put the time in the input.\n                const time = await self.player.getCurrentTime();\n                const formattedTime = self.convertSecondsToHMS(time, false, true);\n                $(`[name=${field}]`).val(formattedTime);\n                $(this).closest('div').remove();\n                $('#timeline-btns .col:first-child').show();\n                // Go back to the current time.\n                self.player.seek(currenttime);\n            });\n        });\n\n        // Reset time button.\n        $(document).off('click', `.resettime button`).on('click', `.resettime button`, function(e) {\n            e.preventDefault();\n            const field = $(this).data('field');\n            $(`[name=${field}]`).val('');\n            if (options.required) {\n                $(`[name=${field}]`).val(self.convertSecondsToHMS(self.start, false, true));\n            }\n        });\n    }\n}\n\nexport default Base;"],"names":["constructor","player","annotations","interaction","course","userid","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","totaltime","start","end","properties","cm","token","displayoptions","completionid","extracompletion","options","prop","Number","JSON","parse","cache","dispatchEvent","name","detail","enableColorPicker","document","on","color","this","val","closest","css","find","removeClass","off","addClass","formatContent","text","shorttext","annotation","format","addNotification","msg","type","init","isSkipped","timestamp","isInSkipSegment","isBetweenStartAndEnd","convertSecondsToHMS","s","dynamic","rounded","Math","round","hours","floor","toString","padStart","minutes","seconds","toFixed","convertHMSToSeconds","hms","split","reduce","acc","time","renderEditItem","listItem","item","removeAttr","attr","id","html","formattedtitle","hascompletion","xp","remove","icon","title","append","M","util","get_string","allowmultiple","appendTo","isAlreadyAdded","some","x","validateTimestampFormat","test","validateTimestampFieldValue","fld","hiddenfield","self","async","e","preventDefault","parts","message","seek","pause","addAnnotation","coursemodule","startHMS","endHMS","timestampHMS","data","timestampassist","contextid","cfg","courseid","cmid","annotationid","form","ModalForm","formClass","args","modalConfig","toLowerCase","modal","show","addEventListener","events","LOADED","setTimeout","onEditFormLoaded","error","draggable","handle","FORM_SUBMITTED","stopImmediatePropagation","ajax","url","wwwroot","method","dataType","action","sesskey","courseContextId","success","newAnnotation","cloneAnnotation","editAnnotation","modalTitle","filter","done","updated","deleteAnnotation","postEditCallback","runInteraction","isEditMode","isPreviewMode","isClickable","advanced","clickablebeforecompleted","completed","clickableaftercompleted","isVisible","visiblebeforecompleted","visibleaftercompleted","renderItemOnVideoNavigation","percentage","classes","renderViewer","renderContainer","$message","completiontracking","$completiontoggle","requiremintime","before","tooltip","postContentRender","setModalDraggable","elem","formatTime","parseInt","remainingSeconds","string","completionCallback","thisItem","$toggleButton","audio","Audio","play","earned","hide","toggleCompletion","details","Promise","resolve","gradableitems","totalXp","map","_ref","a","b","completedItems","_ref2","earnedXp","_ref3","_ref4","_ref5","itemId","completionDetails","completeTime","Date","hasDetails","windowAnno","window","ANNOS","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","reportView","push","length","markdone","uid","g","parseFloat","c","completeditems","stringify","completiondetails","annotationtype","updatestate","Object","keys","res","grade","target","response","enableManualCompletion","hasClass","timerequire","timespent","annoid","render","completiononview","intervalFunction","runInterval","setInterval","clearInterval","isPaused","applyContent","getCompletionData","getLogs","userids","join","recordid","itemid","timepicker","disablelist","required","$this","currenttime","getCurrentTime","field","fieldval","formattedTime"],"mappings":"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"}