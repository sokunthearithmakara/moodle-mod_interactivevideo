{"version":3,"file":"base.min.js","sources":["../../src/type/base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base class to be extended by other content types\n *\n * @module     mod_interactivevideo/type/base\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {renderContent, defaultDisplayContent, formatText} from 'mod_interactivevideo/displaycontent';\nimport {renderAnnotationItems} from 'mod_interactivevideo/viewannotation';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {add as addToast} from 'core/toast';\nimport ModalForm from 'core_form/modalform';\nimport 'mod_interactivevideo/libraries/jquery-ui';\n\nclass Base {\n    /**\n     * Creates an instance of the base class for interactive video.\n     *\n     * @param {Object} player - The player object.\n     * @param {Array} annotations - The annotations object.\n     * @param {number} interaction - The interaction id.\n     * @param {number} course - The course id.\n     * @param {number} userid - The user id.\n     * @param {number} completionpercentage - The required completion percentage set in the activity settings.\n     * @param {number} gradeiteminstance - The grade item instance id.\n     * @param {number} grademax - The maximum grade set in the activity settings.\n     * @param {string} vtype - The video type (yt, vimeo, dailymotion, html4video).\n     * @param {boolean} preventskip - Prevent skipping of the video.\n     * @param {number} totaltime - The total time of the video in seconds including the skipped segments.\n     * @param {number} start - The start time of the video.\n     * @param {number} end - The end time of the video.\n     * @param {Object} properties - Properties of the interaction type defined in the PHP class.\n     * @param {number} cm - The course module id.\n     * @param {string} token - Access token.\n     * @param {Object} displayoptions - Display options.\n     * @param {number} completionid - Completion record id.\n     * @param {number} extracompletion - Extra completion.\n     * @param {Object} [options={}] - Additional options.\n     *\n     */\n    constructor(player, annotations, interaction, course, userid, completionpercentage, gradeiteminstance, grademax, vtype,\n        preventskip, totaltime, start, end, properties, cm, token, displayoptions, completionid, extracompletion, options = {}) {\n        /**\n         * Access token\n         * @type {string}\n         * @private\n         */\n        this.token = token;\n\n        /**\n         * The course module id\n         * @type {number}\n         * @private\n         */\n        this.cm = cm;\n\n        /**\n         * The player object\n         * @type {Object}\n         * @private\n         */\n\n        this.player = player;\n        /**\n         * The annotations object\n         * @type {Array}\n         * @private\n         */\n        this.annotations = annotations;\n        /**\n         * The interaction id\n         * @type {number}\n         * @private\n         */\n        this.interaction = interaction;\n        /**\n         * The course id\n         * @type {number}\n         * @private\n         */\n        this.course = course;\n        /**\n         * The user id\n         * @type {number}\n         * @private\n         */\n        this.userid = userid;\n        /**\n         * The required completion percentage set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.completionpercentage = completionpercentage;\n        /**\n         * The grade item instance id\n         * @type {number}\n         * @private\n         */\n        this.gradeiteminstance = gradeiteminstance;\n        /**\n         * The maximum grade set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.grademax = grademax;\n        /**\n         * The video type\n         * @type {string} (yt, vimeo, dailymotion, html4video)\n         * @private\n         */\n        this.vtype = vtype;\n        /**\n         * Prevent skipping of the video\n         * @type {boolean}\n         * @private\n         * @default false\n         */\n        this.preventskip = preventskip;\n        /**\n         * The total time of the video in seconds including the skipped segments.\n         * @type {number}\n         * @private\n         */\n        this.totaltime = totaltime;\n        /**\n         * The start time of the video\n         * @type {number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {number}\n         * @private\n         */\n        this.end = end;\n        /**\n         * Properties of the interaction type defined in the php class\n         * @type {Object}\n         * @private\n         */\n        this.prop = properties;\n        /**\n         * Display options\n         * @type {Object}\n         * @private\n         */\n        this.displayoptions = displayoptions;\n        /**\n         * Completion id\n         * @type {number}\n         */\n        this.completionid = Number(completionid);\n        /**\n         * Extra completion\n         * @type {Object}\n         */\n        this.extracompletion = extracompletion ? JSON.parse(extracompletion) : {};\n\n        /**\n         * Additional options\n         */\n        this.options = options;\n\n        /**\n         * Cache the annotations\n         * @type {Object}\n         */\n        this.cache = {};\n\n        /**\n         * Is bs-5.\n         * @type {boolean}\n         */\n        this.isBS5 = $('body').hasClass('bs-5');\n    }\n\n    /**\n     * Dispatch an event\n     * @param {string} name The event name\n     * @param {Object} detail The event detail\n     * @returns {void}\n     */\n    dispatchEvent(name, detail) {\n        dispatchEvent(name, detail);\n    }\n\n    /**\n     * Enable the HTML5 color picker in form elements\n     * @returns {void}\n     */\n    enableColorPicker() {\n        $(document).on('input', 'input[type=\"color\"]', function() {\n            const color = $(this).val();\n            $(this).closest('.color-picker').css('background-color', color);\n            $(this).closest('.fitem').find('input[type=\"text\"]').val(color);\n        });\n        $(document).on('change', 'input[type=\"color\"]', function() {\n            $('.modal-backdrop').removeClass('opacity-0');\n        });\n        $(document).off('click', '.modal input[type=\"color\"]').on('click', '.modal input[type=\"color\"]', function() {\n            $('.modal-backdrop').addClass('opacity-0');\n        });\n    }\n\n    /**\n     * Formats the given text content.\n     *\n     * @param {string} text - The text content to format.\n     * @param {boolean} [shorttext=false] - Optional flag to indicate if the text should be formatted as short text.\n     * @returns {string} The formatted text.\n     */\n    formatContent(text, shorttext = false) {\n        return formatText(text, shorttext);\n    }\n\n    /**\n     * Renders the given annotation in the specified format.\n     *\n     * @param {Object} annotation - The annotation object to render.\n     * @param {string} [format='html'] - The format in which to render the annotation. Defaults to 'html'.\n     * @returns {promise} The rendered content.\n     */\n    async render(annotation, format = 'html') {\n        return renderContent(annotation, format);\n    }\n\n    /**\n     * Adds a notification with a specified message and type.\n     *\n     * @param {string} msg - The message to be displayed in the notification.\n     * @param {string} [type='danger'] - The type of the notification (e.g., 'success', 'info', 'warning', 'danger').\n     */\n    addNotification(msg, type = 'danger') {\n        addToast(msg, {type});\n    }\n    /**\n     * Initialize the interaction type\n     * @returns {void}\n     */\n    init() {\n        // Do nothing.\n    }\n    /**\n     * Check if the interaction is skipped\n     * @param {number} timestamp The timestamp of the interaction\n     * @returns {boolean}\n     */\n    isSkipped(timestamp) {\n        return this.isInSkipSegment(timestamp) || !this.isBetweenStartAndEnd(timestamp);\n    }\n\n    /**\n     * Converts a given number of seconds into a formatted string (HH:MM:SS).\n     *\n     * @param {number} s - The number of seconds to convert.\n     * @param {boolean} [dynamic=false] - If true, omits the hours part if less than 1 hour.\n     * @param {boolean} [rounded=false] - If true, rounds the seconds to the nearest whole number.\n     * @returns {string} The formatted time string.\n     */\n    convertSecondsToHMS(s, dynamic = false, rounded = false) {\n        if (rounded) {\n            s = Math.round(s);\n        }\n        const hours = Math.floor(s / 3600).toString().padStart(2, '0');\n        const minutes = Math.floor((s % 3600) / 60).toString().padStart(2, '0');\n        let seconds = (s % 60).toFixed(2);\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        if (rounded) {\n            seconds = Math.floor(s % 60).toString().padStart(2, '0');\n        }\n        if (dynamic && (s / 3600) < 1) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    /**\n     * HMS to seconds\n     * @param {string} hms The time in HH:MM:SS or MM:SS or SS format\n     * @returns {number}\n     */\n    convertHMSToSeconds(hms) {\n        return hms.split(':').reduce((acc, time) => (60 * acc) + +time);\n    }\n\n    /**\n     * Render edit items\n     * @param {Array} annotations The annotations array\n     * @param {Object} listItem The list item\n     * @param {Object} item The annotation object\n     * @returns {void}\n     */\n    renderEditItem(annotations, listItem, item) {\n        this.annotations = annotations;\n        listItem.removeAttr('id').removeClass('d-none');\n        listItem.attr('data-type', item.type);\n        if (this.prop.allowmultiple) {\n            listItem.addClass(item.type + (this.isSkipped(item.timestamp) ? ' skipped' : ''));\n        }\n        listItem.attr('data-timestamp', item.timestamp)\n            .attr('data-id', item.id);\n\n        listItem.find('.timestamp').text(this.convertSecondsToHMS(item.timestamp, this.totaltime < 3600, true))\n            .attr('data-timestamp', item.timestamp);\n\n        listItem.find('.title').html(item.formattedtitle);\n        if (item.hascompletion == 1) {\n            listItem.find('.btn.xp span').text(item.xp);\n            listItem.attr('data-xp', item.xp);\n        } else {\n            listItem.find('.btn.xp').remove();\n        }\n\n        listItem.find('.type-icon i').addClass(this.prop.icon);\n        listItem.find('.type-icon').attr('title', this.prop.title);\n        // If out of range, make the title text grey\n        if (this.prop.allowmultiple) {\n            if (Number(item.timestamp) > this.end || Number(item.timestamp) < this.start || this.isSkipped(item.timestamp)) {\n                listItem.find('.title').addClass('text-secondary');\n                listItem.attr('data-xp', 0);\n                // Append a badge to the title\n                listItem.find('.title')\n                    .append(`<span class=\"badge iv-badge-warning iv-ml-2\">\n                            ${M.util.get_string('skipped', 'mod_interactivevideo')}</span>`);\n            }\n        }\n\n        listItem.find('[data-field]').attr('data-id', item.id);\n        listItem.find('[data-field=\"xp\"]').val(item.xp);\n        listItem.find('[data-field=\"title\"]').val(item.title);\n        listItem.find('[data-field=\"timestamp\"]').val(this.convertSecondsToHMS(item.timestamp));\n        if (!this.prop.allowmultiple) {\n            listItem.find('.btn.copy').remove();\n            listItem.find('.title').addClass('text-dark no-pointer').removeClass('text-primary text-secondary cursor-pointer');\n            listItem.removeAttr('data-timestamp');\n            listItem.find('.timestamp').remove();\n        }\n        listItem.appendTo('#annotation-list');\n        return listItem;\n    }\n\n    /**\n     * Check if the timestamp is between the start and end\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isBetweenStartAndEnd(timestamp) {\n        return timestamp <= this.end && timestamp >= this.start;\n    }\n\n    /**\n     * Check if the annotation is already added at the timestamp\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isAlreadyAdded(timestamp) {\n        return this.annotations.some(x => x.timestamp == timestamp);\n    }\n\n    /**\n     * Check if the annotation is in the skip segment\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isInSkipSegment(timestamp) {\n        return this.annotations.some(x => x.type == 'skipsegment' &&\n            Number(x.timestamp) < Number(timestamp) && Number(x.title) > Number(timestamp));\n    }\n\n    /**\n     * Validate the timestamp format\n     * @param {string} timestamp The timestamp\n     * @returns {boolean}\n     */\n    validateTimestampFormat(timestamp) {\n        return /^([0-9]{2}):([0-5][0-9]):([0-5][0-9])(\\.\\d{2})?$/.test(timestamp);\n    }\n\n    /**\n     * Validate the timestamp\n     * @param {string} fld The field\n     * @param {string} hiddenfield The hidden field\n     * @returns {void}\n     */\n    validateTimestampFieldValue(fld, hiddenfield) {\n        const self = this;\n        $(document).on('change', `form [name=${fld}]`, async function(e) {\n            e.preventDefault();\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is between the start and end time.\n            const parts = $(this).val().split(':');\n            const timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                const message = M.util.get_string('timemustbebetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp does not already exist.\n            if (self.isAlreadyAdded(timestamp)) {\n                self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is not in the skip segment.\n            if (self.isInSkipSegment(timestamp)) {\n                self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            $(`form [name=${hiddenfield}]`).val(timestamp);\n\n            await self.player.seek(timestamp, true);\n            // Make sure the video is paused.\n            await self.player.pause();\n        });\n    }\n\n    /**\n     * Add an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} timestamp The timestamp\n     * @param {number} coursemodule The course module id\n     * @returns {void}\n     */\n    addAnnotation(annotations, timestamp, coursemodule) {\n        let self = this;\n        this.annotations = annotations;\n        if (timestamp >= 0) {\n            if (!this.isBetweenStartAndEnd(timestamp)) {\n                const message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                return;\n            }\n\n            if (self.isAlreadyAdded(timestamp)) {\n                self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n                return;\n            }\n\n            if (self.isInSkipSegment(timestamp)) {\n                self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n                return;\n            }\n        }\n\n        const startHMS = self.convertSecondsToHMS(self.start);\n        const endHMS = self.convertSecondsToHMS(self.end);\n        const timestampHMS = timestamp > 0 ? self.convertSecondsToHMS(timestamp) : startHMS;\n\n        const data = {\n            id: 0,\n            timestamp: timestamp > 0 ? timestamp : self.start,\n            timestampassist: timestampHMS,\n            title: self.prop.title,\n            start: startHMS,\n            end: endHMS,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n        };\n\n        const form = new ModalForm({\n            formClass: self.prop.form,\n            args: data,\n            modalConfig: {\n                title: M.util.get_string('addinteractiontitle', 'mod_interactivevideo', {\n                    \"name\": self.prop.title.toLowerCase(),\n                    \"time\": timestampHMS\n                }),\n            }\n        });\n        $(\"#contentmodal\").modal('hide');\n        $('#addcontentdropdown a').removeClass('active');\n        form.show();\n\n        const onEditFormLoaded = (e) => {\n            // Wait for the form to be loaded.\n            try {\n                (function waitForForm() {\n                    const formElement = form.modal.modal.find('form');\n                    if (formElement.length) {\n                        self.onEditFormLoaded(form, e);\n                    } else {\n                        requestAnimationFrame(waitForForm);\n                    }\n                })();\n            } catch (error) {\n                // Do nothing.\n            }\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n        };\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            setTimeout(() => {\n                $('body').addClass('modal-open');\n            }, 500);\n            onEditFormLoaded(e);\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        // We must reinitialize js after the form has validation errors.\n        form.addEventListener(form.events.SERVER_VALIDATION_ERROR, (e) => {\n            onEditFormLoaded(e);\n        });\n\n        form.addEventListener(form.events.CLIENT_VALIDATION_ERROR, (e) => {\n            onEditFormLoaded(e);\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: function(data) {\n                    const newAnnotation = JSON.parse(data);\n                    dispatchEvent('annotationupdated', {\n                        annotation: newAnnotation,\n                        action: 'add'\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Copy an annotation\n     * @param {number} id The annotation id\n     * @param {number} timestamp The timestamp\n     * @returns {void}\n     */\n    cloneAnnotation(id, timestamp) {\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'copy_item',\n                id: id,\n                sesskey: M.cfg.sesskey,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n                timestamp: timestamp\n            },\n            success: function(data) {\n                const newAnnotation = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: newAnnotation,\n                    action: 'clone'\n                });\n            }\n        });\n    }\n\n    /**\n     * Edit an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    editAnnotation(annotations, id) {\n        this.annotations = annotations;\n        let self = this;\n        const annotation = annotations.find(x => x.id == id);\n        const timestamp = annotation.timestamp;\n        const timestampassist = this.convertSecondsToHMS(timestamp);\n\n        annotation.timestampassist = timestampassist;\n        annotation.start = this.convertSecondsToHMS(this.start);\n        annotation.end = this.convertSecondsToHMS(this.end);\n        annotation.contextid = M.cfg.contextid;\n\n        const title = annotation.type === 'skipsegment'\n            ? M.util.get_string('skipsegmentcontent', 'ivplugin_skipsegment').toLowerCase()\n            : annotation.formattedtitle;\n\n        let modalTitle = M.util.get_string('editinteractiontitlenotime', 'mod_interactivevideo', title);\n        if (timestamp > 0) {\n            modalTitle = M.util.get_string('editinteractiontitle', 'mod_interactivevideo', {\n                name: title,\n                time: timestampassist\n            });\n        }\n\n        const form = new ModalForm({\n            formClass: this.prop.form,\n            args: annotation,\n            modalConfig: {\n                title: modalTitle,\n            }\n        });\n\n        form.show();\n\n        const onEditFormLoaded = (e) => {\n            // Wait for the form to be loaded.\n            try {\n                (function waitForForm() {\n                    const formElement = form.modal.modal.find('form');\n                    if (formElement.length) {\n                        self.onEditFormLoaded(form, e);\n                    } else {\n                        requestAnimationFrame(waitForForm);\n                    }\n                })();\n            } catch (error) {\n                // Do nothing.\n            }\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n        };\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            onEditFormLoaded(e);\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        // We must reinitialize js after the form has validation errors.\n        form.addEventListener(form.events.SERVER_VALIDATION_ERROR, (e) => {\n            onEditFormLoaded(e);\n        });\n\n        form.addEventListener(form.events.CLIENT_VALIDATION_ERROR, (e) => {\n            onEditFormLoaded(e);\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            this.annotations = this.annotations.filter(x => x.id != id);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n            }).done(function(data) {\n                const updated = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: updated,\n                    action: 'edit'\n                });\n            });\n        });\n    }\n\n    /**\n     * Delete an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @param {boolean} [bulk=false] If true, the event will not be dispatched\n     * @returns {void}\n     */\n    deleteAnnotation(annotations, id, bulk = false) {\n        this.annotations = annotations;\n        const annotation = this.annotations.find(x => x.id == id);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'delete_item',\n                sesskey: M.cfg.sesskey,\n                id: id,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.interaction,\n            },\n            success: function() {\n                if (!bulk) {\n                    dispatchEvent('annotationdeleted', {\n                        annotation: annotation,\n                    });\n                }\n            },\n        });\n    }\n\n    async deleteAnnotations(annotations, ids) {\n        this.annotations = annotations;\n        const promises = ids.map((id) => {\n            return new Promise((resolve) => {\n                this.deleteAnnotation(this.annotations, id, true);\n                resolve();\n            });\n        });\n\n        await Promise.all(promises);\n        dispatchEvent('annotationsdeleted', {\n            annotations: this.annotations,\n            ids: ids,\n        });\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form\n     * @return {jQuery} The modal body element\n     */\n    onEditFormLoaded(form) {\n        return form.modal.modal.find('.modal-body');\n    }\n\n    /**\n     * Called after the annotation is edited/added/quick edited (after everything is rendered).\n     * @param {Object} annotation The annotation object\n     * @return {void}\n     */\n    postEditCallback(annotation) {\n        return this.runInteraction(annotation);\n    }\n\n    /**\n     * Check if the page is in edit mode\n     * @returns {boolean}\n     */\n    isEditMode() {\n        return this.options.isEditMode;\n    }\n\n    /**\n     * Check if the page is in preview mode\n     * @returns {boolean}\n     */\n    isPreviewMode() {\n        return this.options.isPreviewMode;\n    }\n\n    /**\n     * Check if the annotation is clickable from video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isClickable(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.clickablebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.clickableaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Visibility on the video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isVisible(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.visiblebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.visibleaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Render the item on the video navigation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderItemOnVideoNavigation(annotation) {\n        let self = this;\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        if (!this.totaltime) {\n            this.totaltime = this.end - this.start;\n        }\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        if (this.isVisible(annotation)) {\n            let classes = annotation.type + ' annotation li-draggable ';\n            if (annotation.completed) {\n                classes += 'completed ';\n            }\n            if (!this.isClickable(annotation)) {\n                classes += 'no-pointer-events ';\n            }\n            if (this.isSkipped(annotation.timestamp)) {\n                classes += 'skipped ';\n            }\n            if (annotation.hascompletion == 0) {\n                classes += 'no-completion ';\n            }\n            let title = annotation.formattedtitle;\n            title = title.replace(/'/g, '&apos;')\n                .replace(/\"/g, '&quot;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;')\n                .replace(/&/g, '&amp;');\n            if (this.isEditMode()) {\n                $(\"#video-nav ul\").append(`<li class=\"${classes}\" data-timestamp=\"${annotation.timestamp}\"\n        data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\">\n        <div class=\"item\" data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n         data${self.isBS5 ? '-bs' : ''}-html=\"true\"\n         title='<div class=\"d-flex align-items-center\"><i class=\"${this.prop.icon} iv-mr-2\"></i>\n        <span>${title}</span></div>'></div></li>`);\n            } else {\n                $(\"#interactions-nav ul\").append(`<li class=\"${classes}\" data-timestamp=\"${annotation.timestamp}\"\n                    data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\">\n                    <a href=\"javascript:void()\" class=\"item\" tabindex=\"0\" data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n                     data${self.isBS5 ? '-bs' : ''}-container=\"#wrapper\"\n                      data${self.isBS5 ? '-bs' : ''}-trigger=\"hover\" data${self.isBS5 ? '-bs' : ''}-placement=\"top\"\n                       data${self.isBS5 ? '-bs' : ''}-html=\"true\"\n                      title='<div class=\"d-flex align-items-center\">\n                        <i class=\"${this.prop.icon} iv-mr-2\"></i>\n                        <span>${title}</span></div>'></a></li>`);\n            }\n        }\n    }\n\n    /**\n     * Render the viewer for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {Promise}\n     */\n    async renderViewer(annotation) {\n        return defaultDisplayContent(annotation, this.player, this.start, this.end);\n    }\n\n    /**\n     * Render the container for the annotation\n     * @param  {Object} annotation The annotation object\n     */\n    renderContainer(annotation) {\n        if (annotation.hascompletion == 0) {\n            return;\n        }\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        if (annotation.completiontracking != 'manual') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $completiontoggle.prop('disabled', true);\n            $completiontoggle.find('span').text(\n                annotation.completed\n                    ? `${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`\n                    : `${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`\n            );\n        }\n        if (annotation.completed) {\n            return;\n        }\n        if ((annotation.completiontracking == 'view' || annotation.completiontracking == 'manual')\n            && annotation.requiremintime > 0) {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $message.find('#title .info').remove();\n            $completiontoggle.before(`<i class=\"bi bi-info-circle-fill iv-mr-2 info\" data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n            data${self.isBS5 ? '-bs' : ''}-container=\"#message\" data${self.isBS5 ? '-bs' : ''}-trigger=\"hover\"\n            title=\"${M.util.get_string(\"spendatleast\", \"mod_interactivevideo\", annotation.requiremintime)}\"></i>`);\n            setTimeout(function() {\n                $message.find(`[data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"]`).tooltip('show');\n            }, 1000);\n            setTimeout(function() {\n                $message.find(`[data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\"]`).tooltip('hide');\n            }, 3000);\n        }\n    }\n\n    /**\n     * Callback to excute after the content is rendered.\n     * @returns {void}\n     */\n    postContentRender() {\n        // To be overridden by the child class.\n    }\n\n    /**\n     * Set draggable\n     * @param {string} elem The element to make draggable\n     */\n    setModalDraggable(elem) {\n        $(elem).draggable({handle: \".modal-header\"});\n    }\n\n    /**\n     * Formats a given time in seconds into a human-readable string.\n     *\n     * @param {number} seconds - The time in seconds to format.\n     * @returns {string} A string representing the formatted time in hours, minutes, and seconds.\n     */\n    formatTime(seconds) {\n        seconds = parseInt(seconds);\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    }\n\n\n    /**\n     * Callback to excute after item is successfully marked complete or incomplete.\n     * @param {Array} annotations Updated annotations\n     * @param {Object} thisItem The current annotation\n     * @param {string} action The action performed (e.g. mark-done, mark-undone)\n     * @param {string} type The type of completion (e.g. manual, automatic)\n     */\n    completionCallback(annotations, thisItem, action, type) {\n        const $message = $(`#message[data-id='${thisItem.id}']`);\n        const $toggleButton = $message.find(`#completiontoggle`);\n        if (type == 'manual') {\n            $toggleButton.prop('disabled', false);\n            $toggleButton.find(`i`)\n                .removeClass('fa-spin bi-arrow-repeat')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n            $toggleButton.find(`span`).show();\n        } else if (type == 'automatic') {\n            $toggleButton.find(`i`).removeClass('bi-check2 bi-circle')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n        }\n\n        let audio;\n        if (action == 'mark-done') {\n            $toggleButton\n                .removeClass('btn-secondary mark-done')\n                .addClass('btn-success mark-undone');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/point-awarded.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('iv-badge-secondary').addClass('alert-success');\n            if (thisItem.xp > 0) {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).text(thisItem.earned == thisItem.xp ?\n                    Number(thisItem.earned) + ' XP' : `${Number(thisItem.earned)}/${thisItem.xp} XP`);\n            } else {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).hide();\n            }\n        } else if (action == 'mark-undone') {\n            $toggleButton\n                .removeClass('btn-success mark-undone').addClass('btn-secondary mark-done');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('alert-success').addClass('iv-badge-secondary');\n        }\n\n        // Update the completion button.\n        $toggleButton.find(`span`).text('');\n        if (thisItem.earned > 0) {\n            if (action == 'mark-undone') {\n                this.addNotification(M.util.get_string('xplost', 'mod_interactivevideo', Number(thisItem.earned)), 'info');\n            } else if (action == 'mark-done') {\n                this.addNotification(M.util.get_string('xpearned', 'mod_interactivevideo', Number(thisItem.earned)), 'success');\n            }\n        }\n\n        if (type == 'manual') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}`);\n            }\n        } else if (type == 'automatic') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`);\n            }\n        }\n        return 'done';\n    }\n\n    /**\n     * Toggle completion of an item\n     * @param {number} id The annotation id\n     * @param {string} action The action to perform (mark-done, mark-undone)\n     * @param {string} type The type of completion (manual, automatic)\n     * @param {{}} [details={}] Completion details\n     * @returns {Promise}\n     */\n    toggleCompletion(id, action, type = 'manual', details = {}) {\n        // Skip if the page is the interactions page or in preview-mode.\n        if (this.isEditMode()) {\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        if (this.isPreviewMode()) {\n            this.addNotification(M.util.get_string('completionnotrecordedinpreviewmode', 'mod_interactivevideo'));\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        // Gradable items (hascompletion)\n        const gradableitems = this.annotations.filter(x => x.hascompletion == '1');\n        const totalXp = gradableitems.map(({xp}) => Number(xp)).reduce((a, b) => a + b, 0);\n        let completedItems = gradableitems.filter(({completed}) => completed);\n        let earnedXp = completedItems.map(({earned}) => Number(earned)).reduce((a, b) => a + b, 0);\n\n        completedItems = completedItems.map(({id}) => id);\n        let thisItem = gradableitems.find(({id: itemId}) => itemId == id);\n        let completionDetails = {\n            id,\n        };\n        if (action == 'mark-done') {\n            const completeTime = new Date();\n            completionDetails.hasDetails = details.details ? true : false;\n            if (details.hasDetails) {\n                completionDetails.hasDetails = true;\n            }\n            completionDetails.xp = details.xp || thisItem.xp;\n            let windowAnno = window.ANNOS.find(x => x.id == id);\n            completionDetails.duration = details.duration\n                || (windowAnno.duration + (completeTime.getTime() - windowAnno.newstarttime));\n            completionDetails.timecompleted = details.timecompleted || completeTime.getTime();\n            const completiontime = completeTime.toLocaleString();\n            let duration = this.formatTime(completionDetails.duration / 1000);\n            completionDetails.reportView = details.reportView ||\n                `<span data${self.isBS5 ? '-bs' : ''}-toggle=\"tooltip\" data${self.isBS5 ? '-bs' : ''}-html=\"true\"\n                 title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar iv-mr-2\"></i>\n                 ${completiontime}</span><span><i class=\"bi bi-stopwatch iv-mr-2\"></i>${duration}</span></span>'>\n                 <i class=\"fa fa-check text-success\"></i><br><span>${Number(completionDetails.xp)}</span></span>`;\n        }\n        if (action == 'mark-done') {\n            completedItems.push(id.toString());\n            if (thisItem.earned > 0) { // In case of resubmission.\n                // Remove the earned XP from the total XP.\n                earnedXp -= Number(thisItem.earned);\n            }\n            earnedXp += Number(completionDetails.xp);\n        } else if (action == 'mark-undone') {\n            completedItems = completedItems.filter(itemId => itemId != id);\n            earnedXp -= Number(thisItem.earned);\n        }\n\n        // Make sure the completed items are unique.\n        completedItems = [...new Set(completedItems)];\n\n        let completed;\n        if (Number(this.completionpercentage) > 0) { // Completion percentage is set.\n            completed = (completedItems.length / gradableitems.length) * 100 >= Number(this.completionpercentage) ? 1 : 0;\n        } else {\n            completed = gradableitems.length == completedItems.length ? 1 : 0;\n        }\n        return new Promise((resolve) => {\n            $.ajax({\n                url: `${M.cfg.wwwroot}/mod/interactivevideo/ajax.php`,\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_progress',\n                    markdone: action == 'mark-done',\n                    sesskey: M.cfg.sesskey,\n                    id: this.interaction,\n                    uid: this.userid,\n                    percentage: (completedItems.length / gradableitems.length) * 100,\n                    g: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                    gradeiteminstance: this.gradeiteminstance,\n                    c: completed,\n                    xp: earnedXp,\n                    completeditems: JSON.stringify(completedItems),\n                    completiondetails: JSON.stringify(completionDetails),\n                    details: JSON.stringify(details.details || {}),\n                    annotationtype: thisItem.type,\n                    token: this.token,\n                    cmid: this.cm,\n                    completionid: this.completionid,\n                    contextid: thisItem.contextid,\n                    updatestate: this.completionpercentage > 0 || Object.keys(this.extracompletion).length != 0 ? 1 : 0,\n                    courseid: this.course,\n                },\n                success: (res) => {\n                    // Update the annotations array.\n                    const annotations = this.annotations.map(x => {\n                        if (x.id == id) {\n                            x.completed = action == 'mark-done';\n                            x.earned = completionDetails.xp || 0;\n                        }\n                        return x;\n                    });\n\n                    renderAnnotationItems(annotations, this.start, this.totaltime);\n                    thisItem.earned = completionDetails.xp || 0;\n                    this.completionCallback(annotations, thisItem, action, type);\n                    dispatchEvent('completionupdated', {\n                        annotations,\n                        completionpercentage: (completedItems.length / gradableitems.length) * 100,\n                        grade: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                        completed,\n                        xp: earnedXp,\n                        completeditems: completedItems,\n                        target: thisItem,\n                        action,\n                        type,\n                        response: res,\n                    });\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Enable manual completion of item\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    enableManualCompletion(annotation) {\n        let self = this;\n        const $message = $(`#message[data-id='${annotation.id}']`);\n        $message.off('click', 'button#completiontoggle').on('click', 'button#completiontoggle', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            // Implement required min minutes.\n            if ($(this).hasClass('mark-done') && annotation.requiremintime > 0) {\n                // Duration in minutes\n                const windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                const duration = (windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime)) / 1000 / 60; // Minutes.\n                if (duration < annotation.requiremintime) {\n                    self.addNotification(\n                        M.util.get_string('youmustspendatleastminutesbeforemarkingcomplete', 'mod_interactivevideo',\n                            {\n                                timerequire: annotation.requiremintime,\n                                timespent: duration.toFixed(2)\n                            }), 'danger');\n                    return;\n                }\n\n            }\n            $(this).attr('disabled', true);\n            $(this).find('i').removeClass('bi-check2 bi-circle').addClass('fa-spin bi-arrow-repeat');\n            $(this).find('span').hide();\n            // Get the completed items\n            const annoid = $(this).data('id');\n            self.toggleCompletion(annoid, $(this).hasClass('mark-done') ? 'mark-done' : 'mark-undone', 'manual');\n        });\n    }\n\n\n    /**\n     * Applies content to the specified annotation element.\n     *\n     * This function renders the content for the given annotation, updates the\n     * corresponding message element in the DOM, and performs post-render actions.\n     * If the annotation is marked as completed, it exits early. If the annotation\n     * requires completion tracking and the tracking type is 'view', it toggles the\n     * completion status automatically.\n     *\n     * @param {Object} annotation - The annotation object containing content and metadata.\n     * @returns {Promise<void>} A promise that resolves when the content is applied.\n     */\n    async applyContent(annotation) {\n        const self = this;\n        // We don't need to run the render method every time the content is applied. We can cache the content.\n        if (!self.cache[annotation.id] || self.isEditMode()) {\n            self.cache[annotation.id] = await self.render(annotation);\n        }\n        const data = self.cache[annotation.id];\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find(`.modal-body`).html(data);\n        $message.find(`.modal-body`).attr('id', 'content');\n        self.postContentRender(annotation);\n        if (annotation.completed || self.isEditMode()) {\n            return;\n        }\n        this.completiononview(annotation);\n    }\n\n    /**\n     * Method to handle automatic completion on view with required minimum time\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    completiononview(annotation) {\n        let self = this;\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'view') {\n            let duration = 0;\n            let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n            if (windowAnno) {\n                duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n            }\n            if (duration > annotation.requiremintime * 60 * 1000) {\n                self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n                return;\n            }\n\n            const intervalFunction = async function() {\n                let runInterval = setInterval(async function() {\n                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                    if (!windowAnno || windowAnno.completed) {\n                        clearInterval(runInterval);\n                        return;\n                    }\n                    duration = duration + 1000 * 10;\n                    if (duration > annotation.requiremintime * 60 * 1000) {\n                        clearInterval(runInterval);\n                        self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n                    }\n                }, 1000 * 10);\n\n                $(document).on('interactionclose', function(e) {\n                    if (e.detail.annotation.id == annotation.id) {\n                        clearInterval(runInterval);\n                    }\n                });\n\n            };\n\n            intervalFunction();\n\n            $(document).on('interactionrun', function(e) {\n                if (e.detail.annotation.id == annotation.id) {\n                    let windowAnno = window.ANNOS.find(x => x.id == annotation.id);\n                    if (windowAnno && !windowAnno.completed) {\n                        intervalFunction();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * What happens when an item runs\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async runInteraction(annotation) {\n        let self = this;\n        let isPaused = await self.player.isPaused();\n        if (!isPaused) {\n            await self.player.pause();\n            this.runInteraction(annotation);\n            return;\n        }\n\n        await this.renderViewer(annotation);\n        this.renderContainer(annotation);\n        self.applyContent(annotation);\n\n        // Set focus on the #message element\n        document.querySelector(`#message[data-id='${annotation.id}']`).focus();\n\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual') {\n            this.enableManualCompletion(annotation);\n        }\n\n        if (annotation.displayoptions == 'popup') {\n            self.setModalDraggable('#annotation-modal .modal-dialog');\n        }\n    }\n\n    /**\n     * Data to show when the report viewer clicks on the completion checkmark\n     * @param {Object} annotation the current annotation\n     * @param {Number} userid the user id\n     * @returns {Promise}\n     */\n    getCompletionData(annotation, userid) {\n        return Promise.resolve({\n            annotation: annotation,\n            userid: userid\n        });\n    }\n\n    /**\n     * View when the report viewer clicks on the title of the interaction item on the report page\n     * @param {Object} annotation the annotation\n     * @returns {void}\n     */\n    async displayReportView(annotation) {\n        const data = await this.render(annotation, 'html');\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find(`.modal-body`).html(data);\n        $message.find(`.modal-body`).attr('id', 'content');\n        this.postContentRender(annotation);\n    }\n\n    /**\n     * Get the log data for multiple users from annotation_log table\n     * @param {Object} annotation the annotation\n     * @param {Array} userids array of user ids\n     * @returns {Promise}\n     */\n    getLogs(annotation, userids) {\n        let self = this;\n        userids = userids.join(',');\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_logs_by_userids',\n                    annotationid: annotation.id,\n                    contextid: annotation.contextid,\n                    userids: userids,\n                    sesskey: M.cfg.sesskey,\n                    token: self.token,\n                    cmid: self.interaction,\n                },\n                success: (data) => {\n                    try {\n                        resolve(JSON.parse(data));\n                    } catch (error) {\n                        resolve([]);\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * Delete the completion data for an item for a user\n     * @param {number} recordid The record id\n     * @param {number} itemid The item id\n     * @param {number} userid The user id\n     * @returns\n     */\n    async deleteCompletionData(recordid, itemid, userid) {\n        let self = this;\n        let deleted = await new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'delete_completion_data',\n                    id: recordid,\n                    itemid: itemid,\n                    userid: userid,\n                    sesskey: M.cfg.sesskey,\n                    cmid: self.cm,\n                    contextid: M.cfg.contextid,\n                },\n                success: (data) => {\n                    if (data.id) {\n                        resolve(true);\n                    }\n                    resolve(false);\n                }\n            });\n        }\n        );\n        return deleted;\n    }\n\n    /**\n     * Util function to input the timestamp on the modal form.\n     * @param {Object} options The options\n     * @returns {void}\n     * */\n    timepicker(options) {\n        // Normalize the options.\n        options = options || {};\n        options.modal = options.modal || true;\n        options.disablelist = options.disablelist || false;\n        options.required = options.required || false;\n        let self = this;\n        $(document).off('click', '#confirmtime');\n        // Pick a time button.\n        $(document).off('click', `.pickatime button`).on('click', `.pickatime button`, async function(e) {\n            e.preventDefault();\n            const $this = $(this);\n            const currenttime = await self.player.getCurrentTime();\n            const field = $(this).data('field');\n            const fieldval = $(`[name=${field}]`).val();\n            if (fieldval) {\n                const parts = fieldval.split(':');\n                const time = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n                await self.player.seek(time); // Go to the time.\n            }\n            // Hide this modal.\n            if (options.modal) {\n                $this.closest('.modal').addClass('d-none');\n                $('.modal-backdrop').addClass('d-none');\n            }\n            if (options.disablelist) {\n                $('#annotationwrapper').addClass('no-pointer-events');\n            }\n            $('#timeline-btns .col:first-child').hide().before(`<div class=\"col confirmtime-wrapper\n                d-flex justify-content-start align-items-center\n                     \"><button class=\"btn btn-circle pulse btn-primary\" id=\"confirmtime\"\n                     title=\"${M.util.get_string('confirmtime', 'ivplugin_contentbank')}\">\n                     <i class=\"fa fa-check\"></i></button></div>`);\n\n            $(document).on('click', '#confirmtime', async function(e) {\n                e.preventDefault();\n                // Show the modal.\n                if (options.modal) {\n                    $this.closest('.modal').removeClass('d-none');\n                    $('.modal-backdrop').removeClass('d-none');\n                }\n                if (options.disablelist) {\n                    $('#annotationwrapper').removeClass('no-pointer-events');\n                }\n                // Remove the button.\n                // Put the time in the input.\n                const time = await self.player.getCurrentTime();\n                const formattedTime = self.convertSecondsToHMS(time, false, true);\n                $(`[name=${field}]`).val(formattedTime);\n                $(this).closest('div').remove();\n                $('#timeline-btns .col:first-child').show();\n                // Go back to the current time.\n                self.player.seek(currenttime);\n            });\n        });\n\n        // Reset time button.\n        $(document).off('click', `.resettime button`).on('click', `.resettime button`, function(e) {\n            e.preventDefault();\n            const field = $(this).data('field');\n            $(`[name=${field}]`).val('');\n            if (options.required) {\n                $(`[name=${field}]`).val(self.convertSecondsToHMS(self.start, false, true));\n            }\n        });\n    }\n\n    saveLog(annotation, data, userid, replaceexisting = 1) {\n        let self = this;\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_log',\n                    annotationid: annotation.id,\n                    contextid: annotation.contextid,\n                    data: JSON.stringify({\n                        'text1': data.text1 || '',\n                        'text2': data.text2 || '',\n                        'text3': data.text3 || '',\n                        'char1': data.char1 || '',\n                        'char2': data.char2 || '',\n                        'char3': data.char3 || '',\n                        'intg1': data.intg1 || 0,\n                        'intg2': data.intg2 || 0,\n                        'intg3': data.intg3 || 0,\n                        'completionid': self.completionid || 0,\n                    }),\n                    userid: userid,\n                    sesskey: M.cfg.sesskey,\n                    token: self.token,\n                    cmid: self.interaction,\n                    replaceexisting: replaceexisting ? 1 : 0,\n                },\n                success: function(res) {\n                    // Do nothing.\n                    try {\n                        res = JSON.parse(res);\n                    } catch (e) {\n                        res = {};\n                    }\n                    resolve(res);\n                }\n            });\n        });\n    }\n\n    renderReportView(annotation, details, data) {\n        let res = '';\n        res = `<span class=\"completion-detail ${details.hasDetails ? 'cursor-pointer' : ''}\"` +\n            ` data-id=\"${data.itemid}\" data-userid=\"${data.row.id}\" data-type=\"${data.ctype}\">${details.reportView}</span>`;\n        if (data.access.canedit == 1) {\n            res += `<i class=\"bi bi-trash3 fs-unset text-danger cursor-pointer position-absolute delete-cell\" `\n                + `title=\"${M.util.get_string('delete', 'mod_interactivevideo')}\"></i>`;\n        }\n        return res;\n    }\n}\n\nexport default Base;"],"names":["constructor","player","annotations","interaction","course","userid","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","totaltime","start","end","properties","cm","token","displayoptions","completionid","extracompletion","options","prop","Number","JSON","parse","cache","isBS5","hasClass","dispatchEvent","name","detail","enableColorPicker","document","on","color","this","val","closest","css","find","removeClass","off","addClass","formatContent","text","shorttext","annotation","format","addNotification","msg","type","init","isSkipped","timestamp","isInSkipSegment","isBetweenStartAndEnd","convertSecondsToHMS","s","dynamic","rounded","Math","round","hours","floor","toString","padStart","minutes","seconds","toFixed","convertHMSToSeconds","hms","split","reduce","acc","time","renderEditItem","listItem","item","removeAttr","attr","allowmultiple","id","html","formattedtitle","hascompletion","xp","remove","icon","title","append","M","util","get_string","appendTo","isAlreadyAdded","some","x","validateTimestampFormat","test","validateTimestampFieldValue","fld","hiddenfield","self","async","e","preventDefault","parts","message","seek","pause","addAnnotation","coursemodule","startHMS","endHMS","timestampHMS","data","timestampassist","contextid","cfg","courseid","cmid","annotationid","form","ModalForm","formClass","args","modalConfig","toLowerCase","modal","show","onEditFormLoaded","waitForForm","length","requestAnimationFrame","error","addEventListener","events","LOADED","setTimeout","draggable","handle","SERVER_VALIDATION_ERROR","CLIENT_VALIDATION_ERROR","FORM_SUBMITTED","stopImmediatePropagation","ajax","url","wwwroot","method","dataType","action","sesskey","courseContextId","success","newAnnotation","cloneAnnotation","editAnnotation","modalTitle","filter","done","updated","deleteAnnotation","bulk","ids","promises","map","Promise","resolve","all","postEditCallback","runInteraction","isEditMode","isPreviewMode","isClickable","advanced","clickablebeforecompleted","completed","clickableaftercompleted","isVisible","visiblebeforecompleted","visibleaftercompleted","renderItemOnVideoNavigation","percentage","classes","replace","renderContainer","$message","completiontracking","$completiontoggle","requiremintime","before","tooltip","postContentRender","setModalDraggable","elem","formatTime","parseInt","remainingSeconds","string","completionCallback","thisItem","$toggleButton","audio","Audio","play","earned","hide","toggleCompletion","details","gradableitems","totalXp","_ref","a","b","completedItems","_ref2","earnedXp","_ref3","_ref4","_ref5","itemId","completionDetails","completeTime","Date","hasDetails","windowAnno","window","ANNOS","duration","getTime","newstarttime","timecompleted","completiontime","toLocaleString","reportView","push","Set","markdone","uid","g","parseFloat","c","completeditems","stringify","completiondetails","annotationtype","updatestate","Object","keys","res","grade","target","response","enableManualCompletion","timerequire","timespent","annoid","render","completiononview","intervalFunction","runInterval","setInterval","clearInterval","isPaused","renderViewer","applyContent","querySelector","focus","getCompletionData","getLogs","userids","join","recordid","itemid","timepicker","disablelist","required","$this","currenttime","getCurrentTime","field","fieldval","formattedTime","saveLog","replaceexisting","text1","text2","text3","char1","char2","char3","intg1","intg2","intg3","renderReportView","row","ctype","access","canedit"],"mappings":"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"}