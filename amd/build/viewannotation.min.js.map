{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun; // Last run annotation.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        releventAnnotations = annos;\n        window.IVANNO = annos;\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.earned)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        if (actualAnnotationCounts > 0) {\n            $(\".metadata\").append(`<span class=\"d-inline-block mr-3\">\n            <i class=\"bi bi-stopwatch mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block mr-3\">\n        <i class=\"bi bi-bullseye mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        $(\"#interactions-nav ul\").empty();\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment' && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            $('[data-region=\"chapterlists\"] li').each(function() {\n                const cstart = $(this).data('start');\n                const cend = $(this).data('end');\n                if (x.timestamp >= cstart && x.timestamp < cend) {\n                    $(this).find('.annolistinchapter')\n                        .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star ml-1\"></i></span></li>`);\n                }\n            });\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null) {\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $('#controller #expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $('body').addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    $videoNav.find('#progress').css('width', percentage + '%');\n                    $videoNav.find('#seekhead').css('left', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: $('body').hasClass('preview-mode') ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, totaltime);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    playerReady = true;\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            annotation.earned = Number(JSON.parse(completionitem).xp);\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion);\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @returns {void}\n             */\n            const runInteraction = async(annotation) => {\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                $('#video-wrapper').data('timestamp', new Date().getTime());\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`#message[data-id=${annotation.id}]`).length > 0) {\n                    if (!$('body').hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                        // Switch to the annotation tab.\n                        $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                    }\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                    }, 100);\n                }\n\n                dispatchEvent('interactionrun', {'annotation': annotation});\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            const onLoaded = async() => {\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                const duration = player.totaltime;\n                ({start, end} = await updateTime(duration));\n                totaltime = end - start;\n\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '55px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $('#wrapper').attr('data-ratio', ratio);\n                $('#wrapper').attr('data-gap', gap);\n\n                $('#start-screen #start').focus();\n\n                // Resize observer\n                let vwrapper = document.querySelector('#video-wrapper');\n                const resizeObserver = new ResizeObserver(() => {\n                    // If vwrapper is larger than 1050px, show #expand; otherwise, hide it.\n                    if (vwrapper.clientWidth > 1050) {\n                        $('#controller #expand').removeClass('d-none');\n                    } else {\n                        $('#controller #expand').addClass('d-none');\n                    }\n                });\n\n                resizeObserver.observe(vwrapper);\n\n                // Scroll into view #video-wrapper\n                if ($('body').hasClass('embed-mode')) {\n                    return;\n                }\n                vwrapper.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async() => {\n                if (!loaded) {\n                    await onLoaded();\n                }\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#annotation-canvas\").removeClass('d-none');\n\n                await getAnnotations();\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': function(event, ui) {\n                        player.pause();\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                        $(\"#end-screen\").fadeOut(300);\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        const percentage = relX / $(this).width();\n                        const time = percentage * totaltime;\n                        const formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        await replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                    },\n                    'stop': async function() {\n                        // Reset the launched annotation.\n                        lastrun = null;\n                        viewedAnno = [];\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n                dispatchEvent('timeupdate', {'time': start});\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#controller').addClass('opacity-1');\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                const t = await player.getCurrentTime();\n                const watchedpoint = Math.round(t);\n                if (watchedpoint <= start + 1 || (watchedpoint >= lastSaved - 1 && watchedpoint <= lastSaved + 1)) {\n                    return;\n                }\n                lastSaved = watchedpoint;\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'update_watchedpoint',\n                        sesskey: M.cfg.sesskey,\n                        completionid: completionid,\n                        watchedpoint: watchedpoint,\n                        contextid: M.cfg.contextid\n                    }\n                });\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#currenttime').text(convertSecondsToHMS(totaltime));\n                $('#remainingtime').text(convertSecondsToHMS(0));\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                $('#currenttime').text(convertSecondsToHMS(t - start));\n                $('#remainingtime').text(convertSecondsToHMS(totaltime - (t - start)));\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n                $('#controller').removeClass('opacity-1');\n                if (!videoEnded) {\n                    $('#end-screen, #start-screen').fadeOut(300);\n                    $('#restart').addClass('d-none');\n                }\n                if (!firstPlay) {\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        await player.seek(window.resumetime);\n                    }\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded(end);\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        if (player.type == 'yt') {\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    const t = await player.getCurrentTime();\n\n                    if (t > end) {\n                        onEnded(end);\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    // Make sure wistia is not muted.\n                    if ($('#mute i').hasClass('bi-volume-up') && player.type == 'wistia') {\n                        player.unMute();\n                    }\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    $('#currenttime').text(convertSecondsToHMS(t - start));\n                    $('#remainingtime').text(convertSecondsToHMS(totaltime - (t - start)));\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    $('#video-nav #progress').css('width', percentagePlayed * 100 + '%');\n                    $('#video-nav #seekhead').css('left', percentagePlayed * 100 + '%');\n                    const theAnnotation = releventAnnotations.find(x => (((t - 0.5).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        setTimeout(function() {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if ($('body').hasClass('preview-mode')) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            $('#video-nav #progress')\n                                .css('width', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                            $('#video-nav #seekhead').css('left', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                            await player.seek(theAnnotation.timestamp);\n                            runInteraction(theAnnotation);\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            // Implement the player\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n\n                player = new VideoPlayer();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('timeupdate', async function(e) {\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        $videoNav.find('#progress').css('width', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                        $videoNav.find('#seekhead').css('left', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                    }\n                }\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                runInteraction(annotation);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $('#controller').addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $('#controller').addClass('bg-dark').removeClass('bg-black');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            // Pause video when the tab is not visible.\n            if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                $(document).on('visibilitychange', function() {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                    }\n                });\n            }\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const $this = $(this);\n                $this.find('i').toggleClass('bi-share-fill bi-share');\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                const shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                $this.attr('data-original-title', M.util.get_string(\"copied\", \"mod_interactivevideo\")).tooltip('show');\n                setTimeout(function() {\n                    // Change tooltip back to share.\n                    $this\n                        .attr('data-original-title', M.util.get_string(\"sharethismoment\", \"mod_interactivevideo\"))\n                        .tooltip('hide');\n                    $this.find('i').toggleClass('bi-share-fill bi-share');\n                }, 2000);\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const timestamp = $(this).data('timestamp');\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                player.pause();\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                lastrun = null;\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                $('body').removeClass('hassidebar');\n                $('#annotation-sidebar, #annotation-toggle').remove();\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                $videoNav.find(\"#progress\").css('width', '0%');\n                $videoNav.find(\"#seekhead\").css('left', '0%');\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $('body').addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item text-white changequality\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw ml-n3\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find('[data-toggle=dropdown]').dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', async function() {\n                // Remove the tooltip.\n                $('.tooltip').remove();\n                dispatchEvent('videoPaused');\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n                $loader.fadeOut(300);\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerLoaded', function(e) {\n                onLoaded(e.detail);\n                const captions = e.detail.tracks;\n                if (!captions || captions.length == 0) {\n                    return;\n                }\n                $('#changecaption').removeClass('d-none');\n                $('#changecaption .dropdown-menu')\n                    .html(`<a class=\"dropdown-item text-white changecaption\"\n                     data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check ml-n3\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                captions.forEach(caption => {\n                    $('#changecaption .dropdown-menu')\n                        .append(`<a class=\"dropdown-item text-white changecaption\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw ml-n3\"></i>${caption.label}</a>`);\n                });\n\n                const lang = localStorage.getItem(`caption-${userid}`);\n                if (lang && lang.length) {\n                    $('#changecaption .changecaption[data-lang=\"' + lang + '\"]').trigger('click');\n                }\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                    container: '#wrapper',\n                    boundary: 'window',\n                });\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $('#taskinfo').removeClass('border-0');\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!$('body').hasClass('preview-mode') && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    if (autoplay) {\n                        window.resumetime = time;\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            player.unMute();\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            window.addEventListener('beforeunload', async function() {\n                await player.pause();\n                // Remove all event listeners before unload.\n                $(document).off();\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","dispatchEvent","ctRenderer","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","viewedAnno","$videoNav","$interactionNav","$loader","renderAnnotationItems","async","annos","start","window","IVANNO","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","each","cstart","this","data","cend","find","id","JSON","parse","prop","icon","formattedtitle","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isNaN","playerReady","uprogress","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","css","getAnnotations","annnoitems","ajax","M","cfg","wwwroot","method","dataType","action","sesskey","contextid","courseContextId","userprogress","uid","previewmode","hasClass","getContentTypes","when","done","progress","ct","completiondetails","Object","values","annotation","some","y","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","advanced","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","getRelevantAnnotations","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","all","contentType","require","amdmodule","Type","error","initializeContentTypeRenderers","toggleClass","runInteraction","pause","isPaused","Date","getTime","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","onLoaded","passwordprotected","support","password","IVPLAYER","playbackrate","quality","text","ratio","usefixedratio","aspectratio","gap","attr","focus","vwrapper","document","querySelector","ResizeObserver","clientWidth","observe","scrollIntoView","behavior","block","inline","onReady","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","videoEnded","onEnded","isPlaying","fadeIn","onSeek","visualized","firstPlay","onPlaying","audio","visualizer","resumetime","intervalFunction","isEnded","unMute","time","toFixed","percentagePlayed","frequency","useAnimationFrame","animate","requestAnimationFrame","VideoPlayer","load","useoriginalvideocontrols","autoplay","$toast","detach","on","originalEvent","detail","preventDefault","stopImmediatePropagation","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","tooltip","container","boundary","pauseonblur","visibilityState","setItem","$this","href","shareurl","navigator","clipboard","writeText","parentOffset","offset","pageX","preceedingAnno","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","lang","setCaption","captions","tracks","html","caption","code","label","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","addEventListener","off"],"mappings":"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"}