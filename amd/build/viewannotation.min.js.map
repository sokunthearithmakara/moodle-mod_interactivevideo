{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/quickform', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast, quickform) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    const isBS5 = $('body').hasClass('bs-5');\n    const bsAffix = isBS5 ? '-bs' : '';\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun, // Last run annotation.\n        subvideo; // For multiple videos.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    let $meta = $('.metadata');\n    let $wrapper = $('#wrapper');\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        $meta.empty();\n        $interactionNav.find('ul').empty();\n        $videoNav.find('ul').empty();\n        $('.annolistinchapter').empty();\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (annos.length > 0) {\n            releventAnnotations = annos;\n            window.IVANNO = annos;\n        }\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = annos.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed == true);\n\n        const xpEarned = completableAnno.map(x => Number(x.earned)).reduce((a, b) => a + b, 0) || 0;\n\n        if (actualAnnotationCounts > 0) {\n            $meta.append(`<span class=\"d-inline-block iv-mr-3\">\n            <i class=\"bi bi-stopwatch iv-mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block iv-mr-3\">\n        <i class=\"bi bi-bullseye iv-mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star iv-mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $wrapper.addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        // Handle the chapter list.\n        const chapteritems = annos.filter(x => x.type != 'skipsegment'\n            && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            const advanced = JSON.parse(x.advanced);\n            if ((advanced.visiblebeforecompleted == \"1\" && !x.completed)\n                || (advanced.visibleaftercompleted == \"1\" && x.completed)) {\n                $('[data-region=\"chapterlists\"] li').each(function() {\n\n                    const cstart = $(this).data('start');\n                    const cend = $(this).data('end');\n                    if (x.timestamp >= cstart && x.timestamp < cend) {\n                        $(this).find('.annolistinchapter')\n                            .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} iv-mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} iv-mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star iv-ml-1\"></i></span></li>`);\n                    }\n                });\n            }\n        });\n        if (annos.length == 0) {\n            $('#chaptertoggle').hide();\n        } else {\n            $('#chaptertoggle').show();\n        }\n        dispatchEvent('chapterrendered', {'annotations': annos});\n    };\n\n    const fireConfetti = () => {\n        var duration = 5 * 1000;\n        let confetti = window.confetti;\n        var animationEnd = Date.now() + duration;\n        var defaults = {startVelocity: 30, spread: 360, ticks: 60, zIndex: 1055};\n\n        const randomInRange = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n\n        var interval = setInterval(function() {\n            var timeLeft = animationEnd - Date.now();\n\n            if (timeLeft <= 0) {\n                return clearInterval(interval);\n            }\n\n            var particleCount = 50 * (timeLeft / duration);\n            // Since particles fall down, start a bit higher than random\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.1, 0.3), y: Math.random() - 0.2}});\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.7, 0.9), y: Math.random() - 0.2}});\n            return true;\n        }, 250);\n    };\n\n    window.fireConfetti = fireConfetti;\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @param {boolean} isPreviewMode - The preview mode flag.\n         * @param {boolean} isCompleted - The completed flag.\n         * @param {boolean} iseditor - The editor flag.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null, isPreviewMode = false,\n            isCompleted = false, iseditor = false) {\n\n            doptions = $('#doptions').length > 0 ? JSON.parse($('#doptions').text()) : doptions;\n\n            let $remainingtime = $('#remainingtime');\n            let $currenttime = $('#currenttime');\n            let $lightprogressbar = $('#lightprogressbar');\n            let $duration = $('#duration');\n            let $taskinfo = $('#taskinfo');\n            let $seek = $('#seek');\n            let $startscreen = $('#start-screen');\n            let $endscreen = $('#end-screen');\n            let $controller = $('#controller');\n            let $videowrapper = $('#video-wrapper');\n            let $wrapper = $('#wrapper');\n            let $annotationcanvas = $('#annotation-canvas');\n            let $rewindbutton = $('#rewindbutton');\n            let $forwardbutton = $('#forwardbutton');\n            let $body = $('body');\n            let $progressbar = $videoNav.find('#progress');\n            let $seekhead = $videoNav.find('#seekhead');\n\n            quickform({\n                contextid: M.cfg.contextid,\n                courseid: course,\n                cmid,\n                interaction,\n            });\n\n            require(['theme_boost/bootstrap/modal']);\n            require(['theme_boost/bootstrap/tooltip']);\n\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n            let timeended = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $body.addClass('limited-width');\n                $controller.find('#expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $body.addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    let time = percentage / 100 * totaltime;\n                    $currenttime.text(convertSecondsToHMS(time));\n                    $remainingtime.text(\n                        player.live ? M.util.get_string('live', 'mod_interactivevideo') : convertSecondsToHMS(totaltime - time));\n                    $progressbar.css('width', percentage + '%');\n                    $seekhead.css('left', percentage + '%');\n                    $lightprogressbar.css('width', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: isPreviewMode ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        fromview: 1,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    if (player.live) { // Live video does not have end time.\n                        annotations = annotations.filter(x => x.timestamp < 0);\n                    }\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    timeended = progress.timeended;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    // Sort by type first, then by timestamp\n                    annotations.sort((a, b) => {\n                        if (a.type < b.type) {\n                            return -1;\n                        }\n                        if (a.type > b.type) {\n                            return 1;\n                        }\n                        return a.timestamp - b.timestamp;\n                    });\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n                    window.ANNOS = releventAnnotations;\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, end - start);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").removeClass('d-none');\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            let thisitem = JSON.parse(completionitem);\n                            annotation.earned = Number(thisitem.xp); // Earned from previous attempt.\n                            if (thisitem.percent) { // IV1.4.1 introduce percent to handle when teacher updates XP afterward.\n                                annotation.earned = annotation.xp * thisitem.percent;\n                            }\n                            if (annotation.earned > annotation.xp) { // What if the teacher decreases the XP afterward?\n                                annotation.earned = annotation.xp;\n                            }\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                            if (isPreviewMode) {\n                                annotation.completed = true;\n                                annotation.previewMode = true;\n                            }\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    // We only want the relevant content types.\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion, {\n                                    isPreviewMode,\n                                    isCompleted,\n                                    iseditor,\n                                    url\n                                });\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @param {boolean} force force run the interaction\n             * @returns {void}\n             */\n            const runInteraction = async(annotation, force = false) => {\n                if (subvideo) {\n                    return;\n                }\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $startscreen.fadeOut(300);\n                $endscreen.fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`.sidebar-nav-item[data-id=${annotation.id}]`).length > 0 && !force) {\n                    if (!$body.hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                    }\n                    $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                        // In case there is an active interaction, trigger the interactionclose event.\n                        if ($('#message.active').length > 0) {\n                            $('#message.active').each(function() {\n                                const id = $(this).data('id');\n                                if (id != annotation.id) {\n                                    $(this).removeClass('active');\n                                    dispatchEvent('interactionclose', {'annotation': {'id': id}});\n                                }\n                            });\n                        }\n                        dispatchEvent('interactionrun', {'annotation': annotation});\n                    }, 100);\n                }\n\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            cmid: cmid,\n                            courseid: course,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            let lookbacktime = 0;\n\n            const onLoaded = async(reloaded = false, e = null) => {\n                let $changecaption = $('#changecaption');\n                if (e) {\n                    const captions = e.detail.tracks;\n                    if (captions && captions.length > 0) {\n                        $changecaption.removeClass('d-none');\n                        $changecaption.find('.dropdown-menu')\n                            .html(`<a class=\"dropdown-item changecaption px-3\" data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                        let menu = '';\n                        captions.forEach((caption, i) => {\n                            menu += `<a class=\"dropdown-item changecaption text-white px-3\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw\"></i>${caption.label}</a>`;\n                            if (i == captions.length - 1) {\n                                $changecaption.find('.dropdown-menu')\n                                    .append(menu);\n                                const lang = localStorage.getItem(`caption-${userid}`);\n                                if (lang && lang.length) {\n                                    $changecaption.find(`[data-lang=\"${lang}\"]`).trigger('click');\n                                }\n                            }\n                        });\n                    } else {\n                        $changecaption.addClass('d-none');\n                    }\n                }\n\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $startscreen.removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                lookbacktime = Math.max(0.5, player.frequency); // How far back to look for annotations.\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').addClass('d-none');\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').addClass('d-none');\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                const duration = player.totaltime;\n                if (!reloaded) {\n                    ({start, end} = await updateTime(duration));\n                }\n                totaltime = end - start;\n\n                if (!player.live) {\n                    $duration.text(convertSecondsToHMS(totaltime));\n                }\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $videowrapper.css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($body.hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '75px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $wrapper.attr('data-ratio', ratio);\n                $wrapper.attr('data-gap', gap);\n\n                $startscreen.find('#start').focus();\n\n                // Resize observer\n                if (!reloaded) {\n                    let vwrapper = document.querySelector('#video-wrapper');\n                    // Optimize: Only update DOM if state changes, and debounce resize events.\n                    let lastExpandVisible = null;\n                    let resizeTimeout;\n                    const updateExpandVisibility = () => {\n                        const shouldShow = vwrapper.clientWidth > 1050;\n                        if (shouldShow !== lastExpandVisible) {\n                            $controller.find('#expand').toggleClass('d-none', !shouldShow);\n                            lastExpandVisible = shouldShow;\n                        }\n                    };\n                    const resizeObserver = new ResizeObserver(() => {\n                        clearTimeout(resizeTimeout);\n                        resizeTimeout = setTimeout(updateExpandVisibility, 100);\n                    });\n                    resizeObserver.observe(vwrapper);\n                    // Initial check\n                    updateExpandVisibility();\n\n                    // Scroll into view #video-wrapper\n                    if ($body.hasClass('embed-mode')) {\n                        return;\n                    }\n                    $('#annotation-content')[0].scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n                }\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @param {boolean} reloaded Whether the video is being reloaded.\n             * @param {boolean} main Whether the video is the default video.\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async(reloaded = false, main = false) => {\n                if ((window.braveEthereum || window.braveSolana) && !player.allowAutoplay) {\n                    player.destroy();\n                    Toast.add(M.util.get_string('braveautoplay', 'mod_interactivevideo'), {\n                        type: 'danger',\n                        autohide: false,\n                    });\n                    setTimeout(() => {\n                        $('#toast-0').css('margin-top', '70px');\n                        $('#interactivevideo-container').addClass('no-pointer-events');\n                    }, 500);\n                    return;\n                }\n\n                if (!reloaded) {\n                    player.pause();\n                    const isPaused = await player.isPaused();\n                    if (!isPaused) {\n                        if (!player.live) {\n                            await player.seek(start);\n                        }\n                        onReady();\n                        return;\n                    }\n                }\n\n                if (!loaded) {\n                    await onLoaded(reloaded);\n                }\n\n                if (player.audio) {\n                    $annotationcanvas.addClass('bg-black');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                $(\"#annotation-canvas\").removeClass('w-0 d-none');\n                $(\".video-block\").css('background', 'transparent');\n                if (displayoptions.useoriginalvideocontrols == 0) {\n                    $(\".video-block\").removeClass('no-pointer');\n                }\n\n                if (!reloaded) {\n                    await getAnnotations();\n                } else {\n                    if (main) {\n                        await renderAnnotationItems(releventAnnotations, start, end - start);\n                    } else {\n                        await renderAnnotationItems([], start, end - start);\n                    }\n                }\n\n                if (player.live) {\n                    // Remove the slash.\n                    $currenttime.next().removeClass('d-md-inline');\n                    $currenttime.removeClass('d-md-inline');\n                    $duration.text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $remainingtime.text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $taskinfo.addClass('no-pointer-events');\n                    end = Number.MAX_SAFE_INTEGER;\n                    // Progress 100%.\n                    replaceProgressBars(100);\n                    return;\n                } else {\n                    $currenttime.next().addClass('d-md-inline');\n                    $currenttime.addClass('d-md-inline');\n                }\n\n                if (!reloaded) {\n                    $seekhead.draggable({\n                        'containment': '#video-nav',\n                        'axis': 'x',\n                        'cursor': 'col-resize',\n                        'start': async function(event, ui) {\n                            const isPaused = await player.isPaused();\n                            if (!isPaused) {\n                                player.pause();\n                            }\n                            $(this).addClass('active');\n                            $taskinfo.addClass('no-pointer-events');\n                            $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                            $endscreen.fadeOut(300);\n                            $seek.append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                            let $position = $('#position');\n                            const relX = ui.position.left;\n                            $position.css('left', (relX) + 'px');\n                            const percentage = relX / $(this).width();\n                            const time = percentage * totaltime;\n                            const formattedTime = convertSecondsToHMS(time);\n                            $position.find('#timelabel').text(formattedTime);\n                        },\n                        'drag': async function(event, ui) {\n                            let timestamp = ((ui.position.left) / $videoNav.width()) * totaltime + start;\n                            let percentage = ui.position.left / $videoNav.width();\n                            await replaceProgressBars(percentage * 100);\n                            $seek.find('#position').css('left', ui.position.left + 'px');\n                            $seek.find('#position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                            await player.seek(timestamp);\n                        },\n                        'stop': async function() {\n                            // Reset the launched annotation.\n                            lastrun = null;\n                            viewedAnno = [];\n                            setTimeout(function() {\n                                $taskinfo.removeClass('no-pointer-events');\n                            }, 200);\n                            setTimeout(function() {\n                                $('#seekhead').removeClass('active');\n                                $seek.find('#position').remove();\n                            }, 1000);\n                            player.play();\n                        }\n                    });\n\n                    dispatchEvent('timeupdate', {'time': start}); // Dispatch the timeupdate event with the start time.\n                }\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async(savepoint = false) => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('playtooltip', 'mod_interactivevideo'));\n                if (player.live) {\n                    return;\n                }\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                // We don't save the progress of the subvideo.\n                if (subvideo) {\n                    return;\n                }\n                if (savepoint || $body.hasClass('embed-mode') || $body.hasClass('iframe')\n                    || $body.hasClass('mobileapp')) {\n                    let t = await player.getCurrentTime();\n                    let watchedpoint = Math.round(t);\n                    // Make sure the watchedpoint is not the same as the last saved point or so close to it.\n                    if ((Math.abs(watchedpoint - lastSaved) < 5 && watchedpoint != Math.round(end)) || watchedpoint < start + 5) {\n                        return;\n                    }\n                    lastSaved = watchedpoint;\n                    fetch(M.cfg.wwwroot + '/mod/interactivevideo/ajax.php', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        },\n                        body: new URLSearchParams({\n                            action: 'update_watchedpoint',\n                            sesskey: M.cfg.sesskey,\n                            completionid: completionid,\n                            watchedpoint: watchedpoint,\n                            contextid: M.cfg.contextid\n                        }).toString(),\n                        keepalive: true\n                    });\n                }\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded || player.live) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $endscreen.removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n\n                // Update the timeended field in the database if it is not already set.\n                if (!timeended) {\n                    $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_timeended',\n                            sesskey: M.cfg.sesskey,\n                            completionid: completionid,\n                            contextid: M.cfg.contextid,\n                            courseid: course,\n                            interactivevideo: interaction,\n                            userid: userid,\n                            updatestate: extendedcompletion && JSON.parse(extendedcompletion).watchtillend == 1 ? 1 : 0,\n                        },\n                        success: function(data) {\n                            try {\n                                data = JSON.parse(data);\n                            } catch {\n                                return;\n                            }\n                            if (data) {\n                                timeended = true;\n                                dispatchEvent('completionupdated', {\n                                    response: JSON.stringify({\n                                        overallcomplete: data.overallcomplete,\n                                    })\n                                });\n                            }\n                        }\n                    });\n                }\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (player.live) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (!firstPlay) {\n                    // If seeking before the first play, then we need to set the resumetime to the current time.\n                    window.resumetime = t;\n                }\n                if (t > start && t < end) {\n                    $endscreen.addClass('d-none');\n                    $startscreen.addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) < t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                // If lastrun timestamp is greater than t, then we need to reset it.\n                if (lastrun && releventAnnotations.find(x => x.id == lastrun).timestamp > t) {\n                    lastrun = null;\n                }\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n\n                if (player.live) {\n                    return;\n                }\n\n                if (!firstPlay) {\n                    dispatchEvent('iv:playerStart');\n                    replaceProgressBars(window.resumetime ? (window.resumetime - start) / totaltime * 100 : 0);\n                    viewedAnno = [];\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        if (player.allowAutoplay) {\n                            await player.seek(window.resumetime);\n                        } else {\n                            await player.pause();\n                            await player.seek(window.resumetime);\n                            player.play();\n                        }\n                    }\n                    player.unMute();\n                    dispatchEvent('iv:playerStarted');\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded();\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube' || player.type == 'yt') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    let t = await player.getCurrentTime();\n                    t = Number(t);\n\n                    if (t > end) {\n                        onEnded();\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    replaceProgressBars(percentagePlayed * 100);\n\n                    if (subvideo) {\n                        return;\n                    }\n\n                    const theAnnotation = releventAnnotations.find(x => (((t - lookbacktime).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        viewedAnno = [];\n                        releventAnnotations.forEach(x => {\n                            if (Number(x.timestamp) < t) {\n                                viewedAnno.push(Number(x.id));\n                            }\n                        });\n\n                        $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        if (isBS5) {\n                            $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip]')\n                                .tooltip('show');\n                        }\n                        setTimeout(function() {\n                            $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                            if (isBS5) {\n                                $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip]')\n                                    .tooltip('hide');\n                            }\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if (isPreviewMode) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                            if (time < theAnnotation.timestamp - player.frequency) {\n                                await player.seek(theAnnotation.timestamp);\n                            }\n                            runInteraction(theAnnotation);\n                        } else {\n                            if (theAnnotation.completed) {\n                                if (time < theAnnotation.timestamp - player.frequency) {\n                                    await player.seek(theAnnotation.timestamp);\n                                }\n                                viewedAnno.push(Number(theAnnotation.id));\n                            }\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            const onPlay = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $body.removeClass('disablekb');\n                // Initialize the player visualizer for html5 audio.\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                // Force fullscreen for mobile themes and mobile devices.\n                if ($body.hasClass('mobiletheme') && !$wrapper.hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pausetooltip', 'mod_interactivevideo'));\n\n                if ($('#message.active').length > 0) {\n                    $('#message.active').each(function() {\n                        const mid = $(this).data('id');\n                        if (mid) {\n                            $(this).removeClass('active');\n                            dispatchEvent('interactionclose', {'annotation': {'id': mid}});\n                        }\n                    });\n                }\n\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n\n                if (!videoEnded) {\n                    $endscreen.fadeOut(300);\n                    $startscreen.fadeOut(300);\n                    $('#restart').addClass('d-none');\n                } else {\n                    viewedAnno = [];\n                }\n\n                // Autohide controls if $videowrapper is not hovered after 5 seconds.\n                if (displayoptions.autohidecontrols == 1\n                    && !$body.hasClass('embed-mode') && !$body.hasClass('mobileapp') && !$body.hasClass('iframe')) {\n                    setTimeout(function() {\n                        if (!$videowrapper.is(':hover')) {\n                            $controller.addClass('fadeOut');\n                        }\n                    }, 5000);\n                }\n            };\n\n            // Implement the player.\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer();\n                player.poster = $('#posterimagehidden').attr('src');\n                player.doptions = doptions;\n                player.title = $('#titlehidden').val();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $startscreen.addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $annotationcanvas.removeClass('d-none w-0');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $wrapper.append($toast);\n\n            $(document).on('click', '.completion-required', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                return;\n            });\n\n            const handleUnskippable = async(t) => {\n                // Handle unskippable interactions.\n                if (!t) {\n                    t = await player.getCurrentTime();\n                }\n                if (!t) {\n                    return false;\n                }\n                if (releventAnnotations) {\n                    const theAnnotation = releventAnnotations.find(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && JSON.parse(x.advanced).advskippable == 0 && x.hascompletion == 1);\n                    if (theAnnotation) {\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $(document).on('timeupdate', async function(e) {\n                if (!playerReady || isPreviewMode || player.live) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                    }\n                }\n                handleUnskippable(t);\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                $(this).tooltip('hide');\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                dispatchEvent('interactionrefresh', {'annotation': annotation});\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$wrapper.hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $wrapper.addClass('fullscreen');\n                    $('#interactivevideo-container').addClass('fullscreen');\n                    $videowrapper.css('padding-bottom', '0');\n                    $wrapper.find(`[data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $controller.addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $wrapper.removeClass('fullscreen');\n                    $('#interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $videowrapper.css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $controller.addClass('bg-dark').removeClass('bg-black');\n                }\n                $wrapper.find('#fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            $(document).on('visibilitychange', async function() {\n                // Pause video when the tab is not visible and the pauseonblur option is enabled.\n                if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                        onPaused(true);\n                    }\n                }\n            });\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $body.toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $body.hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                let shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Remove the embed parameter if it exists.\n                shareurl = shareurl.replace(/&embed=1/g, '');\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                const copied = M.util.get_string('copiedtoclipboard', 'mod_interactivevideo');\n                Toast.add(copied, {\n                    type: 'success',\n                    autohide: true,\n                    delay: 2000,\n                });\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const timestamp = $(this).data('timestamp');\n\n                let hasSkippable = await handleUnskippable(timestamp);\n                if (hasSkippable) {\n                    return;\n                }\n\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    player.pause();\n                }\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($videoNav.hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $startscreen.fadeOut(300);\n                $endscreen.fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                const isPlaying = await player.isPlaying();\n                if (!isPlaying || videoEnded) {\n                    await player.play();\n                }\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                if ($(this).hasClass('reload')) {\n                    location.reload();\n                    return;\n                }\n                $startscreen.find('.h1').addClass('trantohide');\n                $startscreen.fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                try {\n                    player.play();\n                } catch (error) {\n                    // Do nothing.\n                }\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                dispatchEvent('iv:playerRestart');\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                if ($body.hasClass('hassidebar')) {\n                    $('#annotation-toggle').trigger('click');\n                    $('#annotation-sidebar, #annotation-toggle').remove();\n                    $body.removeClass('hassidebar');\n                    $('.iv-sidebar').addClass('hide');\n                }\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                replaceProgressBars(0);\n                $endscreen.fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                if (player.live) {\n                    firstPlay = true;\n                }\n                if (!firstPlay) {\n                    player.play();\n                    return;\n                }\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $endscreen.find('#restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $body.addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n                // Get the active annotation.\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    // Dispatch the interaction run event.\n                    dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == current)});\n                }\n            });\n\n            // Autohide controls when mouse leaves #video-wrapper after 5 seconds.\n            if (displayoptions.autohidecontrols == 1\n                && !$body.hasClass('embed-mode') && !$body.hasClass('mobileapp') && !$body.hasClass('iframe')) {\n                $videowrapper.on('mouseleave', function() {\n                    setTimeout(function() {\n                        // Check if the mouse is still over #video-wrapper.\n                        if ($videowrapper.is(':hover')) {\n                            return;\n                        }\n                        // Hide the controls.\n                        $controller.addClass('fadeOut');\n                    }, 3000);\n                });\n\n                $videowrapper.on('mouseenter', function() {\n                    setTimeout(function() {\n                        if (!$videowrapper.is(':hover')) {\n                            return;\n                        }\n                        $controller.removeClass('fadeOut');\n                    }, 1000); // To avoid accidental mouseenter event.\n                });\n            }\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmutetooltip', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mutetooltip', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item changequality text-white px-3\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find(`[data${bsAffix}-toggle=dropdown]`).dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            if (displayoptions.preventseeking == 0) {\n                $rewindbutton.on('click', async function() {\n                    let t = await player.getCurrentTime() - 5;\n                    if (t < start) {\n                        t = start;\n                    }\n                    await player.seek(t);\n                });\n\n\n                $forwardbutton.on('click', async function() {\n                    let t = await player.getCurrentTime() + 5;\n                    if (t > end) {\n                        t = end;\n                    }\n                    await player.seek(t);\n                });\n            }\n\n            $(document).one('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerDestroyed', function() {\n                playerReady = false;\n            });\n\n            const addPlayerEvents = function() {\n                $(document).on('iv:playerPaused', function() {\n                    // Remove the tooltip.\n                    $('.tooltip').remove();\n                    dispatchEvent('videoPaused');\n                    onPaused();\n                });\n\n                $(document).on('iv:playerPlaying', function() {\n                    onPlaying();\n                });\n\n                $(document).on('iv:playerPlay', function() {\n                    onPlay();\n                    $loader.fadeOut(300);\n                });\n\n                $(document).on('iv:playerEnded', function() {\n                    onEnded();\n                });\n\n                $(document).on('iv:playerSeek', function(e) {\n                    if (player.live) {\n                        return;\n                    }\n                    onSeek(e.detail.time);\n                });\n\n                $(document).on('iv:playerLoaded', function(e) {\n                    const reloaded = e.detail.reloaded || false;\n                    onLoaded(reloaded, e);\n                });\n\n                $(document).on('iv:playerError', function() {\n                    $annotationcanvas.removeClass('d-none w-0');\n                    $startscreen.addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#spinner').remove();\n                    if ($('#player').is(':empty')) {\n                        $('#player').html(`<div class=\"alert alert-danger d-flex text-center h-100 rounded-0\n                         align-items-center justify-content-center\">\n                        <img src=\"${M.cfg.wwwroot}/mod/interactivevideo/pix/404-error.png\" alt=\"Error\" class=\"w-25\">\n                        </div>`);\n                    } else {\n                        Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                    }\n                });\n\n                $(document).on('iv:playerRateChange', function(e) {\n                    $('.changerate').find('i').removeClass('bi-check');\n                    $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n                });\n\n                $(document).on('iv:playerQualityChange', function(e) {\n                    $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                    $('.changequality').find('i').removeClass('bi-check');\n                    $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n                });\n            };\n\n            addPlayerEvents();\n\n            $(document).on('annotationitemsrendered', function() {\n                try {\n                    $wrapper.find(`[data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } catch (error) {\n                    // Do nothing.\n                }\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $taskinfo.removeClass('border-0');\n                }\n\n                if (!playerReady) {\n                    playerReady = true;\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!isPreviewMode && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    window.resumetime = time;\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    if (player.live) {\n                        replaceProgressBars(100);\n                    }\n                    // Get noautoplay from the URL.\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const noautoplay = urlParams.get('da');\n                    if (autoplay && player.allowAutoplay && noautoplay != '1') {\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            try {\n                                player.unMute();\n                            } catch (error) {\n                                // Do nothing.\n                            }\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            $(`[data${bsAffix}-toggle=\"tooltip\"]`).on('click', function() {\n                const $this = $(this);\n                $this.tooltip('hide');\n            });\n\n            window.addEventListener('beforeunload', function() {\n                player.pause();\n                onPaused(true);\n                // Remove all event listeners before unload.\n                $(document).off();\n                cancelAnimationFrame(playingInterval);\n            });\n\n            $(document).on('interactionrun', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.starttime = windowAnno.starttime ? windowAnno.starttime : new Date().getTime();\n                    windowAnno.newstarttime = new Date().getTime();\n                    windowAnno.completedtime = windowAnno.completedtime ? windowAnno.completedtime : null;\n                    windowAnno.duration = windowAnno.duration > 0 ? windowAnno.duration : 0;\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('interactionclose interactionrefresh', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('completionupdated', function(e) {\n                let overallcomplete = JSON.parse(e.originalEvent.detail.response).overallcomplete;\n                if (overallcomplete) {\n                    if (JSON.parse(e.originalEvent.detail.response).overallcomplete > 0) {\n                        if (isCompleted) {\n                            return;\n                        }\n                        isCompleted = true;\n                        fireConfetti();\n                        Toast.add(M.util.get_string('congratulationsyoucompletethisactivity', 'mod_interactivevideo'), {\n                            type: 'success',\n                        });\n                        $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle-fill text-success\"></i>`);\n                    } else {\n                        isCompleted = false;\n                        $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle text-white\"></i>`);\n                    }\n                }\n                const annotation = e.originalEvent.detail.target;\n                if (!annotation) {\n                    return;\n                }\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    if (e.originalEvent.detail.action == 'mark-done') {\n                        windowAnno.completedtime = new Date().getTime();\n                    } else {\n                        windowAnno.completedtime = null;\n                    }\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n\n                // Handle the dismissible setting.\n                $('#message[data-id=' + annotation.id + ']').addClass('active'); // Make sure the message is active.\n                let anno = releventAnnotations.find(x => x.id == annotation.id);\n                let advanced = anno.advanced;\n                advanced = advanced ? JSON.parse(advanced) : {};\n                if (advanced.advdismissible == 0 && anno.completed) {\n                    $('#controller, #video-wrapper, .sidebar-nav-item')\n                        .removeClass('completion-required');\n                } else if (advanced.advdismissible == 0 && !anno.completed) {\n                    $controller.addClass('completion-required');\n                    if ($('#message.active').data('placement') == 'bottom' || $('#message.active').data('placement') == 'side') {\n                        $('#video-wrapper').addClass('completion-required');\n                    }\n                    if ($('#message.active').data('placement') == 'side') {\n                        $('.sidebar-nav-item').addClass('completion-required');\n                    }\n                }\n                if (anno.completed) {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').addClass('completed');\n                } else {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').removeClass('completed');\n                }\n            });\n\n            $(document).on('iv:autoplayBlocked', function(e) {\n                e.preventDefault();\n                if (e.originalEvent.detail.requireVideoBlock === false) {\n                    $('.video-block').remove();\n                }\n\n                Toast.add(M.util.get_string('autoplayblocked', 'mod_interactivevideo'), {\n                    type: 'default',\n                    autohide: true,\n                    delay: 5000,\n                });\n            });\n\n            const updatePlayer = async(newPlayer) => {\n                player = newPlayer;\n                start = newPlayer.start;\n                end = newPlayer.end;\n                vtype = newPlayer.type;\n                loaded = false;\n                // Change player in all content types.\n                let types = Object.keys(ctRenderer);\n                return await Promise.all(types.map(async(type) => {\n                    return ctRenderer[type].setPlayer(newPlayer, start, end, vtype);\n                }));\n            };\n\n            $(document).on('iv:playerReload', async function(e) {\n                playerReady = true;\n                viewedAnno = [];\n                lastrun = null;\n                videoEnded = false;\n                let detail = e.originalEvent.detail;\n                if (detail.behavior == 'series') {\n                    subvideo = !detail.main;\n                } else {\n                    subvideo = false;\n                }\n\n                if (detail.player) {\n                    detail.player.subvideo = subvideo;\n                    await updatePlayer(detail.player, detail.behavior);\n                }\n\n                onReady(true, detail.main); // Main is true if the video is the default video.\n                replaceProgressBars(detail.currentTime / (end - start) * 100);\n            });\n\n            $(document).on('click', '#message[data-placement]:not(.active)', function(e) {\n                e.preventDefault();\n                $(this).addClass('active');\n                // Dispatch the interaction run event.\n                dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == $(this).data('id'))});\n            });\n\n            // Implement keyboard shortcuts.\n            document.addEventListener('keydown', async function(e) {\n                // Ignore spacebar when focus is on an input, textarea, or button\n                const activeTag = document.activeElement.tagName.toLowerCase();\n                if (activeTag !== 'body') {\n                    return;\n                }\n\n                if ($body.hasClass('disablekb')) {\n                    return;\n                }\n\n                if (e.ctrlKey || e.metaKey || e.altKey) {\n                    return; // Ignore if any modifier keys are pressed.\n                }\n\n                switch (e.code) {\n                    case 'Space':\n                        e.preventDefault(); // Prevent page scroll.\n                        if (await player.isPaused()) {\n                            player.play();\n                        } else {\n                            player.pause();\n                        }\n                        break;\n                    case 'KeyC':\n                        e.preventDefault();\n                        $('#chaptertoggle .btn').trigger('click');\n                        break;\n                    case 'KeyM':\n                        e.preventDefault();\n                        if ($('#mute').length > 0) {\n                            $('#mute').trigger('click');\n                        } else {\n                            const isMuted = await player.isMuted();\n                            if (isMuted) {\n                                player.unMute();\n                            } else {\n                                player.mute();\n                            }\n                        }\n                        break;\n                    case 'KeyF':\n                        e.preventDefault();\n                        $('#fullscreen').trigger('click');\n                        break;\n                    case 'KeyR':\n                        e.preventDefault();\n                        $endscreen.find('#restart').trigger('click');\n                        break;\n                    case 'KeyS':\n                        e.preventDefault();\n                        $controller.find('#share').trigger('click');\n                        break;\n                    case 'KeyE':\n                        e.preventDefault();\n                        if ($controller.find('#expand').length > 0) {\n                            $controller.find('#expand').trigger('click');\n                        } else {\n                            $body.toggleClass('limited-width');\n                            localStorage.setItem('limitedwidth', $body.hasClass('limited-width'));\n                        }\n                        break;\n                    case 'ArrowLeft':\n                        e.preventDefault();\n                        $rewindbutton.trigger('click');\n                        break;\n                    case 'ArrowRight':\n                        e.preventDefault();\n                        $forwardbutton.trigger('click');\n                        break;\n                }\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","quickform","dispatchEvent","ctRenderer","isBS5","hasClass","bsAffix","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","subvideo","viewedAnno","$videoNav","$interactionNav","$loader","$meta","$wrapper","renderAnnotationItems","async","annos","start","empty","find","preventseeking","addClass","length","window","IVANNO","actualduration","skipsegments","filter","x","type","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","advanced","JSON","parse","visiblebeforecompleted","visibleaftercompleted","each","cstart","this","data","cend","id","prop","icon","formattedtitle","hide","show","fireConfetti","confetti","animationEnd","Date","now","defaults","startVelocity","spread","ticks","zIndex","randomInRange","min","max","random","interval","setInterval","timeLeft","clearInterval","particleCount","origin","y","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isPreviewMode","isCompleted","iseditor","text","$remainingtime","$currenttime","$lightprogressbar","$duration","$taskinfo","$seek","$startscreen","$endscreen","$controller","$videowrapper","$annotationcanvas","$rewindbutton","$forwardbutton","$body","$progressbar","$seekhead","contextid","M","cfg","courseid","require","isNaN","playerReady","uprogress","timeended","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","time","live","util","get_string","css","getAnnotations","annnoitems","ajax","wwwroot","method","dataType","action","sesskey","courseContextId","userprogress","uid","previewmode","getContentTypes","fromview","when","done","progress","ct","completiondetails","Object","values","annotation","some","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","thisitem","percent","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","previewMode","getRelevantAnnotations","ANNOS","unshift","prependDummyChapter","chapterContentType","includes","remove","all","contentType","amdmodule","Type","error","initializeContentTypeRenderers","runInteraction","force","pause","isPaused","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","lookbacktime","onLoaded","reloaded","$changecaption","captions","detail","tracks","html","menu","caption","i","code","label","lang","passwordprotected","support","password","IVPLAYER","frequency","playbackrate","quality","ratio","usefixedratio","aspectratio","gap","attr","focus","resizeTimeout","vwrapper","document","querySelector","lastExpandVisible","updateExpandVisibility","shouldShow","clientWidth","toggleClass","ResizeObserver","clearTimeout","observe","scrollIntoView","behavior","block","inline","onReady","main","braveEthereum","braveSolana","allowAutoplay","destroy","autohide","audio","useoriginalvideocontrols","next","MAX_SAFE_INTEGER","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","savepoint","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","abs","fetch","headers","body","keepalive","videoEnded","onEnded","isPlaying","fadeIn","interactivevideo","updatestate","watchtillend","success","response","overallcomplete","onSeek","firstPlay","resumetime","visualized","onPlaying","unMute","intervalFunction","isEnded","toFixed","percentagePlayed","tooltip","useAnimationFrame","animate","requestAnimationFrame","onPlay","visualizer","mid","autohidecontrols","is","VideoPlayer","poster","val","load","autoplay","$toast","detach","on","preventDefault","stopImmediatePropagation","handleUnskippable","advskippable","originalEvent","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","container","boundary","pauseonblur","visibilityState","setItem","href","shareurl","replace","navigator","clipboard","writeText","copied","delay","parentOffset","offset","pageX","preceedingAnno","reload","current","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","dropdown","setQuality","setCaption","one","addPlayerEvents","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","noautoplay","addEventListener","off","windowAnnos","windowAnno","starttime","getTime","newstarttime","completedtime","target","anno","advdismissible","requireVideoBlock","updatePlayer","newPlayer","types","keys","setPlayer","currentTime","activeElement","tagName","toLowerCase","ctrlKey","metaKey","altKey","isMuted"],"mappings":";;;;;;;AAwBAA,6CAAO,CACH,SAAU,wBAAyB,aAAc,iCAAkC,6CACpF,SAASC,EAAGC,gBAAiBC,MAAOC,iBAC7BC,cAACA,eAAiBH,gBAClBI,WAAa,GACbC,MAAQN,EAAE,QAAQO,SAAS,QAC3BC,QAAUF,MAAQ,MAAQ,OAC5BG,YACAC,UACAC,aAEAC,aACAC,eACAC,oBACAC,aACAC,OACAC,QACAC,SAPAC,WAAa,SASXC,UAAYpB,EAAE,cACdqB,gBAAkBrB,EAAE,qBACpBsB,QAAUtB,EAAE,2BAkBduB,MAAQvB,EAAE,aACVwB,SAAWxB,EAAE,kBACXyB,sBAAwBC,MAAMC,MAAOC,MAAOlB,aAC9Ca,MAAMM,QACNR,gBAAgBS,KAAK,MAAMD,QAC3BT,UAAUU,KAAK,MAAMD,QACrB7B,EAAE,sBAAsB6B,QACa,GAAjChB,eAAekB,gBACfX,UAAUY,SAAS,qBAGnBL,MAAMM,OAAS,IACfnB,oBAAsBa,MACtBO,OAAOC,OAASR,WAEhBS,eAAiB1B,gBAEf2B,aAAeV,MAAMW,QAAOC,GAAe,eAAVA,EAAEC,OAErCH,aAAaJ,OAAS,GACtBI,aAAaI,SAAQF,UACXN,OAAUS,OAAOH,EAAEI,OAASD,OAAOH,EAAEK,WAC3CR,gBAAkBH,gBAIpBY,gBAAkBlB,MAAMW,QAAOC,GAAwB,GAAnBA,EAAEO,gBACtCC,uBAAyBF,gBAAgBZ,OAEzCe,GAAKH,gBAAgBI,KAAIV,GAAKG,OAAOH,EAAES,MAAKE,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAEpEC,eAAiBR,gBAClBP,QAAOC,GAAoB,GAAfA,EAAEe,YAEbC,SAAWV,gBAAgBI,KAAIV,GAAKG,OAAOH,EAAEiB,UAASN,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,IAAM,KAEtFL,uBAAyB,GACzBxB,MAAMkC,2GAtDMC,CAAAA,gBACVC,MAAQC,KAAKC,MAAMH,QAAU,MAC7BI,QAAUF,KAAKC,MAAOH,QAAU,KAAQ,IACxCK,iBAAmBL,QAAU,OAC/BM,OAAS,UACTL,MAAQ,IACRK,QAAUL,MAAQ,MAElBG,QAAU,IACVE,QAAUF,QAAU,MAEpBC,iBAAmB,IACnBC,QAAUD,iBAAmB,KAE1BC,QAyCsCC,CAAWL,KAAKM,KAAK9B,sIAE1BiB,eAAepB,qBAAYc,kHACFQ,uBAAcP,eAGnC,GAAxCnC,eAAesD,uBAAiE,GAAnCtD,eAAeuD,wBAChB,GAAxCvD,eAAesD,uBACf3C,SAASQ,SAAS,oBAEtB5B,cAAc,0BAA2B,aACtBuB,gBACF0B,eAAepB,aACnBc,0BACHQ,iBACKP,SAId,MAAMT,KAAKZ,MAAO,OACb0C,SAAWhE,WAAWkC,EAAEC,YACxB6B,SAASC,4BAA4B/B,GAE/CnC,cAAc,0BAA2B,aACtBuB,gBACF0B,eAAepB,aACnBc,0BACHQ,iBACKP,WAITuB,aAAe5C,MAAMW,QAAOC,GAAe,eAAVA,EAAEC,MACf,GAAnBD,EAAEO,gBACTyB,aAAaC,MAAK,CAACrB,EAAGC,IAAMD,EAAEP,UAAYQ,EAAER,YAC5C2B,aAAa9B,SAASF,UACZkC,SAAWC,KAAKC,MAAMpC,EAAEkC,WACU,KAAnCA,SAASG,yBAAkCrC,EAAEe,WACR,KAAlCmB,SAASI,uBAAgCtC,EAAEe,YAC/CtD,EAAE,mCAAmC8E,MAAK,iBAEhCC,OAAS/E,EAAEgF,MAAMC,KAAK,SACtBC,KAAOlF,EAAEgF,MAAMC,KAAK,OACtB1C,EAAEK,WAAamC,QAAUxC,EAAEK,UAAYsC,MACvClF,EAAEgF,MAAMlD,KAAK,sBACR2B,qIACQlB,EAAEe,UAAY,YAAc,yBAAgBf,EAAE4C,gCAAuB5C,EAAEK,0HAE9DL,EAAEe,UAAY,oCAAsC,0EAC7DoB,KAAKC,MAAMpC,EAAE6C,MAAMC,wGACW9C,EAAE+C,sFAChB/C,EAAES,4DAK3B,GAAhBrB,MAAMM,OACNjC,EAAE,kBAAkBuF,OAEpBvF,EAAE,kBAAkBwF,OAExBpF,cAAc,kBAAmB,aAAgBuB,SAG/C8D,aAAe,SAEbC,SAAWxD,OAAOwD,aAClBC,aAAeC,KAAKC,MAFT,IAGXC,SAAW,CAACC,cAAe,GAAIC,OAAQ,IAAKC,MAAO,GAAIC,OAAQ,YAE7DC,cAAgB,CAACC,IAAKC,MACjBzC,KAAK0C,UAAYD,IAAMD,KAAOA,QAGrCG,SAAWC,aAAY,eACnBC,SAAWd,aAAeC,KAAKC,SAE/BY,UAAY,SACLC,cAAcH,cAGrBI,cAAsBF,SAhBf,IAgBS,UAEpBf,SAAS,IAAII,SAAUa,cAAAA,cAAeC,OAAQ,CAACrE,EAAG4D,cAAc,GAAK,IAAMU,EAAGjD,KAAK0C,SAAW,MAC9FZ,SAAS,IAAII,SAAUa,cAAAA,cAAeC,OAAQ,CAACrE,EAAG4D,cAAc,GAAK,IAAMU,EAAGjD,KAAK0C,SAAW,OACvF,IACR,aAGPpE,OAAOuD,aAAeA,aAEf,CAIHhE,sBAAuBA,sBAwBvBqF,KAAM,SACFC,IAAKC,KAAMC,YAAaC,OAAQC,YAAQvF,6DAAQ,EAAGwF,2CACnDC,4DAAsBC,yDAAmBC,gDAAUC,+CACnDC,0EAAoBC,iEAAS,KAAMC,mEAAW,GAAIC,gEAAQ,KAAMC,6EAAqB,KAAMC,yEAC3FC,uEAAqBC,oEAErBL,SAAW3H,EAAE,aAAaiC,OAAS,EAAIyC,KAAKC,MAAM3E,EAAE,aAAaiI,QAAUN,aAEvEO,eAAiBlI,EAAE,kBACnBmI,aAAenI,EAAE,gBACjBoI,kBAAoBpI,EAAE,qBACtBqI,UAAYrI,EAAE,aACdsI,UAAYtI,EAAE,aACduI,MAAQvI,EAAE,SACVwI,aAAexI,EAAE,iBACjByI,WAAazI,EAAE,eACf0I,YAAc1I,EAAE,eAChB2I,cAAgB3I,EAAE,kBAClBwB,SAAWxB,EAAE,YACb4I,kBAAoB5I,EAAE,sBACtB6I,cAAgB7I,EAAE,iBAClB8I,eAAiB9I,EAAE,kBACnB+I,MAAQ/I,EAAE,QACVgJ,aAAe5H,UAAUU,KAAK,aAC9BmH,UAAY7H,UAAUU,KAAK,aAE/B3B,UAAU,CACN+I,UAAWC,EAAEC,IAAIF,UACjBG,SAAUnC,OACVF,KAAAA,KACAC,YAAAA,cAGJqC,QAAQ,CAAC,gCACTA,QAAQ,CAAC,kCAGT1H,MAAQc,OAAOd,OACX2H,MAAM3H,SACNA,MAAQ,GAIZwF,IAAM1E,OAAO0E,KACTmC,MAAMnC,OACNA,IAAM,MAGVvG,eAAiB8G,aAEb6B,aAAc,EACdC,UAAY,KACZC,UAAY,KAE4B,QAAxCC,aAAaC,QAAQ,iBAAqE,GAAxC/I,eAAesD,wBACjE4E,MAAM/G,SAAS,iBACf0G,YAAY5G,KAAK,aAAa+H,YAAY,WAAW7H,SAAS,cAGrD,WAATwF,OACAuB,MAAM/G,SAAS,uBAQb8H,oBAAuBpG,aACrBA,QAAU,QACH,cAELqG,EAAInG,KAAKC,MAAMH,QAAU,MACzBsG,EAAIpG,KAAKC,MAAMH,QAAU,KAAO,IAChCuG,EAAIrG,KAAKC,MAAMH,QAAU,KAAO,WAC9BqG,EAAI,EAAIA,EAAI,IAAM,KAAOC,EAAI,GAAK,IAAM,IAAMA,EAAI,KAAOC,EAAI,GAAK,IAAM,IAAMA,GAQpFC,oBAAuBC,YAClB,IAAIC,SAASC,cAEZC,MADJH,WAAaA,WAAa,IAAM,IAAMA,YACd,IAAMzJ,UAC9ByH,aAAaF,KAAK6B,oBAAoBQ,OACtCpC,eAAeD,KACXjH,OAAOuJ,KAAOpB,EAAEqB,KAAKC,WAAW,OAAQ,wBAA0BX,oBAAoBpJ,UAAY4J,OACtGtB,aAAa0B,IAAI,QAASP,WAAa,KACvClB,UAAUyB,IAAI,OAAQP,WAAa,KACnC/B,kBAAkBsC,IAAI,QAASP,WAAa,KAC5CE,SAAQ,MAQVM,eAAiB,WAEbC,WAAa5K,EAAE6K,KAAK,CACtB9D,IAAKoC,EAAEC,IAAI0B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV/F,KAAM,CACFgG,OAAQ,YACRC,QAAS/B,EAAEC,IAAI8B,QACf/F,GAAI8B,YACJiC,UAAWC,EAAEC,IAAI+B,gBACjBvD,MAAOA,MACPZ,KAAMA,QAKRoE,aAAepL,EAAE6K,KAAK,CACxB9D,IAAKoC,EAAEC,IAAI0B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV/F,KAAM,CACFgG,OAAQ,eACRC,QAAS/B,EAAEC,IAAI8B,QACf/F,GAAI8B,YACJoE,IAAKlE,OACLS,MAAOA,MACPZ,KAAMA,KACNkC,UAAWC,EAAEC,IAAIF,UACjBoC,YAAaxD,cAAgB,EAAI,KAKnCyD,gBAAkBvL,EAAE6K,KAAK,CAC3B9D,IAAKoC,EAAEC,IAAI0B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV/F,KAAM,CACFgG,OAAQ,uBACRC,QAAS/B,EAAEC,IAAI8B,QACftD,MAAOA,MACPZ,KAAMA,KACNwE,SAAU,EACVtC,UAAWC,EAAEC,IAAIF,aAIzBlJ,EAAEyL,KAAKb,WAAYQ,aAAcG,iBAAiBG,MAAKhK,eAAeC,MAAOgK,SAAUC,IACnFnL,YAAciE,KAAKC,MAAMhD,MAAM,IAC3BX,OAAOuJ,OACP9J,YAAcA,YAAY6B,QAAOC,GAAKA,EAAEK,UAAY,KAExD+I,SAAWjH,KAAKC,MAAMgH,SAAS,IAC/BlC,UAAYkC,SACZjC,UAAYiC,SAASjC,UACrB9I,aAAe8D,KAAKC,MAAMiH,GAAG,IAC7B7K,aAAe4K,SAASxG,OACpB0G,kBAAoBnH,KAAKC,MAAMgH,SAASE,mBAAqB,YACjC,iBAArBA,oBACPA,kBAAoBC,OAAOC,OAAOF,oBAEtCpL,qBAyCuBA,YAAaG,aAAcgB,MAAOwF,YAClD3G,YAAY6B,QAAO0J,cACApL,aAAaqL,MAAKpF,GAAKA,EAAEqF,OAASF,WAAWxJ,SAK3C,gBAApBwJ,WAAWxJ,OACFwJ,WAAWpJ,UAAYwE,KAAO4E,WAAWrJ,MAAQf,OAGtDoK,WAAWpJ,WAAahB,OAASoK,WAAWpJ,WAAawE,KAAQ4E,WAAWpJ,UAAY,KApDtFuJ,CAAkB1L,YAAaG,aAAcgB,MAAOwF,KAClE3G,qBAkEwBA,YAAaG,aAAc+K,SAAU/J,MAAOwF,IAAKyE,yBACnEO,eAA4C,IAA3BT,SAASU,eAAuB,GAAK3H,KAAKC,MAAMgH,SAASU,gBAC1EC,eAAiB,IAAIC,IAAI3L,aAAaqC,KAAI2I,IAAM,CAACA,GAAGM,KAAMN,cACzDnL,YAAYwC,KAAI+I,aACnBA,WAAWpJ,UAAYF,OAAOsJ,WAAWpJ,WACzCoJ,WAAWhJ,GAAKN,OAAOsJ,WAAWhJ,UAC5BwJ,eAAiBX,kBAAkB/J,MAAKS,GAAKmC,KAAKC,MAAMpC,GAAG4C,IAAM6G,WAAW7G,QAC9EqH,eAAgB,KACZC,SAAW/H,KAAKC,MAAM6H,gBAC1BR,WAAWxI,OAASd,OAAO+J,SAASzJ,IAChCyJ,SAASC,UACTV,WAAWxI,OAASwI,WAAWhJ,GAAKyJ,SAASC,SAE7CV,WAAWxI,OAASwI,WAAWhJ,KAC/BgJ,WAAWxI,OAASwI,WAAWhJ,SAGnCgJ,WAAWxI,OAAS,MAcpBiB,SAZmB,eAAnBuH,WAAWxJ,OACXwJ,WAAWrJ,MAAQD,OAAOsJ,WAAWrJ,OACjCqJ,WAAWpJ,UAAYhB,OAASoK,WAAWrJ,MAAQf,QACnDoK,WAAWpJ,UAAYhB,OAEvBoK,WAAWrJ,MAAQyE,KAAO4E,WAAWpJ,UAAYwE,MACjD4E,WAAWrJ,MAAQyE,MAG3B4E,WAAW5G,KAAOV,KAAKiI,UAAUL,eAAeM,IAAIZ,WAAWxJ,OAC/DwJ,WAAW1I,UAAY8I,eAAeS,QAAQb,WAAW7G,KAAO,MAI5DV,SAAWC,KAAKC,MAAMqH,WAAWvH,UACnC,MAAOqI,GACLrI,SAAW,YAEfuH,WAAWe,WAAatI,UAAwC,MAA5BA,SAASuI,eAEtChB,cAzGGiB,CAAmBxM,YAAaG,aAAc+K,SAAU/J,MAAOwF,IAAKyE,mBAElFpL,YAAY+D,MAAK,CAACrB,EAAGC,IACbD,EAAEX,KAAOY,EAAEZ,MACH,EAERW,EAAEX,KAAOY,EAAEZ,KACJ,EAEJW,EAAEP,UAAYQ,EAAER,YAG3B9B,6BAwG4BL,mBACtB4B,aAAe5B,YAAY6B,QAAO0J,YAAiC,eAAnBA,WAAWxJ,WAC7D1B,oBAAsB,UAC1BL,YAAYgC,SAAQuJ,iBACZkB,WAAY,EAChB7K,aAAaI,SAAQ0K,cACbzK,OAAOsJ,WAAWpJ,WAAaF,OAAOyK,YAAYvK,YAC/CF,OAAOsJ,WAAWpJ,WAAaF,OAAOyK,YAAYxK,SACrDuK,WAAY,MAGhBA,YACApM,oBAAoBsM,KAAKpB,YACrBlE,gBACAkE,WAAW1I,WAAY,EACvB0I,WAAWqB,aAAc,OAI9BvM,oBA3HewM,CAAuB7M,aAC7CyB,OAAOqL,MAAQzM,oBACXA,oBAAoBmB,OAAS,IAAMnB,oBAAoBgB,MAAKS,GAAe,WAAVA,EAAEC,iBAmI9C1B,oBAAqBc,MAAOhB,cACrDE,oBAAoB0M,QAAQ,CACxBrI,GAAI,EACJxC,MAAOwG,EAAEqB,KAAKC,WAAW,eAAgB,wBACzCnF,eAAgB6D,EAAEqB,KAAKC,WAAW,eAAgB,wBAClD7H,UAAWhB,MACXY,KAAM,UACN4C,KAAMV,KAAKiI,UAAU/L,aAAakB,MAAKS,GAAe,WAAVA,EAAE2J,QAC9ClJ,GAAI,EACJM,WAAW,EACXiC,MAAM,IA5INkI,CAAoB3M,oBAAqBc,MAAOhB,mCAqKVA,aAAcE,oBACxDE,OAAQiG,YAAaC,OAAQC,OAAQE,qBAAsBC,kBAC3DC,SAAUC,MAAOC,YAAa/G,UAAWkB,MAAOwF,IAAKJ,KAAMY,MAAO7G,oBAC5D2M,mBAAqB9M,aAAakB,MAAKS,GAAe,WAAVA,EAAE2J,UAGzB,IAD3BtL,aAAeA,aAAa0B,QAAOC,GAAKzB,oBAAoBmC,KAAI4D,GAAKA,EAAErE,OAAMmL,SAASpL,EAAE2J,SACvEjK,mBACbjC,EAAE,qEAAqE4N,SAGvE5N,EAAE,qEAAqE6J,YAAY,UAElFjJ,aAAakB,MAAKS,GAAe,WAAVA,EAAE2J,QAC1BtL,aAAawM,KAAKM,0BAEhBtD,QAAQyD,IAAIjN,aAAaqC,KAAI6K,aACxB,IAAI1D,SAASC,UAChBf,QAAQ,CAACwE,YAAYC,YAAY,SAASC,MACtC3N,WAAWyN,YAAY5B,MAAQ,IAAI8B,KAAKhN,OAAQF,oBAAqBmG,YAAaC,OAAQC,OACtFE,qBAAsBC,kBAAmBC,SAAUC,MAAOC,YAAa/G,UAAWkB,MAClFwF,IAAK0G,YAAa9G,KAAMY,MAAO/G,eAAgBE,aAAc8G,mBAAoB,CACjFC,cAAAA,cACAC,YAAAA,YACAC,SAAAA,SACAjB,IAAAA,UAGA1G,WAAWyN,YAAY5B,MAAMpF,OAC/B,MAAOmH,QAGT5D,mBAjMN6D,CAA+BtN,aAAcE,oBAAqBE,OAAQiG,YAAaC,OAAQC,OACjGE,qBAAsBC,kBAAmBC,SAAUC,MAAOC,YAC1D/G,UAAWkB,MAAOwF,IAAKJ,KAAMY,MAAO7G,oBAElCU,sBAAsBX,oBAAqBc,EAAOwF,IAAMxF,OAC9D5B,EAAE,SAAS6J,YAAY,UACvB7J,EAAE,YAAY4N,SACd5N,EAAE,eAAe6J,YAAY,UACtB,IAAIO,SAASC,UAChBA,iBAqMN8D,eAAiBzM,eAAMsK,gBAAYoC,iEACjClN,gBAIJF,OAAOqN,YACHC,eAAiBtN,OAAOsN,cACvBA,aAKLrN,QAAU+K,WAAW7G,GACrBhE,WAAa,GAEbL,oBAAoB2B,SAAQF,IACpBG,OAAOH,EAAEK,YAAcF,OAAOsJ,WAAWpJ,YACzCzB,WAAWiM,KAAK1K,OAAOH,EAAE4C,QAGjChE,WAAWiM,KAAK1K,OAAOsJ,WAAW7G,KAClChE,WAAa,IAAI,IAAIoN,IAAIpN,aAGzBnB,EAAE,qBAAqBwO,MAAM,QAE7BxO,EAAE,YAAYyO,IAAI,2BAA2BA,IAAI,WAAWA,uBAAgBzC,WAAW7G,SAAOyI,SAC9FpF,aAAakG,QAAQ,KACrBjG,WAAWiG,QAAQ,KAEfjH,YAAa,OACPkH,eAAiB7N,oBAClBwB,QAAOC,GAAKG,OAAOH,EAAEK,WAAaF,OAAOsJ,WAAWpJ,YAC/B,GAAfL,EAAEe,WAAyC,GAAnBf,EAAEO,mBACjC6L,eAAe1M,OAAS,EAAG,OACrB2M,cAAgBD,eAAe,gBAC/B3N,OAAOqN,cACPrN,OAAO6N,KAAKD,cAAchM,WAChCuL,eAAeS,oBACf1O,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjFjI,KAAM,YAQe,QAA7BwJ,WAAWnL,gBAA4Bb,sCAA+BgM,WAAW7G,SAAOlD,OAAS,IAAMmM,OAClGrF,MAAMxI,SAAS,eAEhBP,EAAE,sBAAsB+O,QAAQ,SAEpC/O,sCAA+BgM,WAAW7G,SAAO4J,QAAQ,WAEzDpO,aAAeN,WAAW2L,WAAWxJ,MACrCwM,YAAW,KACPrO,aAAawN,eAAenC,YAExBhM,EAAE,mBAAmBiC,OAAS,GAC9BjC,EAAE,mBAAmB8E,MAAK,iBAChBK,GAAKnF,EAAEgF,MAAMC,KAAK,MACpBE,IAAM6G,WAAW7G,KACjBnF,EAAEgF,MAAM6E,YAAY,UACpBzJ,cAAc,mBAAoB,YAAe,IAAO+E,UAIpE/E,cAAc,iBAAkB,YAAe4L,eAChD,WA7DHmC,eAAenC,aA4EjBiD,YAAcvN,cACXgG,oBAICwH,UAAY,IAAIC,gBAAgBjN,OAAOkN,SAASC,QACtDH,UAAUI,OAAO,WACXC,OAASrN,OAAOkN,SAASI,SACzB,KAAOtN,OAAOkN,SAASK,KAAOvN,OAAOkN,SAASM,SAAW,IAAMR,UAAUS,WAC/EzN,OAAO0N,QAAQC,aAAa,KAAM,KAAMN,SAGtCO,WAAapO,MAAAA,WACfqO,SAAWrN,OAAOqN,cACdC,cAAe,SACd5I,KAAc,GAAPA,MACR4I,cAAe,KAEdpO,OAASA,OAASmO,UAAYnO,MAAQ,GAAKA,OAASmO,YACrDC,cAAe,GAEnBpO,MAAQA,MAAQmO,SAAW,EAAInO,MAC3BoO,oBACMhQ,EAAE6K,KAAK,CACT9D,IAAKoC,EAAEC,IAAI0B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV/F,KAAM,CACFgG,OAAQ,mBACRC,QAAS/B,EAAEC,IAAI8B,QACf/F,GAAI8B,YACJD,KAAMA,KACNqC,SAAUnC,OACVtF,MAAOA,MACPwF,IAAMA,KAAc,GAAPA,IAAsBA,IAAX2I,SACxB7G,UAAWC,EAAEC,IAAIF,aAI7B9B,KAAOA,KAAc,GAAPA,KAAYA,IAAM2I,SAAWA,SAAW3I,IAC/C,CAACxF,MAAAA,MAAOwF,IAAAA,UAGf6I,QAAS,EACTC,aAAe,QAEbC,SAAWzO,qBAAM0O,iEAAkBtD,yDAAI,KACrCuD,eAAiBrQ,EAAE,qBACnB8M,EAAG,OACGwD,SAAWxD,EAAEyD,OAAOC,UACtBF,UAAYA,SAASrO,OAAS,EAAG,CACjCoO,eAAexG,YAAY,UAC3BwG,eAAevO,KAAK,kBACf2O,yIAC2BtH,EAAEqB,KAAKC,WAAW,MAAO,qCACrDiG,KAAO,GACXJ,SAAS7N,SAAQ,CAACkO,QAASC,QACvBF,4GACUC,QAAQE,mDAA0CF,QAAQG,cAChEF,GAAKN,SAASrO,OAAS,EAAG,CAC1BoO,eAAevO,KAAK,kBACf2B,OAAOiN,YACNK,KAAOpH,aAAaC,0BAAmBzC,SACzC4J,MAAQA,KAAK9O,QACboO,eAAevO,2BAAoBiP,YAAUhC,QAAQ,kBAKjEsB,eAAerO,SAAS,aAI5BiO,cAGoC,GAApCpP,eAAemQ,mBAA0BhQ,OAAOiQ,QAAQC,WAExD1I,aAAaqB,YAAY,UACzB7J,EAAE,gBAAgB6J,YAAY,8BAElCoG,QAAS,EAET/N,OAAOiP,SAAWnQ,OAClBkP,aAAetM,KAAKyC,IAAI,GAAKrF,OAAOoQ,WAED,GAA/BpQ,OAAOiQ,QAAQI,aACfrR,EAAE,eAAegC,SAAS,UAE1BhC,EAAE,eAAe6J,YAAY,UAGH,GAA1B7I,OAAOiQ,QAAQK,QACftR,EAAE,kBAAkBgC,SAAS,UAE7BhC,EAAE,kBAAkB6J,YAAY,gBAG9BkG,SAAW/O,OAAON,UACnB0P,YACCxO,MAAAA,MAAOwF,IAAAA,WAAa0I,WAAWC,WAErCrP,UAAY0G,IAAMxF,MAEbZ,OAAOuJ,MACRlC,UAAUJ,KAAK6B,oBAAoBpJ,gBAInC6Q,MAAQ,GAAK,EACZ1Q,eAAe2Q,eAAiD,GAAhC3Q,eAAe2Q,gBAChDD,MAAQvQ,OAAOyQ,aAEnB9I,cAAc+B,IAAI,iBAAmB,EAAI6G,MAAS,IAAM,SACpDG,IAAM,WACN3I,MAAMxI,SAAS,cAC6B,GAAxCM,eAAesD,sBACfnE,EAAE,YAAY0K,IAAI,OACL,iBAAmB6G,MAAQ,MAGxCvR,EAAE,YAAY0K,IAAI,OACL,0BAA4B6G,MAAQ,OAIT,GAAxC1Q,eAAesD,wBACfuN,IAAM,QAEV1R,EAAE,YAAY0K,IAAI,OACL,kBAAoBgH,IAAM,cAAgBH,MAAQ,OAInE/P,SAASmQ,KAAK,aAAcJ,OAC5B/P,SAASmQ,KAAK,WAAYD,KAE1BlJ,aAAa1G,KAAK,UAAU8P,SAGvBxB,SAAU,KAIPyB,cAHAC,SAAWC,SAASC,cAAc,kBAElCC,kBAAoB,WAElBC,uBAAyB,WACrBC,WAAaL,SAASM,YAAc,KACtCD,aAAeF,oBACfvJ,YAAY5G,KAAK,WAAWuQ,YAAY,UAAWF,YACnDF,kBAAoBE,gBAGL,IAAIG,gBAAe,KACtCC,aAAaV,eACbA,cAAgB7C,WAAWkD,uBAAwB,QAExCM,QAAQV,UAEvBI,yBAGInJ,MAAMxI,SAAS,qBAGnBP,EAAE,uBAAuB,GAAGyS,eAAe,CAACC,SAAU,SAAUC,MAAO,MAAOC,OAAQ,cAuBxFC,QAAUnR,qBAAM0O,iEAAkB0C,iEAC/B5Q,OAAO6Q,eAAiB7Q,OAAO8Q,eAAiBhS,OAAOiS,qBACxDjS,OAAOkS,UACPhT,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,gBAAiB,wBAAyB,CAClEjI,KAAM,SACN2Q,UAAU,SAEdnE,YAAW,KACPhP,EAAE,YAAY0K,IAAI,aAAc,QAChC1K,EAAE,+BAA+BgC,SAAS,uBAC3C,SAIFoO,SAAU,CACXpP,OAAOqN,kBACgBrN,OAAOsN,kBAErBtN,OAAOuJ,YACFvJ,OAAO6N,KAAKjN,YAEtBiR,aAKH5C,cACKE,SAASC,UAGfpP,OAAOoS,OACPxK,kBAAkB5G,SAAS,YAM/BhC,EAAE,sBAAsB6J,YAAY,cACpC7J,EAAE,gBAAgB0K,IAAI,aAAc,eACW,GAA3C7J,eAAewS,0BACfrT,EAAE,gBAAgB6J,YAAY,cAG7BuG,SAGG0C,WACMrR,sBAAsBX,oBAAqBc,EAAOwF,IAAMxF,aAExDH,sBAAsB,GAAIG,EAAOwF,IAAMxF,aAL3C+I,iBASN3J,OAAOuJ,YAEPpC,aAAamL,OAAOzJ,YAAY,eAChC1B,aAAa0B,YAAY,eACzBxB,UAAUJ,KAAKkB,EAAEqB,KAAKC,WAAW,OAAQ,yBACzCvC,eAAeD,KAAKkB,EAAEqB,KAAKC,WAAW,OAAQ,yBAC9CnC,UAAUtG,SAAS,qBACnBoF,IAAM1E,OAAO6Q,sBAEbrJ,oBAAoB,KAGpB/B,aAAamL,OAAOtR,SAAS,eAC7BmG,aAAanG,SAAS,eAGrBoO,WACDnH,UAAUuK,UAAU,aACD,kBACP,WACE,mBACD9R,eAAe+R,MAAOC,UACJ1S,OAAOsN,YAE1BtN,OAAOqN,QAEXrO,EAAEgF,MAAMhD,SAAS,UACjBsG,UAAUtG,SAAS,qBACnBhC,EAAE,YAAYyO,IAAI,2BAA2BA,IAAI,WAAWb,SAC5DnF,WAAWiG,QAAQ,KACnBnG,MAAM9E,OAAO,2DACTkQ,UAAY3T,EAAE,mBACZ4T,KAAOF,GAAGG,SAASC,KACzBH,UAAUjJ,IAAI,OAASkJ,KAAQ,YACzBzJ,WAAayJ,KAAO5T,EAAEgF,MAAM+O,QAE5BC,cAAgBlK,oBADTK,WAAazJ,WAE1BiT,UAAU7R,KAAK,cAAcmG,KAAK+L,qBAE9BtS,eAAe+R,MAAOC,QACtB9Q,UAAc8Q,GAAGG,SAASC,KAAQ1S,UAAU2S,QAAWrT,UAAYkB,MACnEuI,WAAauJ,GAAGG,SAASC,KAAO1S,UAAU2S,cACxC7J,oBAAiC,IAAbC,YAC1B5B,MAAMzG,KAAK,aAAa4I,IAAI,OAAQgJ,GAAGG,SAASC,KAAO,MACvDvL,MAAMzG,KAAK,wBAAwBmG,KAAK6B,oBAAoBlH,UAAYhB,cAClEZ,OAAO6N,KAAKjM,iBAEdlB,iBAEJT,QAAU,KACVE,WAAa,GACb6N,YAAW,WACP1G,UAAUuB,YAAY,uBACvB,KACHmF,YAAW,WACPhP,EAAE,aAAa6J,YAAY,UAC3BtB,MAAMzG,KAAK,aAAa8L,WACzB,KACH5M,OAAOiT,UAIf7T,cAAc,aAAc,MAASwB,cAazCsS,gBACEC,SAAWzS,qBAAM0S,qEACd5K,cAGLxJ,EAAE,cAAc8B,KAAK,KAAK+H,YAAY,iBAAiB7H,SAAS,gBAChEhC,EAAE,cAAc2R,KAAK,sBAAuBxI,EAAEqB,KAAKC,WAAW,cAAe,0BACzEzJ,OAAOuJ,OAGX8J,qBAAqBC,kBAGjBpT,WAGAkT,WAAarL,MAAMxI,SAAS,eAAiBwI,MAAMxI,SAAS,WACzDwI,MAAMxI,SAAS,gBAAc,KAC5BgU,QAAUvT,OAAOwT,iBACjBC,aAAe7Q,KAAK8Q,MAAMH,MAEzB3Q,KAAK+Q,IAAIF,aAAeP,WAAa,GAAKO,cAAgB7Q,KAAK8Q,MAAMtN,MAASqN,aAAe7S,MAAQ,SAG1GsS,UAAYO,aACZG,MAAMzL,EAAEC,IAAI0B,QAAU,iCAAkC,CACpDC,OAAQ,OACR8J,QAAS,gBACW,qCAEpBC,KAAM,IAAI3F,gBAAgB,CACtBlE,OAAQ,sBACRC,QAAS/B,EAAEC,IAAI8B,QACfnK,aAAcA,aACd0T,aAAcA,aACdvL,UAAWC,EAAEC,IAAIF,YAClByG,WACHoF,WAAW,UAKnBC,YAAa,QAaXC,QAAUvT,cACP8H,sBAGDwL,YAAchU,OAAOuJ,qBAIHvJ,OAAOkU,mBAEzBlU,OAAOqN,aACP4G,UAIJd,WAEA/T,cAAc,aAAc,MAASgH,MACrCpH,EAAE,YAAY6J,YAAY,UAAUsL,OAAO,KAC3C1M,WAAWoB,YAAY,UAAUsL,OAAO,KACxC/U,cAAc,QAAS,MAASgH,MAChC8C,oBAAoB,KACpB8K,YAAa,EACb7T,WAAa,GAGRuI,WACD1J,EAAE6K,KAAK,CACH9D,IAAKoC,EAAEC,IAAI0B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV/F,KAAM,CACFgG,OAAQ,mBACRC,QAAS/B,EAAEC,IAAI8B,QACfnK,aAAcA,aACdmI,UAAWC,EAAEC,IAAIF,UACjBG,SAAUnC,OACVkO,iBAAkBnO,YAClBE,OAAQA,OACRkO,YAAaxN,oBAAqE,GAA/CnD,KAAKC,MAAMkD,oBAAoByN,aAAoB,EAAI,GAE9FC,QAAS,SAAStQ,UAEVA,KAAOP,KAAKC,MAAMM,MACpB,aAGEA,OACAyE,WAAY,EACZtJ,cAAc,oBAAqB,CAC/BoV,SAAU9Q,KAAKiI,UAAU,CACrB8I,gBAAiBxQ,KAAKwQ,yBAe5CC,OAAShU,MAAAA,QACN8H,sBAGDxI,OAAOuJ,YAIPgK,EADAA,EACI7R,OAAO6R,SAEDvT,OAAOwT,iBAEhBmB,YAEDzT,OAAO0T,WAAarB,GAEpBA,EAAI3S,OAAS2S,EAAInN,MACjBqB,WAAWzG,SAAS,UACpBwG,aAAaxG,SAAS,WAG1BkI,qBADoBqK,EAAI3S,OAAUlB,UAAa,KAE/CN,cAAc,aAAc,MAASmU,IAErCpT,WAAa,GACbL,oBAAoB2B,SAAQF,IACpBG,OAAOH,EAAEK,WAAa2R,GACtBpT,WAAWiM,KAAK1K,OAAOH,EAAE4C,QAI7BlE,SAAWH,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAMlE,UAAS2B,UAAY2R,IACtEtT,QAAU,WAId4U,YAAa,EACbvB,gBAAkB,KAClBqB,WAAY,QAcVG,UAAYpU,cAET8H,sBAIDxI,OAAOuJ,YAINoL,YACDvV,cAAc,kBACd8J,oBAAoBhI,OAAO0T,YAAc1T,OAAO0T,WAAahU,OAASlB,UAAY,IAAM,GACxFS,WAAa,GACbwU,WAAY,EACRzT,OAAO0T,YAAc1T,OAAO0T,WAAahU,OAASM,OAAO0T,WAAaxO,MAClEpG,OAAOiS,oBACDjS,OAAO6N,KAAK3M,OAAO0T,mBAEnB5U,OAAOqN,cACPrN,OAAO6N,KAAK3M,OAAO0T,YACzB5U,OAAOiT,SAGfjT,OAAO+U,SACP3V,cAAc,2BAGZ4V,iBAAmBtU,uBACfwT,gBAAkBlU,OAAOkU,YACzBe,cAAgBjV,OAAOiV,UACvB3H,eAAiBtN,OAAOsN,cAC1B2H,oBACAhB,aAGA3G,qBACA6F,eAGCe,sBACkB,WAAflU,OAAOwB,MAAoC,UAAfxB,OAAOwB,MAAmC,MAAfxB,OAAOwB,OAC9DxB,OAAOqN,QACPgG,qBAAqBC,uBAKzBC,QAAUvT,OAAOwT,oBACrBD,EAAI7R,OAAO6R,GAEPA,EAAInN,gBACJ6N,UAIJD,YAAa,EAEb5U,cAAc,aAAc,MAASmU,UAE/BjK,KAAO5H,OAAO6R,EAAE2B,QAAQ,QAE1BC,kBAAoB5B,EAAI3S,OAASlB,aACrCyV,iBAAmBA,iBAAmB,EAAI,EAAIA,iBAC9CjM,oBAAuC,IAAnBiM,kBAEhBjV,sBAIE0N,cAAgB9N,oBAAoBgB,MAAKS,KAAQgS,EAAIrE,cAAcgG,QAAQ,IAAM3T,EAAEK,YACjF2R,EAAIvT,OAAOoQ,WAAW8E,QAAQ,IAAM3T,EAAEK,WAAc0H,MAAQ/H,EAAEK,YAC1D,GAARL,EAAE4C,KAAYhE,WAAWwM,SAASjL,OAAOH,EAAE4C,UAE3CyJ,cAAe,IACfzN,WAAa,GACbL,oBAAoB2B,SAAQF,IACpBG,OAAOH,EAAEK,WAAa2R,GACtBpT,WAAWiM,KAAK1K,OAAOH,EAAE4C,QAIjC9D,gBAAgBS,KAAK,wBAA0B8M,cAAczJ,GAAK,YAAY4J,QAAQ,aACjF/M,SAAS,UACV1B,OACAe,gBAAgBS,KAAK,wBAA0B8M,cAAczJ,GAAK,+BAC7DiR,QAAQ,QAEjBpH,YAAW,WACP3N,gBAAgBS,KAAK,wBAA0B8M,cAAczJ,GAAK,YAC7D4J,QAAQ,YAAYlF,YAAY,UACjCvJ,OACAe,gBAAgBS,KAAK,wBAA0B8M,cAAczJ,GAAK,+BAC7DiR,QAAQ,UAElB,KAECnV,SAAW2N,cAAczJ,IAAMlE,kBAI/B6G,sBAIC8G,cAActL,WAAasL,cAAc7B,YAC1C7C,qBAAqB0E,cAAchM,UAAYhB,OAASlB,UAAY,KAChE4J,KAAOsE,cAAchM,UAAY5B,OAAOoQ,iBAClCpQ,OAAO6N,KAAKD,cAAchM,WAEpCuL,eAAeS,gBAEXA,cAActL,YACVgH,KAAOsE,cAAchM,UAAY5B,OAAOoQ,iBAClCpQ,OAAO6N,KAAKD,cAAchM,WAEpCzB,WAAWiM,KAAK1K,OAAOkM,cAAczJ,WAMjDnE,OAAOqV,kBAAmB,OACpBC,QAAU5U,gBACYV,OAAOkU,cAE3Bc,mBACA1B,gBAAkBiC,sBAAsBD,WAGhDhC,gBAAkBiC,sBAAsBD,aACrC,OACqBtV,OAAOkU,aAE3Bc,qBAKNQ,OAAS9U,UACN8H,cAGLT,MAAMc,YAAY,aAEd7I,OAAOoS,QAAUyC,aACjB7U,OAAOyV,aACPZ,YAAa,GAGb9M,MAAMxI,SAAS,iBAAmBiB,SAASjB,SAAS,eACpDP,EAAE,eAAe+O,QAAQ,SAG7B/O,EAAE,cAAc8B,KAAK,KAAK+H,YAAY,gBAAgB7H,SAAS,iBAC/DhC,EAAE,cAAc2R,KAAK,sBAAuBxI,EAAEqB,KAAKC,WAAW,eAAgB,yBAE1EzK,EAAE,mBAAmBiC,OAAS,GAC9BjC,EAAE,mBAAmB8E,MAAK,iBAChB4R,IAAM1W,EAAEgF,MAAMC,KAAK,MACrByR,MACA1W,EAAEgF,MAAM6E,YAAY,UACpBzJ,cAAc,mBAAoB,YAAe,IAAOsW,WAKpE1W,EAAE,qBAAqBwO,MAAM,QAC7BxO,EAAE,YAAYyO,IAAI,2BAA2BA,IAAI,WAAWb,SAEvDoH,WAKD7T,WAAa,IAJbsH,WAAWiG,QAAQ,KACnBlG,aAAakG,QAAQ,KACrB1O,EAAE,YAAYgC,SAAS,WAMY,GAAnCnB,eAAe8V,kBACX5N,MAAMxI,SAAS,eAAkBwI,MAAMxI,SAAS,cAAiBwI,MAAMxI,SAAS,WACpFyO,YAAW,WACFrG,cAAciO,GAAG,WAClBlO,YAAY1G,SAAS,aAE1B,OAKXsH,QAAQ,CAAC,+BAAiC9B,QAAQ,SAASqP,aACvD7V,OAAS,IAAI6V,YACb7V,OAAO8V,OAAS9W,EAAE,sBAAsB2R,KAAK,OAC7C3Q,OAAO2G,SAAWA,SAClB3G,OAAO2B,MAAQ3C,EAAE,gBAAgB+W,MACO,GAApClW,eAAemQ,mBAA0BhQ,OAAOiQ,QAAQC,WAExD1I,aAAaxG,SAAS,UACtBhC,EAAE,gBAAgBgC,SAAS,6BAC3B4G,kBAAkBiB,YAAY,eAElC7I,OAAOgW,KAAKjQ,IACRnF,MACAwF,IACA,cAC+D,GAA3CvG,eAAewS,sCAChB,WACJ,WAC4B,GAA3BxS,eAAeoW,2BAC8B,GAApCpW,eAAemQ,mBAA0BhQ,OAAOiQ,QAAQC,kBAKrFgG,OAASlX,EAAE,kBAAkBmX,SACjC3V,SAASiC,OAAOyT,QAEhBlX,EAAE+R,UAAUqF,GAAG,QAAS,wBAAwB,SAAStK,GACrDA,EAAEuK,iBACFvK,EAAEwK,2BACFpX,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjFjI,KAAM,oBAKR+U,kBAAoB7V,MAAAA,OAEjB6S,IACDA,QAAUvT,OAAOwT,mBAEhBD,SACM,KAEPzT,oBAAqB,OACf8N,cAAgB9N,oBAAoBgB,MAAKS,GAAKG,OAAOH,EAAEK,WAAaF,OAAO6R,EAAE2B,QAAQ,KACrE,GAAf3T,EAAEe,WAA6D,GAAvCoB,KAAKC,MAAMpC,EAAEkC,UAAU+S,cAAwC,GAAnBjV,EAAEO,mBACzE8L,2BACM5N,OAAOqN,cACPrN,OAAO6N,KAAKD,cAAchM,WAChCuL,eAAeS,eACf1O,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjFjI,KAAM,WAEV0H,qBAAqB0E,cAAchM,UAAYhB,OAASlB,UAAY,MAC7D,SAGR,GAGXV,EAAE+R,UAAUqF,GAAG,cAAc1V,eAAeoL,OACnCtD,aAAe1B,eAAiB9G,OAAOuJ,kBAGtCgK,EAAIzH,EAAE2K,cAAclH,OAAOjG,QAC7B7C,aAAe3G,oBAAqB,OAE9B6N,eAAiB7N,oBAAoBwB,QAAOC,GAAKG,OAAOH,EAAEK,WAAaF,OAAO6R,EAAE2B,QAAQ,KACxE,GAAf3T,EAAEe,WAAyC,GAAnBf,EAAEO,mBAC7B6L,eAAe1M,OAAS,EAAG,OACrB2M,cAAgBD,eAAe,SAC/B3N,OAAOqN,cACPrN,OAAO6N,KAAKD,cAAchM,WAChCuL,eAAeS,eACf1O,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjFjI,KAAM,WAEV0H,qBAAqB0E,cAAchM,UAAYhB,OAASlB,UAAY,MAG5E6W,kBAAkBhD,MAItBvU,EAAE+R,UAAUqF,GAAG,QAAS,qBAAqB,SAAStK,GAClDA,EAAEuK,iBACFvK,EAAEwK,2BACFtX,EAAEgF,MAAMoR,QAAQ,cACVjR,GAAKnF,EAAEgF,MAAMC,KAAK,MAClB+G,WAAalL,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAMA,KACzDnF,EAAEgF,MAAM0S,QAAQ,YAAY9J,SAC5BxN,cAAc,qBAAsB,YAAe4L,aACnDmC,eAAenC,YAAY,MAI/BhM,EAAE+R,UAAUqF,GAAG,QAAS,eAAe,SAAStK,MAC5CA,EAAEuK,kBACG7N,uBAKDmO,KAAO5F,SAAS6F,eAAe,WACnC5X,EAAE,eAAeqS,YAAY,UACxB7Q,SAASjB,SAAS,cAmBfwR,SAAS8F,eACT9F,SAAS8F,iBACF9F,SAAS+F,oBAChB/F,SAAS+F,sBACF/F,SAASgG,qBAChBhG,SAASgG,uBACFhG,SAASiG,kBAChBjG,SAASiG,mBAzBTL,KAAKM,kBACLN,KAAKM,oBACEN,KAAKO,qBACZP,KAAKO,uBACEP,KAAKQ,wBACZR,KAAKQ,0BACER,KAAKS,oBACZT,KAAKS,sBACET,KAAKU,sBACZV,KAAKU,yBAELnY,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,2BAA4B,wBAAyB,CAC7EjI,KAAM,WAGVxC,EAAE,eAAe4N,aAe7B5N,EAAE+R,UAAUqF,GAAG,oBAAoB1V,oBAC3BqQ,SAASuG,kBACT9W,SAASQ,SAAS,cAClBhC,EAAE,+BAA+BgC,SAAS,cAC1C2G,cAAc+B,IAAI,iBAAkB,KACpClJ,SAASM,oBAAatB,+BAA6B4V,QAAQ,CACvDmC,UAAW,WACXC,SAAU,WAEd9P,YAAY1G,SAAS,YAAY6H,YAAY,eAC1C,CACHrI,SAASqI,YAAY,cACrB7J,EAAE,+BAA+B6J,YAAY,kBACzC0H,MAAQ,GAAK,EACZ1Q,eAAe2Q,eAAiD,GAAhC3Q,eAAe2Q,gBAChDD,MAAQvQ,OAAOyQ,aAEnB9I,cAAc+B,IAAI,iBAAmB,EAAI6G,MAAS,IAAM,KACxD7I,YAAY1G,SAAS,WAAW6H,YAAY,YAEhDrI,SAASM,KAAK,iBAAiBuQ,YAAY,uCAG/CrS,EAAE+R,UAAUqF,GAAG,oBAAoB1V,oBAE3Bb,eAAe4X,aAA6C,GAA9B5X,eAAe4X,YAAkB,KAC1DjP,mBAG2B,UAA5BuI,SAAS2G,kBACT1X,OAAOqN,QACP8F,UAAS,QAMrBnU,EAAE+R,UAAUqF,GAAG,QAAS,uBAAuB,SAAStK,GACpDA,EAAEuK,iBACFtO,MAAMsJ,YAAY,iBAClB1I,aAAagP,QAAQ,eAAgB5P,MAAMxI,SAAS,kBACpDP,EAAEgF,MAAMlD,KAAK,KAAKuQ,YAAY,wBAIlCrS,EAAE+R,UAAUqF,GAAG,QAAS,sBAAsB1V,eAAeoL,GACzDA,EAAEuK,iBACFvK,EAAEwK,+BACEhN,WAAatJ,OAAOwT,uBAClBzN,IAAM7E,OAAOkN,SAASwJ,SACxBC,SAAW9R,KAAOA,IAAI8F,QAAQ,KAAO,EAAI,IAAM,KAAO,KAAOjJ,KAAK8Q,MAAMpK,MAE5EuO,SAAWA,SAASC,QAAQ,YAAa,UAEnCC,UAAUC,UAAUC,UAAUJ,gBAC9BK,OAAS/P,EAAEqB,KAAKC,WAAW,oBAAqB,wBACtDvK,MAAM4O,IAAIoK,OAAQ,CACd1W,KAAM,UACN2Q,UAAU,EACVgG,MAAO,SAKfnZ,EAAE+R,UAAUqF,GAAG,aAAc,oBAAoB,SAAStK,OACjDtD,mBAGLxJ,EAAEgF,MAAMvB,OAAO,2DACXkQ,UAAY3T,EAAE,mBACZoZ,aAAepZ,EAAEgF,MAAMqU,SACvBzF,KAAO9G,EAAEwM,MAAQF,aAAatF,KAEpCH,UAAUjJ,IAAI,OAASkJ,KAAQ,YACzBzJ,WAAayJ,KAAO5T,EAAEgF,MAAM+O,QAE5BC,cAAgBlK,oBADTK,WAAazJ,WAE1BiT,UAAU7R,KAAK,cAAcmG,KAAK+L,kBAGtChU,EAAE+R,UAAUqF,GAAG,YAAa,oBAAoB,SAAStK,OAChDtD,yBAGC4P,aAAepZ,EAAEgF,MAAMqU,SACvBzF,KAAO9G,EAAEwM,MAAQF,aAAatF,KAC9B3J,WAAayJ,KAAO5T,EAAEgF,MAAM+O,QAE5BC,cAAgBlK,oBADTK,WAAazJ,WAE1BV,EAAE,aAAa0K,IAAI,OAASkJ,KAAQ,MACpC5T,EAAE,wBAAwBiI,KAAK+L,kBAGnChU,EAAE+R,UAAUqF,GAAG,aAAc,oBAAoB,WAC7CpX,EAAE,aAAa4N,YAInB5N,EAAE+R,UAAUqF,GAAG,QAAS,yDAAyD1V,eAAeoL,GAC5FA,EAAEuK,iBACFvK,EAAEwK,iCACI1U,UAAY5C,EAAEgF,MAAMC,KAAK,sBAENsS,kBAAkB3U,qBAK3CtB,QAAQ6T,OAAO,KACXnV,EAAEgF,MAAMzE,SAAS,wBAEjBL,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,iCAAkC,wBAAyB,CACnFjI,KAAM,oBAIYxB,OAAOwT,kBACd5R,WAAa3B,oBAC5BK,QAAQoN,QAAQ,KAGpBzN,QAAU,WACaD,OAAOsN,YAE1BtN,OAAOqN,cAELnE,qBAAqBtH,UAAYhB,OAASlB,UAAY,WACtDM,OAAO6N,KAAKnM,OAAOE,kBACnBuC,GAAKnF,EAAEgF,MAAMC,KAAK,MAClB2J,cAAgB9N,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAMA,KAC5DgJ,eAAeS,eACftN,QAAQoN,QAAQ,WAEV6K,eAAiBzY,oBAAoBwB,QAAOC,GAAKA,EAAEK,UAAYA,YAAWK,KAAIV,GAAKG,OAAOH,EAAE4C,MAClGhE,WAAaoY,eACbpY,WAAWiM,KAAKjI,IAEhBhE,WAAa,IAAI,IAAIoN,IAAIpN,gBAI7BnB,EAAE+R,UAAUqF,GAAG,QAAS,SAAS1V,eAAeoL,OACvCtD,sBAGLsD,EAAEuK,iBACFvK,EAAEwK,2BACElW,UAAUb,SAAS,wBAEnBL,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,kBAAmB,wBAAyB,CACpEjI,KAAM,WAIdgG,aAAakG,QAAQ,KACrBjG,WAAWiG,QAAQ,WACb0K,aAAepZ,EAAEgF,MAAMqU,SAEvBlP,YADO2C,EAAEwM,MAAQF,aAAatF,MACV9T,EAAEgF,MAAM+O,cAC5B7J,oBAAiC,IAAbC,YAC1B7I,QAAQ6T,OAAO,WACTnU,OAAO6N,KAAM1E,WAAazJ,UAAakB,aACrBZ,OAAOkU,cACbF,kBACRhU,OAAOiT,OAEjB9S,WAAa,GACb6N,YAAW,KAEPhP,EAAE,aAAa4N,SACftM,QAAQoN,QAAQ,OACjB,QAIP1O,EAAE+R,UAAUqF,GAAG,QAAS,uBAAuB1V,eAAeoL,MAC1DA,EAAEuK,iBACErX,EAAEgF,MAAMzE,SAAS,UACjB6O,SAASoK,cAGbhR,aAAa1G,KAAK,OAAOE,SAAS,cAClCwG,aAAakG,QAAQ,KACrB1O,EAAEgF,MAAMhD,SAAS,UACjBZ,UAAUyI,YAAY,cAElB7I,OAAOiT,OACT,MAAOhG,aAMbjO,EAAE+R,UAAUqF,GAAG,QAAS,wBAAwB1V,eAAeoL,GAC3DA,EAAEuK,iBACFjX,cAAc,oBACdJ,EAAE,YAAY4N,SAEV7E,MAAMxI,SAAS,gBACfP,EAAE,sBAAsB+O,QAAQ,SAChC/O,EAAE,2CAA2C4N,SAC7C7E,MAAMc,YAAY,cAClB7J,EAAE,eAAegC,SAAS,SAG9Bb,WAAa,GACbF,QAAU,KACVK,QAAQ6T,OAAO,WACTnU,OAAO6N,KAAKjN,OAClBsI,oBAAoB,GACpBzB,WAAWiG,QAAQ,KACnB1O,EAAEgF,MAAMhD,SAAS,UACjBZ,UAAUyI,YAAY,UACtB7I,OAAOiT,OACP3S,QAAQoN,QAAQ,QAIpB1O,EAAE+R,UAAUqF,GAAG,QAAS,+BAA+B1V,eAAeoL,OAC7DtD,sBAGLsD,EAAEuK,iBACErW,OAAOuJ,OACPoL,WAAY,IAEXA,sBACD3U,OAAOiT,aAIWjT,OAAOkU,kBAEnBlU,OAAOqN,QAEbrN,OAAOiT,UAKfjU,EAAE+R,UAAUqF,GAAG,QAAS,cAAc1V,eAAeoL,OAC5CtD,mBAGLsD,EAAEuK,iBACFrX,EAAEgF,MAAMoR,QAAQ,iBAEMpV,OAAOkU,kBAEnBlU,OAAOqN,YACV,OACWrN,OAAOwT,kBACZpN,IACLqB,WAAW3G,KAAK,YAAYiN,QAAQ,SAEpC/N,OAAOiT,WAKnBjU,EAAE+R,UAAUqF,GAAG,QAAS,WAAW1V,eAAeoL,GAC9CA,EAAEuK,uBACIlS,GAAKnF,EAAEgF,MAAMC,KAAK,MACxBjF,kCAA2BmF,SAAO4J,QAAQ,SACtC/O,EAAEgF,MAAM0S,QAAQ,2BAA2BzV,OAAS,GACpDjC,EAAE,uBAAuB+O,QAAQ,YAIzC/O,EAAE+R,UAAUqF,GAAG,QAAS,+BAA+B,SAAStK,GAC5DA,EAAEuK,iBACFtO,MAAM/G,SAAS,cACfhC,EAAE,uBAAuB6J,YAAY,cAE/B4P,QAAUzZ,2CAA2CiF,KAAK,MAC5DwU,SAEArZ,cAAc,iBAAkB,YAAeU,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAMsU,eAKtD,GAAnC5Y,eAAe8V,kBACX5N,MAAMxI,SAAS,eAAkBwI,MAAMxI,SAAS,cAAiBwI,MAAMxI,SAAS,YACpFoI,cAAcyO,GAAG,cAAc,WAC3BpI,YAAW,WAEHrG,cAAciO,GAAG,WAIrBlO,YAAY1G,SAAS,aACtB,QAGP2G,cAAcyO,GAAG,cAAc,WAC3BpI,YAAW,WACFrG,cAAciO,GAAG,WAGtBlO,YAAYmB,YAAY,aACzB,SAKX7J,EAAE+R,UAAUqF,GAAG,QAAS,SAAS,SAAStK,GACtCA,EAAEuK,iBACFrX,EAAEgF,MAAMoR,QAAQ,QAChBpW,EAAEgF,MAAMqN,YAAY,UAChBrS,EAAEgF,MAAMzE,SAAS,WACjBS,OAAO0Y,OACP1Z,EAAEgF,MAAM2M,KAAK,sBAAuBxI,EAAEqB,KAAKC,WAAW,gBAAiB,2BAEvEzJ,OAAO+U,SACP/V,EAAEgF,MAAM2M,KAAK,sBAAuBxI,EAAEqB,KAAKC,WAAW,cAAe,0BAEzEzK,EAAEgF,MAAMlD,KAAK,KAAKuQ,YAAY,+BAC9BrS,EAAEgF,MAAMoR,QAAQ,WAIpBpW,EAAE+R,UAAUqF,GAAG,QAAS,eAAe,SAAStK,GAC5CA,EAAEuK,uBACIsC,KAAO3Z,EAAEgF,MAAMC,KAAK,QAC1BjE,OAAO4Y,QAAQD,MACf3Z,EAAE,eAAe8B,KAAK,KAAK+H,YAAY,YACvC7J,EAAEgF,MAAMlD,KAAK,KAAKE,SAAS,eAI/BhC,EAAE,kBAAkBoX,GAAG,qBAAqB1V,qBACpC4P,cAAgBtQ,OAAO6Y,eAC3B7Z,EAAE,kBAAkB6B,YAChBiY,eAAiBxI,QAAQwI,eACN,OAAnBA,iBACAA,eAAiB9Z,EAAEgF,MAAMC,KAAK,gBAE9B8U,UAAYzI,QAAQyI,UACpBC,eAAiB1I,QAAQ0I,eAC7BD,UAAUtX,SAAQ,CAACwX,EAAGrJ,KAClB5Q,EAAE,kBAAkByD,sFAA+EwW,+DACtEA,GAAKH,eAAiB,WAAa,0BAAiBE,eAAepJ,eAEpG5Q,EAAEgF,MAAMlD,oBAAatB,8BAA4B0Z,SAAS,aAG9Dla,EAAE+R,UAAUqF,GAAG,QAAS,kBAAkB,SAAStK,GAC/CA,EAAEuK,uBACI/F,QAAUtR,EAAEgF,MAAMC,KAAK,WAC7BjE,OAAOmZ,WAAW7I,SAClBtR,EAAE,kBAAkB8B,KAAK,KAAK+H,YAAY,YAC1C7J,EAAEgF,MAAMlD,KAAK,KAAKE,SAAS,eAG/BhC,EAAE+R,UAAUqF,GAAG,QAAS,iCAAiC,SAAStK,GAC9DA,EAAEuK,uBACItG,KAAO/Q,EAAEgF,MAAMC,KAAK,QAC1BjE,OAAOoZ,WAAWrJ,MAClB/Q,EAAE,iCAAiC8B,KAAK,KAAK+H,YAAY,YACzD7J,EAAEgF,MAAMlD,KAAK,KAAKE,SAAS,YACf,IAAR+O,KACA/Q,EAAE,yBAAyB6J,YAAY,oBAAoB7H,SAAS,eAEpEhC,EAAE,yBAAyB6J,YAAY,eAAe7H,SAAS,oBAGnE2H,aAAagP,0BAAmBxR,QAAU4J,SAGT,GAAjClQ,eAAekB,iBACf8G,cAAcuO,GAAG,SAAS1V,qBAClB6S,QAAUvT,OAAOwT,iBAAmB,EACpCD,EAAI3S,QACJ2S,EAAI3S,aAEFZ,OAAO6N,KAAK0F,MAItBzL,eAAesO,GAAG,SAAS1V,qBACnB6S,QAAUvT,OAAOwT,iBAAmB,EACpCD,EAAInN,MACJmN,EAAInN,WAEFpG,OAAO6N,KAAK0F,OAI1BvU,EAAE+R,UAAUsI,IAAI,kBAAkB,WAC9BxH,aAGJ7S,EAAE+R,UAAUqF,GAAG,sBAAsB,WACjC5N,aAAc,WAGZ8Q,gBAAkB,WACpBta,EAAE+R,UAAUqF,GAAG,mBAAmB,WAE9BpX,EAAE,YAAY4N,SACdxN,cAAc,eACd+T,cAGJnU,EAAE+R,UAAUqF,GAAG,oBAAoB,WAC/BtB,eAGJ9V,EAAE+R,UAAUqF,GAAG,iBAAiB,WAC5BZ,SACAlV,QAAQoN,QAAQ,QAGpB1O,EAAE+R,UAAUqF,GAAG,kBAAkB,WAC7BnC,aAGJjV,EAAE+R,UAAUqF,GAAG,iBAAiB,SAAStK,GACjC9L,OAAOuJ,MAGXmL,OAAO5I,EAAEyD,OAAOjG,SAGpBtK,EAAE+R,UAAUqF,GAAG,mBAAmB,SAAStK,SACjCsD,SAAWtD,EAAEyD,OAAOH,WAAY,EACtCD,SAASC,SAAUtD,MAGvB9M,EAAE+R,UAAUqF,GAAG,kBAAkB,WAC7BxO,kBAAkBiB,YAAY,cAC9BrB,aAAaxG,SAAS,UACtBhC,EAAE,gBAAgBgC,SAAS,6BAC3BhC,EAAE,YAAY4N,SACV5N,EAAE,WAAW4W,GAAG,UAChB5W,EAAE,WAAWyQ,0LAEDtH,EAAEC,IAAI0B,+GAGlB5K,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,6BAA8B,wBAAyB,CAC/EjI,KAAM,cAKlBxC,EAAE+R,UAAUqF,GAAG,uBAAuB,SAAStK,GAC3C9M,EAAE,eAAe8B,KAAK,KAAK+H,YAAY,YACvC7J,mCAA4B8M,EAAE2K,cAAclH,OAAOoJ,YAAU7X,KAAK,KAAKE,SAAS,eAGpFhC,EAAE+R,UAAUqF,GAAG,0BAA0B,SAAStK,GAC9C9M,EAAE,kBAAkB2R,KAAK,eAAgB7E,EAAE2K,cAAclH,OAAOe,SAChEtR,EAAE,kBAAkB8B,KAAK,KAAK+H,YAAY,YAC1C7J,yCAAkC8M,EAAE2K,cAAclH,OAAOe,eAAaxP,KAAK,KAAKE,SAAS,gBAIjGsY,kBAEAta,EAAE+R,UAAUqF,GAAG,2BAA2B,eAElC5V,SAASM,oBAAatB,+BAA6B4V,QAAQ,CACvDmC,UAAW,WACXC,SAAU,WAEhB,MAAOvK,WAGmD,GAAxDpN,eAAe0Z,uCACflZ,gBAAgBS,KAAK,sBAAsBE,SAAS,YAEV,GAA1CnB,eAAe2Z,yBACfnZ,gBAAgBS,KAAK,MAAME,SAAS,YAEH,GAAjCnB,eAAekB,iBACfV,gBAAgBS,KAAK,MAAME,SAAS,YACpCZ,UAAUY,SAAS,aAEnBX,gBAAgBS,KAAK,MAAMG,OAAS,GACpCqG,UAAUuB,YAAY,YAGrBL,cACDA,aAAc,IAIb1B,gBAAkB6N,UAAW,KAC1BsB,SAAsC,GAA3BpW,eAAeoW,SAC1B3M,KAAO1I,MACP5B,EAAE,kBAAkBO,SAAS,cAC7B0W,UAAW,IAEVxN,UAAUgR,WAAa7Y,OAAS6H,UAAUgR,WAAarT,IAAM,GAAMM,UACpEuP,UAAW,EACX3M,KAAO5C,OAAShF,OAAOgF,QAAU+B,UAAUgR,WAC3CnQ,KAAOA,MAAQlD,KAAOkD,KAAO1I,MAAQA,MAAQ0I,MAEjDpI,OAAO0T,WAAatL,KACpBJ,qBAAsBI,KAAO1I,OAASlB,UAAa,KAC/CM,OAAOuJ,MACPL,oBAAoB,WAIlBwQ,WADY,IAAIvL,gBAAgBjN,OAAOkN,SAASC,QACzBzC,IAAI,MAC7BqK,UAAYjW,OAAOiS,eAA+B,KAAdyH,YACpC1L,YAAWtN,cAGHV,OAAO+U,SACT,MAAO9H,QAGJvG,QACD1H,EAAE,SAAS+O,QAAQ,WAExB,KAEPE,kBAIRjP,iBAAUQ,+BAA6B4W,GAAG,SAAS,WACjCpX,EAAEgF,MACVoR,QAAQ,WAGlBlU,OAAOyY,iBAAiB,gBAAgB,WACpC3Z,OAAOqN,QACP8F,UAAS,GAETnU,EAAE+R,UAAU6I,MACZvG,qBAAqBC,oBAGzBtU,EAAE+R,UAAUqF,GAAG,kBAAkB,SAAStK,SAChCd,WAAac,EAAE2K,cAAclH,OAAOvE,eAEtC6O,YAAc3Y,OAAOqL,MACrBuN,WAAaD,YAAY/Y,MAAKS,GAAKA,EAAE4C,IAAM6G,WAAW7G,KAEtD2V,aACAA,WAAWC,UAAYD,WAAWC,UAAYD,WAAWC,WAAY,IAAInV,MAAOoV,UAChFF,WAAWG,cAAe,IAAIrV,MAAOoV,UACrCF,WAAWI,cAAgBJ,WAAWI,cAAgBJ,WAAWI,cAAgB,KACjFJ,WAAW/K,SAAW+K,WAAW/K,SAAW,EAAI+K,WAAW/K,SAAW,GAG1E8K,YAAcA,YAAYvY,QAAOC,GAAKA,EAAE4C,IAAM6G,WAAW7G,KACzD0V,YAAYzN,KAAK0N,YACjB5Y,OAAOqL,MAAQsN,eAGnB7a,EAAE+R,UAAUqF,GAAG,uCAAuC,SAAStK,SACrDd,WAAac,EAAE2K,cAAclH,OAAOvE,eAEtC6O,YAAc3Y,OAAOqL,MACrBuN,WAAaD,YAAY/Y,MAAKS,GAAKA,EAAE4C,IAAM6G,WAAW7G,KAEtD2V,aACAA,WAAW/K,SAAW+K,WAAW/K,WAAY,IAAInK,MAAOoV,UAAYF,WAAWG,eAGnFJ,YAAcA,YAAYvY,QAAOC,GAAKA,EAAE4C,IAAM6G,WAAW7G,KACzD0V,YAAYzN,KAAK0N,YACjB5Y,OAAOqL,MAAQsN,eAGnB7a,EAAE+R,UAAUqF,GAAG,qBAAqB,SAAStK,MACnBpI,KAAKC,MAAMmI,EAAE2K,cAAclH,OAAOiF,UAAUC,mBAE1D/Q,KAAKC,MAAMmI,EAAE2K,cAAclH,OAAOiF,UAAUC,gBAAkB,EAAG,IAC7D1N,mBAGJA,aAAc,EACdtC,eACAvF,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,yCAA0C,wBAAyB,CAC3FjI,KAAM,YAEVxC,EAAE,uBAAuByQ,0EAEzB1I,aAAc,EACd/H,EAAE,uBAAuByQ,oEAG3BzE,WAAac,EAAE2K,cAAclH,OAAO4K,WACrCnP,sBAGD6O,YAAc3Y,OAAOqL,MACrBuN,WAAaD,YAAY/Y,MAAKS,GAAKA,EAAE4C,IAAM6G,WAAW7G,KACtD2V,aACqC,aAAjChO,EAAE2K,cAAclH,OAAOtF,OACvB6P,WAAWI,eAAgB,IAAItV,MAAOoV,UAEtCF,WAAWI,cAAgB,MAInCL,YAAcA,YAAYvY,QAAOC,GAAKA,EAAE4C,IAAM6G,WAAW7G,KACzD0V,YAAYzN,KAAK0N,YACjB5Y,OAAOqL,MAAQsN,YAGf7a,EAAE,oBAAsBgM,WAAW7G,GAAK,KAAKnD,SAAS,cAClDoZ,KAAOta,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAM6G,WAAW7G,KACxDV,SAAW2W,KAAK3W,SACpBA,SAAWA,SAAWC,KAAKC,MAAMF,UAAY,GACd,GAA3BA,SAAS4W,gBAAuBD,KAAK9X,UACrCtD,EAAE,kDACG6J,YAAY,uBACiB,GAA3BpF,SAAS4W,gBAAwBD,KAAK9X,YAC7CoF,YAAY1G,SAAS,uBACyB,UAA1ChC,EAAE,mBAAmBiF,KAAK,cAAsE,QAA1CjF,EAAE,mBAAmBiF,KAAK,cAChFjF,EAAE,kBAAkBgC,SAAS,uBAEa,QAA1ChC,EAAE,mBAAmBiF,KAAK,cAC1BjF,EAAE,qBAAqBgC,SAAS,wBAGpCoZ,KAAK9X,UACLtD,EAAE,6BAA+BgM,WAAW7G,GAAK,KAAKnD,SAAS,aAE/DhC,EAAE,6BAA+BgM,WAAW7G,GAAK,KAAK0E,YAAY,gBAI1E7J,EAAE+R,UAAUqF,GAAG,sBAAsB,SAAStK,GAC1CA,EAAEuK,kBAC+C,IAA7CvK,EAAE2K,cAAclH,OAAO+K,mBACvBtb,EAAE,gBAAgB4N,SAGtB1N,MAAM4O,IAAI3F,EAAEqB,KAAKC,WAAW,kBAAmB,wBAAyB,CACpEjI,KAAM,UACN2Q,UAAU,EACVgG,MAAO,eAIToC,aAAe7Z,MAAAA,YACjBV,OAASwa,UACT5Z,MAAQ4Z,UAAU5Z,MAClBwF,IAAMoU,UAAUpU,IAChBI,MAAQgU,UAAUhZ,KAClByN,QAAS,MAELwL,MAAQ3P,OAAO4P,KAAKrb,yBACX+J,QAAQyD,IAAI4N,MAAMxY,KAAIvB,MAAAA,MACxBrB,WAAWmC,MAAMmZ,UAAUH,UAAW5Z,MAAOwF,IAAKI,WAIjExH,EAAE+R,UAAUqF,GAAG,mBAAmB1V,eAAeoL,GAC7CtD,aAAc,EACdrI,WAAa,GACbF,QAAU,KACV+T,YAAa,MACTzE,OAASzD,EAAE2K,cAAclH,OAEzBrP,SADmB,UAAnBqP,OAAOmC,WACKnC,OAAOuC,KAKnBvC,OAAOvP,SACPuP,OAAOvP,OAAOE,SAAWA,eACnBqa,aAAahL,OAAOvP,OAAQuP,OAAOmC,WAG7CG,SAAQ,EAAMtC,OAAOuC,MACrB5I,oBAAoBqG,OAAOqL,aAAexU,IAAMxF,OAAS,QAG7D5B,EAAE+R,UAAUqF,GAAG,QAAS,yCAAyC,SAAStK,GACtEA,EAAEuK,iBACFrX,EAAEgF,MAAMhD,SAAS,UAEjB5B,cAAc,iBAAkB,YAAeU,oBAAoBgB,MAAKS,GAAKA,EAAE4C,IAAMnF,EAAEgF,MAAMC,KAAK,aAItG8M,SAAS4I,iBAAiB,WAAWjZ,eAAeoL,MAG9B,SADAiF,SAAS8J,cAAcC,QAAQC,gBAK7ChT,MAAMxI,SAAS,gBAIfuM,EAAEkP,SAAWlP,EAAEmP,SAAWnP,EAAEoP,eAIxBpP,EAAE+D,UACD,QACD/D,EAAEuK,uBACQrW,OAAOsN,WACbtN,OAAOiT,OAEPjT,OAAOqN,kBAGV,OACDvB,EAAEuK,iBACFrX,EAAE,uBAAuB+O,QAAQ,mBAEhC,UACDjC,EAAEuK,iBACErX,EAAE,SAASiC,OAAS,EACpBjC,EAAE,SAAS+O,QAAQ,aAChB,OACmB/N,OAAOmb,UAEzBnb,OAAO+U,SAEP/U,OAAO0Y,iBAId,OACD5M,EAAEuK,iBACFrX,EAAE,eAAe+O,QAAQ,mBAExB,OACDjC,EAAEuK,iBACF5O,WAAW3G,KAAK,YAAYiN,QAAQ,mBAEnC,OACDjC,EAAEuK,iBACF3O,YAAY5G,KAAK,UAAUiN,QAAQ,mBAElC,OACDjC,EAAEuK,iBACE3O,YAAY5G,KAAK,WAAWG,OAAS,EACrCyG,YAAY5G,KAAK,WAAWiN,QAAQ,UAEpChG,MAAMsJ,YAAY,iBAClB1I,aAAagP,QAAQ,eAAgB5P,MAAMxI,SAAS,6BAGvD,YACDuM,EAAEuK,iBACFxO,cAAckG,QAAQ,mBAErB,aACDjC,EAAEuK,iBACFvO,eAAeiG,QAAQ"}