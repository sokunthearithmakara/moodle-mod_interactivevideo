{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/quickform', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast, quickform) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    const isBS5 = $('body').hasClass('bs-5');\n    const bsAffix = isBS5 ? '-bs' : '';\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun, // Last run annotation.\n        subvideo; // For multiple videos.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    let $meta = $('.metadata');\n    let $annochapter = $('.annolistinchapter');\n    let $wrapper = $('#wrapper');\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        $meta.empty();\n        $interactionNav.find('ul').empty();\n        $videoNav.find('ul').empty();\n        $annochapter.empty();\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (annos.length > 0) {\n            releventAnnotations = annos;\n            window.IVANNO = annos;\n        }\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = annos.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed == true);\n\n        const xpEarned = completableAnno.map(x => Number(x.earned)).reduce((a, b) => a + b, 0) || 0;\n\n        if (actualAnnotationCounts > 0) {\n            $meta.append(`<span class=\"d-inline-block iv-mr-3\">\n            <i class=\"bi bi-stopwatch iv-mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block iv-mr-3\">\n        <i class=\"bi bi-bullseye iv-mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star iv-mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $wrapper.addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        // Handle the chapter list.\n        const chapteritems = annos.filter(x => x.type != 'skipsegment'\n            && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            const advanced = JSON.parse(x.advanced);\n            if ((advanced.visiblebeforecompleted == \"1\" && !x.completed)\n                || (advanced.visibleaftercompleted == \"1\" && x.completed)) {\n                $('[data-region=\"chapterlists\"] li').each(function() {\n                    const cstart = $(this).data('start');\n                    const cend = $(this).data('end');\n                    if (x.timestamp >= cstart && x.timestamp < cend) {\n                        $(this).find('.annolistinchapter')\n                            .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} iv-mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} iv-mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star iv-ml-1\"></i></span></li>`);\n                    }\n                });\n            }\n        });\n        if (annos.length == 0) {\n            $('#chaptertoggle').hide();\n        } else {\n            $('#chaptertoggle').show();\n        }\n        dispatchEvent('chapterrendered', {'annotations': annos});\n    };\n\n    const fireConfetti = () => {\n        var duration = 5 * 1000;\n        let confetti = window.confetti;\n        var animationEnd = Date.now() + duration;\n        var defaults = {startVelocity: 30, spread: 360, ticks: 60, zIndex: 1055};\n\n        const randomInRange = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n\n        var interval = setInterval(function() {\n            var timeLeft = animationEnd - Date.now();\n\n            if (timeLeft <= 0) {\n                return clearInterval(interval);\n            }\n\n            var particleCount = 50 * (timeLeft / duration);\n            // Since particles fall down, start a bit higher than random\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.1, 0.3), y: Math.random() - 0.2}});\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.7, 0.9), y: Math.random() - 0.2}});\n            return true;\n        }, 250);\n    };\n\n    window.fireConfetti = fireConfetti;\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @param {boolean} isPreviewMode - The preview mode flag.\n         * @param {boolean} isCompleted - The completed flag.\n         * @param {boolean} iseditor - The editor flag.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null, isPreviewMode = false,\n            isCompleted = false, iseditor = false) {\n\n            let $remainingtime = $('#remainingtime');\n            let $currenttime = $('#currenttime');\n            let $lightprogressbar = $('#lightprogressbar');\n            let $duration = $('#duration');\n            let $taskinfo = $('#taskinfo');\n            let $seek = $('#seek');\n            let $startscreen = $('#start-screen');\n            let $endscreen = $('#end-screen');\n            let $controller = $('#controller');\n            let $videowrapper = $('#video-wrapper');\n            let $wrapper = $('#wrapper');\n            let $annotationcanvas = $('#annotation-canvas');\n\n            quickform({\n                contextid: M.cfg.contextid,\n                courseid: course,\n                cmid,\n                interaction,\n            });\n\n            require(['theme_boost/bootstrap/modal']);\n            require(['theme_boost/bootstrap/tooltip']);\n\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n            let timeended = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $controller.find('#expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $('body').addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    let time = percentage / 100 * totaltime;\n                    $currenttime.text(convertSecondsToHMS(time));\n                    $remainingtime.text(\n                        player.live ? M.util.get_string('live', 'mod_interactivevideo') : convertSecondsToHMS(totaltime - time));\n                    $videoNav.find('#progress').css('width', percentage + '%');\n                    $videoNav.find('#seekhead').css('left', percentage + '%');\n                    $lightprogressbar.css('width', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: isPreviewMode ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        fromview: 1,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    if (player.live) { // Live video does not have end time.\n                        annotations = annotations.filter(x => x.timestamp < 0);\n                    }\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    timeended = progress.timeended;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    // Sort by type first, then by timestamp\n                    annotations.sort((a, b) => {\n                        if (a.type < b.type) {\n                            return -1;\n                        }\n                        if (a.type > b.type) {\n                            return 1;\n                        }\n                        return a.timestamp - b.timestamp;\n                    });\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n                    window.ANNOS = releventAnnotations;\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, end - start);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").removeClass('d-none');\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            let thisitem = JSON.parse(completionitem);\n                            annotation.earned = Number(thisitem.xp); // Earned from previous attempt.\n                            if (thisitem.percent) { // IV1.4.1 introduce percent to handle when teacher updates XP afterward.\n                                annotation.earned = annotation.xp * thisitem.percent;\n                            }\n                            if (annotation.earned > annotation.xp) { // What if the teacher decreases the XP afterward?\n                                annotation.earned = annotation.xp;\n                            }\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                            if (isPreviewMode) {\n                                annotation.completed = true;\n                                annotation.previewMode = true;\n                            }\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    // We only want the relevant content types.\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion, {\n                                    isPreviewMode,\n                                    isCompleted,\n                                    iseditor,\n                                    url\n                                });\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @param {boolean} force force run the interaction\n             * @returns {void}\n             */\n            const runInteraction = async(annotation, force = false) => {\n                if (subvideo) {\n                    return;\n                }\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $startscreen.fadeOut(300);\n                $endscreen.fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`.sidebar-nav-item[data-id=${annotation.id}]`).length > 0 && !force) {\n                    if (!$('body').hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                    }\n                    $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                        // In case there is an active interaction, trigger the interactionclose event.\n                        if ($('#message.active').length > 0) {\n                            $('#message.active').each(function() {\n                                const id = $(this).data('id');\n                                if (id != annotation.id) {\n                                    $(this).removeClass('active');\n                                    dispatchEvent('interactionclose', {'annotation': {'id': id}});\n                                }\n                            });\n                        }\n                        dispatchEvent('interactionrun', {'annotation': annotation});\n                    }, 100);\n                }\n\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            cmid: cmid,\n                            courseid: course,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            let lookbacktime = 0;\n\n            const onLoaded = async(reloaded = false, e = null) => {\n                let $changecaption = $('#changecaption');\n                if (e) {\n                    const captions = e.detail.tracks;\n                    if (captions && captions.length > 0) {\n                        $changecaption.removeClass('d-none');\n                        $changecaption.find('.dropdown-menu')\n                            .html(`<a class=\"dropdown-item changecaption px-3\" data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                        let menu = '';\n                        captions.forEach((caption, i) => {\n                            menu += `<a class=\"dropdown-item changecaption text-white px-3\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw\"></i>${caption.label}</a>`;\n                            if (i == captions.length - 1) {\n                                $changecaption.find('.dropdown-menu')\n                                    .append(menu);\n                                const lang = localStorage.getItem(`caption-${userid}`);\n                                if (lang && lang.length) {\n                                    $changecaption.find(`[data-lang=\"${lang}\"]`).trigger('click');\n                                }\n                            }\n                        });\n                    } else {\n                        $changecaption.addClass('d-none');\n                    }\n                }\n\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $startscreen.removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                lookbacktime = Math.max(0.5, player.frequency); // How far back to look for annotations.\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').addClass('d-none');\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').addClass('d-none');\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                const duration = player.totaltime;\n                if (!reloaded) {\n                    ({start, end} = await updateTime(duration));\n                }\n                totaltime = end - start;\n\n                if (!player.live) {\n                    $duration.text(convertSecondsToHMS(totaltime));\n                }\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $videowrapper.css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '75px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $wrapper.attr('data-ratio', ratio);\n                $wrapper.attr('data-gap', gap);\n\n                $startscreen.find('#start').focus();\n\n                // Resize observer\n                if (!reloaded) {\n                    let vwrapper = document.querySelector('#video-wrapper');\n                    // Optimize: Only update DOM if state changes, and debounce resize events.\n                    let lastExpandVisible = null;\n                    let resizeTimeout;\n                    const updateExpandVisibility = () => {\n                        const shouldShow = vwrapper.clientWidth > 1050;\n                        if (shouldShow !== lastExpandVisible) {\n                            $controller.find('#expand').toggleClass('d-none', !shouldShow);\n                            lastExpandVisible = shouldShow;\n                        }\n                    };\n                    const resizeObserver = new ResizeObserver(() => {\n                        clearTimeout(resizeTimeout);\n                        resizeTimeout = setTimeout(updateExpandVisibility, 100);\n                    });\n                    resizeObserver.observe(vwrapper);\n                    // Initial check\n                    updateExpandVisibility();\n\n                    // Scroll into view #video-wrapper\n                    if ($('body').hasClass('embed-mode')) {\n                        return;\n                    }\n                    vwrapper.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n                }\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @param {boolean} reloaded Whether the video is being reloaded.\n             * @param {boolean} main Whether the video is the default video.\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async(reloaded = false, main = false) => {\n                if ((window.braveEthereum || window.braveSolana) && !player.allowAutoplay) {\n                    player.destroy();\n                    Toast.add(M.util.get_string('braveautoplay', 'mod_interactivevideo'), {\n                        type: 'danger',\n                        autohide: false,\n                    });\n                    setTimeout(() => {\n                        $('#toast-0').css('margin-top', '70px');\n                        $('#interactivevideo-container').addClass('no-pointer-events');\n                        $('#autoplay-error').tooltip('hide');\n                        $('#autoplay-error').remove();\n                    }, 500);\n                    return;\n                }\n\n                if (!reloaded) {\n                    player.pause();\n                    const isPaused = await player.isPaused();\n                    if (!isPaused) {\n                        if (!player.live) {\n                            await player.seek(start);\n                        }\n                        onReady();\n                        return;\n                    }\n                }\n\n                if (!loaded) {\n                    await onLoaded(reloaded);\n                }\n\n                if (player.audio) {\n                    $annotationcanvas.addClass('bg-black');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                $(\"#annotation-canvas\").removeClass('w-0 d-none');\n                $(\".video-block\").css('background', 'transparent');\n                if (displayoptions.useoriginalvideocontrols == 0) {\n                    $(\".video-block\").removeClass('no-pointer');\n                }\n\n                if (!reloaded) {\n                    await getAnnotations();\n                } else {\n                    if (main) {\n                        await renderAnnotationItems(releventAnnotations, start, end - start);\n                    } else {\n                        await renderAnnotationItems([], start, end - start);\n                    }\n                }\n\n                if (player.live) {\n                    // Remove the slash.\n                    $currenttime.next().removeClass('d-md-inline');\n                    $currenttime.removeClass('d-md-inline');\n                    $duration.text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $remainingtime.text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $taskinfo.addClass('no-pointer-events');\n                    end = Number.MAX_SAFE_INTEGER;\n                    // Progress 100%.\n                    replaceProgressBars(100);\n                    return;\n                } else {\n                    $currenttime.next().addClass('d-md-inline');\n                    $currenttime.addClass('d-md-inline');\n                }\n\n                if (!reloaded) {\n                    $('#seekhead').draggable({\n                        'containment': '#video-nav',\n                        'axis': 'x',\n                        'cursor': 'col-resize',\n                        'start': async function(event, ui) {\n                            const isPaused = await player.isPaused();\n                            if (!isPaused) {\n                                player.pause();\n                            }\n                            $(this).addClass('active');\n                            $taskinfo.addClass('no-pointer-events');\n                            $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                            $endscreen.fadeOut(300);\n                            $seek.append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                            let $position = $('#position');\n                            const relX = ui.position.left;\n                            $position.css('left', (relX) + 'px');\n                            const percentage = relX / $(this).width();\n                            const time = percentage * totaltime;\n                            const formattedTime = convertSecondsToHMS(time);\n                            $position.find('#timelabel').text(formattedTime);\n                        },\n                        'drag': async function(event, ui) {\n                            let timestamp = ((ui.position.left) / $videoNav.width()) * totaltime + start;\n                            let percentage = ui.position.left / $videoNav.width();\n                            await replaceProgressBars(percentage * 100);\n                            $seek.find('#position').css('left', ui.position.left + 'px');\n                            $seek.find('#position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                            await player.seek(timestamp);\n                        },\n                        'stop': async function() {\n                            // Reset the launched annotation.\n                            lastrun = null;\n                            viewedAnno = [];\n                            setTimeout(function() {\n                                $taskinfo.removeClass('no-pointer-events');\n                            }, 200);\n                            setTimeout(function() {\n                                $('#seekhead').removeClass('active');\n                                $seek.find('#position').remove();\n                            }, 1000);\n                            player.play();\n                        }\n                    });\n\n                    dispatchEvent('timeupdate', {'time': start}); // Dispatch the timeupdate event with the start time.\n                }\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async(savepoint = false) => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('playtooltip', 'mod_interactivevideo'));\n                if (player.live) {\n                    return;\n                }\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                // We don't save the progress of the subvideo.\n                if (subvideo) {\n                    return;\n                }\n                if (savepoint || $('body').hasClass('embed-mode') || $('body').hasClass('iframe')\n                    || $('body').hasClass('mobileapp')) {\n                    let t = await player.getCurrentTime();\n                    let watchedpoint = Math.round(t);\n                    // Make sure the watchedpoint is not the same as the last saved point or so close to it.\n                    if ((Math.abs(watchedpoint - lastSaved) < 5 && watchedpoint != Math.round(end)) || watchedpoint < start + 5) {\n                        return;\n                    }\n                    lastSaved = watchedpoint;\n                    fetch(M.cfg.wwwroot + '/mod/interactivevideo/ajax.php', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        },\n                        body: new URLSearchParams({\n                            action: 'update_watchedpoint',\n                            sesskey: M.cfg.sesskey,\n                            completionid: completionid,\n                            watchedpoint: watchedpoint,\n                            contextid: M.cfg.contextid\n                        }).toString(),\n                        keepalive: true\n                    });\n                }\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded || player.live) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $endscreen.removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n\n                // Update the timeended field in the database if it is not already set.\n                if (!timeended) {\n                    $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_timeended',\n                            sesskey: M.cfg.sesskey,\n                            completionid: completionid,\n                            contextid: M.cfg.contextid,\n                            courseid: course,\n                            interactivevideo: interaction,\n                            userid: userid,\n                            updatestate: extendedcompletion && JSON.parse(extendedcompletion).watchtillend == 1 ? 1 : 0,\n                        },\n                        success: function(data) {\n                            try {\n                                data = JSON.parse(data);\n                            } catch {\n                                return;\n                            }\n                            if (data) {\n                                timeended = true;\n                                dispatchEvent('completionupdated', {\n                                    response: JSON.stringify({\n                                        overallcomplete: data.overallcomplete,\n                                    })\n                                });\n                            }\n                        }\n                    });\n                }\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (player.live) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (!firstPlay) {\n                    // If seeking before the first play, then we need to set the resumetime to the current time.\n                    window.resumetime = t;\n                }\n                if (t > start && t < end) {\n                    $endscreen.addClass('d-none');\n                    $startscreen.addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) < t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                // If lastrun timestamp is greater than t, then we need to reset it.\n                if (lastrun && releventAnnotations.find(x => x.id == lastrun).timestamp > t) {\n                    lastrun = null;\n                }\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n\n                if (player.live) {\n                    return;\n                }\n\n                if (!firstPlay) {\n                    dispatchEvent('iv:playerStart');\n                    $('#autoplay-error').tooltip('hide');\n                    $('#autoplay-error').remove();\n                    replaceProgressBars(window.resumetime ? (window.resumetime - start) / totaltime * 100 : 0);\n                    viewedAnno = [];\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        if (player.allowAutoplay) {\n                            await player.seek(window.resumetime);\n                        } else {\n                            await player.pause();\n                            await player.seek(window.resumetime);\n                            player.play();\n                        }\n                    }\n                    player.unMute();\n                    dispatchEvent('iv:playerStarted');\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded();\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube' || player.type == 'yt') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    let t = await player.getCurrentTime();\n                    t = Number(t);\n\n                    if (t > end) {\n                        onEnded();\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    replaceProgressBars(percentagePlayed * 100);\n\n                    if (subvideo) {\n                        return;\n                    }\n\n                    const theAnnotation = releventAnnotations.find(x => (((t - lookbacktime).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        viewedAnno = [];\n                        releventAnnotations.forEach(x => {\n                            if (Number(x.timestamp) < t) {\n                                viewedAnno.push(Number(x.id));\n                            }\n                        });\n\n                        $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        if (isBS5) {\n                            $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip]')\n                                .tooltip('show');\n                        }\n                        setTimeout(function() {\n                            $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                            if (isBS5) {\n                                $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip]')\n                                    .tooltip('hide');\n                            }\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if (isPreviewMode) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                            if (time < theAnnotation.timestamp - player.frequency) {\n                                await player.seek(theAnnotation.timestamp);\n                            }\n                            runInteraction(theAnnotation);\n                        } else {\n                            if (theAnnotation.completed) {\n                                if (time < theAnnotation.timestamp - player.frequency) {\n                                    await player.seek(theAnnotation.timestamp);\n                                }\n                                viewedAnno.push(Number(theAnnotation.id));\n                            }\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            const onPlay = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $('body').removeClass('disablekb');\n                // Initialize the player visualizer for html5 audio.\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                // Force fullscreen for mobile themes and mobile devices.\n                if ($('body').hasClass('mobiletheme') && !$wrapper.hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pausetooltip', 'mod_interactivevideo'));\n\n                if ($('#message.active').length > 0) {\n                    $('#message.active').each(function() {\n                        const mid = $(this).data('id');\n                        if (mid) {\n                            $(this).removeClass('active');\n                            dispatchEvent('interactionclose', {'annotation': {'id': mid}});\n                        }\n                    });\n                }\n\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n\n                if (!videoEnded) {\n                    $endscreen.fadeOut(300);\n                    $startscreen.fadeOut(300);\n                    $('#restart').addClass('d-none');\n                } else {\n                    viewedAnno = [];\n                }\n\n            };\n\n            // Implement the player.\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $startscreen.addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $annotationcanvas.removeClass('d-none w-0');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $wrapper.append($toast);\n\n            $(document).on('click', '.completion-required', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                return;\n            });\n\n            const handleUnskippable = async(t) => {\n                // Handle unskippable interactions.\n                if (!t) {\n                    t = await player.getCurrentTime();\n                }\n                if (!t) {\n                    return false;\n                }\n                if (releventAnnotations) {\n                    const theAnnotation = releventAnnotations.find(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && JSON.parse(x.advanced).advskippable == 0 && x.hascompletion == 1);\n                    if (theAnnotation) {\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $(document).on('timeupdate', async function(e) {\n                if (!playerReady || isPreviewMode || player.live) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                    }\n                }\n                handleUnskippable(t);\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                dispatchEvent('interactionrefresh', {'annotation': annotation});\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$wrapper.hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $wrapper.addClass('fullscreen');\n                    $('#interactivevideo-container').addClass('fullscreen');\n                    $videowrapper.css('padding-bottom', '0');\n                    $wrapper.find(`[data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $controller.addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $wrapper.removeClass('fullscreen');\n                    $('#interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $videowrapper.css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $controller.addClass('bg-dark').removeClass('bg-black');\n                }\n                $wrapper.find('#fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            $(document).on('visibilitychange', async function() {\n                // Pause video when the tab is not visible and the pauseonblur option is enabled.\n                if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                        onPaused(true);\n                    }\n                }\n            });\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                let shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Remove the embed parameter if it exists.\n                shareurl = shareurl.replace(/&embed=1/g, '');\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                const copied = M.util.get_string('copiedtoclipboard', 'mod_interactivevideo');\n                Toast.add(copied, {\n                    type: 'success',\n                    autohide: true,\n                    delay: 2000,\n                });\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const timestamp = $(this).data('timestamp');\n\n                let hasSkippable = await handleUnskippable(timestamp);\n                if (hasSkippable) {\n                    return;\n                }\n\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    player.pause();\n                }\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($videoNav.hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $startscreen.fadeOut(300);\n                $endscreen.fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                const isPlaying = await player.isPlaying();\n                if (!isPlaying || videoEnded) {\n                    await player.play();\n                }\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                if ($(this).hasClass('reload')) {\n                    location.reload();\n                    return;\n                }\n                $startscreen.fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                try {\n                    player.play();\n                } catch (error) {\n                    // Do nothing.\n                }\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                dispatchEvent('iv:playerRestart');\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                if ($('body').hasClass('hassidebar')) {\n                    $('#annotation-toggle').trigger('click');\n                    $('#annotation-sidebar, #annotation-toggle').remove();\n                    $('body').removeClass('hassidebar');\n                    $('.iv-sidebar').addClass('hide');\n                }\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                replaceProgressBars(0);\n                $endscreen.fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                if (player.live) {\n                    firstPlay = true;\n                }\n                if (!firstPlay) {\n                    player.play();\n                    return;\n                }\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $endscreen.find('#restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $('body').addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n                // Get the active annotation.\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    // Dispatch the interaction run event.\n                    dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == current)});\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmutetooltip', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mutetooltip', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item changequality text-white px-3\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find(`[data${bsAffix}-toggle=dropdown]`).dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            $(document).one('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerDestroyed', function() {\n                playerReady = false;\n            });\n\n            const addPlayerEvents = function() {\n                $(document).on('iv:playerPaused', function() {\n                    // Remove the tooltip.\n                    $('.tooltip').remove();\n                    dispatchEvent('videoPaused');\n                    onPaused();\n                });\n\n                $(document).on('iv:playerPlaying', function() {\n                    onPlaying();\n                });\n\n                $(document).on('iv:playerPlay', function() {\n                    onPlay();\n                    $loader.fadeOut(300);\n                });\n\n                $(document).on('iv:playerEnded', function() {\n                    onEnded();\n                });\n\n                $(document).on('iv:playerSeek', function(e) {\n                    if (player.live) {\n                        return;\n                    }\n                    onSeek(e.detail.time);\n                });\n\n                $(document).on('iv:playerLoaded', function(e) {\n                    const reloaded = e.detail.reloaded || false;\n                    onLoaded(reloaded, e);\n                });\n\n                $(document).on('iv:playerError', function() {\n                    $annotationcanvas.removeClass('d-none w-0');\n                    $startscreen.addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#spinner').remove();\n                    if ($('#player').is(':empty')) {\n                        $('#player').html(`<div class=\"alert alert-danger d-flex text-center h-100 rounded-0\n                         align-items-center justify-content-center\">\n                        <img src=\"${M.cfg.wwwroot}/mod/interactivevideo/pix/404-error.png\" alt=\"Error\" class=\"w-25\">\n                        </div>`);\n                    } else {\n                        Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                    }\n                });\n\n                $(document).on('iv:playerRateChange', function(e) {\n                    $('.changerate').find('i').removeClass('bi-check');\n                    $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n                });\n\n                $(document).on('iv:playerQualityChange', function(e) {\n                    $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                    $('.changequality').find('i').removeClass('bi-check');\n                    $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n                });\n            };\n\n            addPlayerEvents();\n\n            $(document).on('annotationitemsrendered', function() {\n                try {\n                    $wrapper.find(`[data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } catch (error) {\n                    // Do nothing.\n                }\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $taskinfo.removeClass('border-0');\n                }\n\n                if (!playerReady) {\n                    playerReady = true;\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!isPreviewMode && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    window.resumetime = time;\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    if (player.live) {\n                        replaceProgressBars(100);\n                    }\n                    // Get noautoplay from the URL.\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const noautoplay = urlParams.get('da');\n                    if (autoplay && player.allowAutoplay && noautoplay != '1') {\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            try {\n                                player.unMute();\n                            } catch (error) {\n                                // Do nothing.\n                            }\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            $(`[data${bsAffix}-toggle=\"tooltip\"]`).on('click', function() {\n                const $this = $(this);\n                setTimeout(function() {\n                    $this.tooltip('hide');\n                }, 2000); // Hide after 3 seconds\n            });\n\n            window.addEventListener('beforeunload', function() {\n                player.pause();\n                onPaused(true);\n                // Remove all event listeners before unload.\n                $(document).off();\n                cancelAnimationFrame(playingInterval);\n            });\n\n            $(document).on('interactionrun', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.starttime = windowAnno.starttime ? windowAnno.starttime : new Date().getTime();\n                    windowAnno.newstarttime = new Date().getTime();\n                    windowAnno.completedtime = windowAnno.completedtime ? windowAnno.completedtime : null;\n                    windowAnno.duration = windowAnno.duration > 0 ? windowAnno.duration : 0;\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('interactionclose interactionrefresh', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('completionupdated', function(e) {\n                let overallcomplete = JSON.parse(e.originalEvent.detail.response).overallcomplete;\n                if (overallcomplete) {\n                    if (JSON.parse(e.originalEvent.detail.response).overallcomplete > 0) {\n                        if (isCompleted) {\n                            return;\n                        }\n                        isCompleted = true;\n                        fireConfetti();\n                        Toast.add(M.util.get_string('congratulationsyoucompletethisactivity', 'mod_interactivevideo'), {\n                            type: 'success',\n                        });\n                        $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle-fill text-success\"></i>`);\n                    } else {\n                        isCompleted = false;\n                        $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle text-white\"></i>`);\n                    }\n                }\n                const annotation = e.originalEvent.detail.target;\n                if (!annotation) {\n                    return;\n                }\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    if (e.originalEvent.detail.action == 'mark-done') {\n                        windowAnno.completedtime = new Date().getTime();\n                    } else {\n                        windowAnno.completedtime = null;\n                    }\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n\n                // Handle the dismissible setting.\n                $('#message[data-id=' + annotation.id + ']').addClass('active'); // Make sure the message is active.\n                let anno = releventAnnotations.find(x => x.id == annotation.id);\n                let advanced = anno.advanced;\n                advanced = advanced ? JSON.parse(advanced) : {};\n                if (advanced.advdismissible == 0 && anno.completed) {\n                    $('#controller, #video-wrapper, .sidebar-nav-item')\n                        .removeClass('completion-required');\n                } else if (advanced.advdismissible == 0 && !anno.completed) {\n                    $controller.addClass('completion-required');\n                    if ($('#message.active').data('placement') == 'bottom' || $('#message.active').data('placement') == 'side') {\n                        $('#video-wrapper').addClass('completion-required');\n                    }\n                    if ($('#message.active').data('placement') == 'side') {\n                        $('.sidebar-nav-item').addClass('completion-required');\n                    }\n                }\n                if (anno.completed) {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').addClass('completed');\n                } else {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').removeClass('completed');\n                }\n            });\n\n            $(document).on('iv:autoplayBlocked', function(e) {\n                e.preventDefault();\n                if (e.originalEvent.detail.requireVideoBlock === false) {\n                    $('.video-block').remove();\n                }\n                // Append a error button.\n                if ($('#autoplay-error').length) {\n                    return;\n                }\n                $('body').append(`<button id=\"autoplay-error\" data${bsAffix}-toggle=\"tooltip\"\n                     title=\"${M.util.get_string('autoplayblocked', 'mod_interactivevideo')}\"\n                    class=\"btn btn-danger p-2 iv-rounded-circle pulse\"><i class=\"bi bi-x-lg\"></i></button>`);\n                $('#autoplay-error').tooltip('show');\n                $(document).on('click', '#autoplay-error', function() {\n                    $('#autoplay-error').tooltip('hide');\n                    $(this).fadeOut(300, 'swing', function() {\n                        $(this).remove();\n                    });\n                });\n            });\n\n            const updatePlayer = async(newPlayer) => {\n                player = newPlayer;\n                start = newPlayer.start;\n                end = newPlayer.end;\n                vtype = newPlayer.type;\n                loaded = false;\n                // Change player in all content types.\n                let types = Object.keys(ctRenderer);\n                return await Promise.all(types.map(async(type) => {\n                    return ctRenderer[type].setPlayer(newPlayer, start, end, vtype);\n                }));\n            };\n\n            $(document).on('iv:playerReload', async function(e) {\n                playerReady = true;\n                viewedAnno = [];\n                lastrun = null;\n                videoEnded = false;\n                let detail = e.originalEvent.detail;\n                if (detail.behavior == 'series') {\n                    subvideo = !detail.main;\n                } else {\n                    subvideo = false;\n                }\n\n                if (detail.player) {\n                    detail.player.subvideo = subvideo;\n                    await updatePlayer(detail.player, detail.behavior);\n                }\n\n                onReady(true, detail.main); // Main is true if the video is the default video.\n                replaceProgressBars(detail.currentTime / (end - start) * 100);\n            });\n\n            $(document).on('click', '#message[data-placement]:not(.active)', function(e) {\n                e.preventDefault();\n                $(this).addClass('active');\n                // Dispatch the interaction run event.\n                dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == $(this).data('id'))});\n            });\n\n            // Implement keyboard shortcuts.\n            document.addEventListener('keydown', async function(e) {\n                // Ignore spacebar when focus is on an input, textarea, or button\n                const activeTag = document.activeElement.tagName.toLowerCase();\n                if (activeTag !== 'body') {\n                    return;\n                }\n\n                if ($('body').hasClass('disablekb')) {\n                    return;\n                }\n\n                if (e.ctrlKey || e.metaKey || e.altKey) {\n                    return; // Ignore if any modifier keys are pressed.\n                }\n\n                if (e.code === 'Space') {\n                    e.preventDefault(); // Prevent page scroll.\n                    if (await player.isPaused()) {\n                        player.play();\n                    } else {\n                        player.pause();\n                    }\n                } else if (e.code === 'KeyC') {\n                    e.preventDefault();\n                    $('#chaptertoggle .btn').trigger('click');\n                } else if (e.code === 'KeyM') {\n                    e.preventDefault();\n                    if ($('#mute').length > 0) {\n                        $('#mute').trigger('click');\n                    } else {\n                        const isMuted = await player.isMuted();\n                        if (isMuted) {\n                            player.unMute();\n                        } else {\n                            player.mute();\n                        }\n                    }\n                } else if (e.code === 'KeyF') {\n                    e.preventDefault();\n                    $('#fullscreen').trigger('click');\n                } else if (e.code === 'KeyR') {\n                    e.preventDefault();\n                    $endscreen.find('#restart').trigger('click');\n                } else if (e.code === 'KeyS') {\n                    e.preventDefault();\n                    $controller.find('#share').trigger('click');\n                } else if (e.code === 'KeyE') {\n                    e.preventDefault();\n                    if ($controller.find('#expand').length > 0) {\n                        $controller.find('#expand').trigger('click');\n                    } else {\n                        $('body').toggleClass('limited-width');\n                        localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                    }\n                }\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","quickform","dispatchEvent","ctRenderer","isBS5","hasClass","bsAffix","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","subvideo","viewedAnno","$videoNav","$interactionNav","$loader","$meta","$annochapter","$wrapper","renderAnnotationItems","async","annos","start","empty","find","preventseeking","addClass","length","window","IVANNO","actualduration","skipsegments","filter","x","type","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","advanced","JSON","parse","visiblebeforecompleted","visibleaftercompleted","each","cstart","this","data","cend","id","prop","icon","formattedtitle","hide","show","fireConfetti","confetti","animationEnd","Date","now","defaults","startVelocity","spread","ticks","zIndex","randomInRange","min","max","random","interval","setInterval","timeLeft","clearInterval","particleCount","origin","y","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isPreviewMode","isCompleted","iseditor","$remainingtime","$currenttime","$lightprogressbar","$duration","$taskinfo","$seek","$startscreen","$endscreen","$controller","$videowrapper","$annotationcanvas","contextid","M","cfg","courseid","require","isNaN","playerReady","uprogress","timeended","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","time","text","live","util","get_string","css","getAnnotations","annnoitems","ajax","wwwroot","method","dataType","action","sesskey","courseContextId","userprogress","uid","previewmode","getContentTypes","fromview","when","done","progress","ct","completiondetails","Object","values","annotation","some","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","thisitem","percent","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","previewMode","getRelevantAnnotations","ANNOS","unshift","prependDummyChapter","chapterContentType","includes","remove","all","contentType","amdmodule","Type","error","initializeContentTypeRenderers","runInteraction","force","pause","isPaused","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","lookbacktime","onLoaded","reloaded","$changecaption","captions","detail","tracks","html","menu","caption","i","code","label","lang","passwordprotected","support","password","IVPLAYER","frequency","playbackrate","quality","ratio","usefixedratio","aspectratio","gap","attr","focus","resizeTimeout","vwrapper","document","querySelector","lastExpandVisible","updateExpandVisibility","shouldShow","clientWidth","toggleClass","ResizeObserver","clearTimeout","observe","scrollIntoView","behavior","block","inline","onReady","main","braveEthereum","braveSolana","allowAutoplay","destroy","autohide","tooltip","audio","useoriginalvideocontrols","next","MAX_SAFE_INTEGER","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","savepoint","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","abs","fetch","headers","body","keepalive","videoEnded","onEnded","isPlaying","fadeIn","interactivevideo","updatestate","watchtillend","success","response","overallcomplete","onSeek","firstPlay","resumetime","visualized","onPlaying","unMute","intervalFunction","isEnded","toFixed","percentagePlayed","useAnimationFrame","animate","requestAnimationFrame","onPlay","visualizer","mid","VideoPlayer","load","autoplay","$toast","detach","on","preventDefault","stopImmediatePropagation","handleUnskippable","advskippable","originalEvent","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","container","boundary","pauseonblur","visibilityState","setItem","href","shareurl","replace","navigator","clipboard","writeText","copied","delay","parentOffset","offset","pageX","preceedingAnno","reload","current","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","dropdown","setQuality","setCaption","one","addPlayerEvents","is","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","noautoplay","$this","addEventListener","off","windowAnnos","windowAnno","starttime","getTime","newstarttime","completedtime","target","anno","advdismissible","requireVideoBlock","updatePlayer","newPlayer","types","keys","setPlayer","currentTime","activeElement","tagName","toLowerCase","ctrlKey","metaKey","altKey","isMuted"],"mappings":";;;;;;;AAwBAA,6CAAO,CACH,SAAU,wBAAyB,aAAc,iCAAkC,6CACpF,SAASC,EAAGC,gBAAiBC,MAAOC,iBAC7BC,cAACA,eAAiBH,gBAClBI,WAAa,GACbC,MAAQN,EAAE,QAAQO,SAAS,QAC3BC,QAAUF,MAAQ,MAAQ,OAC5BG,YACAC,UACAC,aAEAC,aACAC,eACAC,oBACAC,aACAC,OACAC,QACAC,SAPAC,WAAa,SASXC,UAAYpB,EAAE,cACdqB,gBAAkBrB,EAAE,qBACpBsB,QAAUtB,EAAE,2BAkBduB,MAAQvB,EAAE,aACVwB,aAAexB,EAAE,sBACjByB,SAAWzB,EAAE,kBACX0B,sBAAwBC,MAAMC,MAAOC,MAAOnB,aAC9Ca,MAAMO,QACNT,gBAAgBU,KAAK,MAAMD,QAC3BV,UAAUW,KAAK,MAAMD,QACrBN,aAAaM,QACwB,GAAjCjB,eAAemB,gBACfZ,UAAUa,SAAS,qBAGnBL,MAAMM,OAAS,IACfpB,oBAAsBc,MACtBO,OAAOC,OAASR,WAEhBS,eAAiB3B,gBAEf4B,aAAeV,MAAMW,QAAOC,GAAe,eAAVA,EAAEC,OAErCH,aAAaJ,OAAS,GACtBI,aAAaI,SAAQF,UACXN,OAAUS,OAAOH,EAAEI,OAASD,OAAOH,EAAEK,WAC3CR,gBAAkBH,gBAIpBY,gBAAkBlB,MAAMW,QAAOC,GAAwB,GAAnBA,EAAEO,gBACtCC,uBAAyBF,gBAAgBZ,OAEzCe,GAAKH,gBAAgBI,KAAIV,GAAKG,OAAOH,EAAES,MAAKE,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAEpEC,eAAiBR,gBAClBP,QAAOC,GAAoB,GAAfA,EAAEe,YAEbC,SAAWV,gBAAgBI,KAAIV,GAAKG,OAAOH,EAAEiB,UAASN,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,IAAM,KAEtFL,uBAAyB,GACzBzB,MAAMmC,2GAvDMC,CAAAA,gBACVC,MAAQC,KAAKC,MAAMH,QAAU,MAC7BI,QAAUF,KAAKC,MAAOH,QAAU,KAAQ,IACxCK,iBAAmBL,QAAU,OAC/BM,OAAS,UACTL,MAAQ,IACRK,QAAUL,MAAQ,MAElBG,QAAU,IACVE,QAAUF,QAAU,MAEpBC,iBAAmB,IACnBC,QAAUD,iBAAmB,KAE1BC,QA0CsCC,CAAWL,KAAKM,KAAK9B,sIAE1BiB,eAAepB,qBAAYc,kHACFQ,uBAAcP,eAGnC,GAAxCpC,eAAeuD,uBAAiE,GAAnCvD,eAAewD,wBAChB,GAAxCxD,eAAeuD,uBACf3C,SAASQ,SAAS,oBAEtB7B,cAAc,0BAA2B,aACtBwB,gBACF0B,eAAepB,aACnBc,0BACHQ,iBACKP,SAId,MAAMT,KAAKZ,MAAO,OACb0C,SAAWjE,WAAWmC,EAAEC,YACxB6B,SAASC,4BAA4B/B,GAE/CpC,cAAc,0BAA2B,aACtBwB,gBACF0B,eAAepB,aACnBc,0BACHQ,iBACKP,WAITuB,aAAe5C,MAAMW,QAAOC,GAAe,eAAVA,EAAEC,MACf,GAAnBD,EAAEO,gBACTyB,aAAaC,MAAK,CAACrB,EAAGC,IAAMD,EAAEP,UAAYQ,EAAER,YAC5C2B,aAAa9B,SAASF,UACZkC,SAAWC,KAAKC,MAAMpC,EAAEkC,WACU,KAAnCA,SAASG,yBAAkCrC,EAAEe,WACR,KAAlCmB,SAASI,uBAAgCtC,EAAEe,YAC/CvD,EAAE,mCAAmC+E,MAAK,iBAChCC,OAAShF,EAAEiF,MAAMC,KAAK,SACtBC,KAAOnF,EAAEiF,MAAMC,KAAK,OACtB1C,EAAEK,WAAamC,QAAUxC,EAAEK,UAAYsC,MACvCnF,EAAEiF,MAAMlD,KAAK,sBACR2B,qIACQlB,EAAEe,UAAY,YAAc,yBAAgBf,EAAE4C,gCAAuB5C,EAAEK,0HAE9DL,EAAEe,UAAY,oCAAsC,0EAC7DoB,KAAKC,MAAMpC,EAAE6C,MAAMC,wGACW9C,EAAE+C,sFAChB/C,EAAES,4DAK3B,GAAhBrB,MAAMM,OACNlC,EAAE,kBAAkBwF,OAEpBxF,EAAE,kBAAkByF,OAExBrF,cAAc,kBAAmB,aAAgBwB,SAG/C8D,aAAe,SAEbC,SAAWxD,OAAOwD,aAClBC,aAAeC,KAAKC,MAFT,IAGXC,SAAW,CAACC,cAAe,GAAIC,OAAQ,IAAKC,MAAO,GAAIC,OAAQ,YAE7DC,cAAgB,CAACC,IAAKC,MACjBzC,KAAK0C,UAAYD,IAAMD,KAAOA,QAGrCG,SAAWC,aAAY,eACnBC,SAAWd,aAAeC,KAAKC,SAE/BY,UAAY,SACLC,cAAcH,cAGrBI,cAAsBF,SAhBf,IAgBS,UAEpBf,SAAS,IAAII,SAAUa,cAAAA,cAAeC,OAAQ,CAACrE,EAAG4D,cAAc,GAAK,IAAMU,EAAGjD,KAAK0C,SAAW,MAC9FZ,SAAS,IAAII,SAAUa,cAAAA,cAAeC,OAAQ,CAACrE,EAAG4D,cAAc,GAAK,IAAMU,EAAGjD,KAAK0C,SAAW,OACvF,IACR,aAGPpE,OAAOuD,aAAeA,aAEf,CAIHhE,sBAAuBA,sBAwBvBqF,KAAM,SACFC,IAAKC,KAAMC,YAAaC,OAAQC,YAAQvF,6DAAQ,EAAGwF,2CACnDC,4DAAsBC,yDAAmBC,gDAAUC,+CACnDC,0EAAoBC,iEAAS,KAAMC,mEAAW,GAAIC,gEAAQ,KAAMC,6EAAqB,KAAMC,yEAC3FC,uEAAqBC,oEAEjBC,eAAiBlI,EAAE,kBACnBmI,aAAenI,EAAE,gBACjBoI,kBAAoBpI,EAAE,qBACtBqI,UAAYrI,EAAE,aACdsI,UAAYtI,EAAE,aACduI,MAAQvI,EAAE,SACVwI,aAAexI,EAAE,iBACjByI,WAAazI,EAAE,eACf0I,YAAc1I,EAAE,eAChB2I,cAAgB3I,EAAE,kBAClByB,SAAWzB,EAAE,YACb4I,kBAAoB5I,EAAE,sBAE1BG,UAAU,CACN0I,UAAWC,EAAEC,IAAIF,UACjBG,SAAU7B,OACVF,KAAAA,KACAC,YAAAA,cAGJ+B,QAAQ,CAAC,gCACTA,QAAQ,CAAC,kCAGTpH,MAAQc,OAAOd,OACXqH,MAAMrH,SACNA,MAAQ,GAIZwF,IAAM1E,OAAO0E,KACT6B,MAAM7B,OACNA,IAAM,MAGVxG,eAAiB+G,aAEbuB,aAAc,EACdC,UAAY,KACZC,UAAY,KAE4B,QAAxCC,aAAaC,QAAQ,iBAAqE,GAAxC1I,eAAeuD,wBACjEpE,EAAE,QAAQiC,SAAS,iBACnByG,YAAY3G,KAAK,aAAayH,YAAY,WAAWvH,SAAS,cAGrD,WAATwF,OACAzH,EAAE,QAAQiC,SAAS,uBAQjBwH,oBAAuB9F,aACrBA,QAAU,QACH,cAEL+F,EAAI7F,KAAKC,MAAMH,QAAU,MACzBgG,EAAI9F,KAAKC,MAAMH,QAAU,KAAO,IAChCiG,EAAI/F,KAAKC,MAAMH,QAAU,KAAO,WAC9B+F,EAAI,EAAIA,EAAI,IAAM,KAAOC,EAAI,GAAK,IAAM,IAAMA,EAAI,KAAOC,EAAI,GAAK,IAAM,IAAMA,GAQpFC,oBAAuBC,YAClB,IAAIC,SAASC,cAEZC,MADJH,WAAaA,WAAa,IAAM,IAAMA,YACd,IAAMpJ,UAC9ByH,aAAa+B,KAAKT,oBAAoBQ,OACtC/B,eAAegC,KACXlJ,OAAOmJ,KAAOrB,EAAEsB,KAAKC,WAAW,OAAQ,wBAA0BZ,oBAAoB/I,UAAYuJ,OACtG7I,UAAUW,KAAK,aAAauI,IAAI,QAASR,WAAa,KACtD1I,UAAUW,KAAK,aAAauI,IAAI,OAAQR,WAAa,KACrD1B,kBAAkBkC,IAAI,QAASR,WAAa,KAC5CE,SAAQ,MAQVO,eAAiB,WAEbC,WAAaxK,EAAEyK,KAAK,CACtBzD,IAAK8B,EAAEC,IAAI2B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV1F,KAAM,CACF2F,OAAQ,YACRC,QAAShC,EAAEC,IAAI+B,QACf1F,GAAI8B,YACJ2B,UAAWC,EAAEC,IAAIgC,gBACjBlD,MAAOA,MACPZ,KAAMA,QAKR+D,aAAehL,EAAEyK,KAAK,CACxBzD,IAAK8B,EAAEC,IAAI2B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV1F,KAAM,CACF2F,OAAQ,eACRC,QAAShC,EAAEC,IAAI+B,QACf1F,GAAI8B,YACJ+D,IAAK7D,OACLS,MAAOA,MACPZ,KAAMA,KACN4B,UAAWC,EAAEC,IAAIF,UACjBqC,YAAanD,cAAgB,EAAI,KAKnCoD,gBAAkBnL,EAAEyK,KAAK,CAC3BzD,IAAK8B,EAAEC,IAAI2B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV1F,KAAM,CACF2F,OAAQ,uBACRC,QAAShC,EAAEC,IAAI+B,QACfjD,MAAOA,MACPZ,KAAMA,KACNmE,SAAU,EACVvC,UAAWC,EAAEC,IAAIF,aAIzB7I,EAAEqL,KAAKb,WAAYQ,aAAcG,iBAAiBG,MAAK3J,eAAeC,MAAO2J,SAAUC,IACnF/K,YAAckE,KAAKC,MAAMhD,MAAM,IAC3BZ,OAAOmJ,OACP1J,YAAcA,YAAY8B,QAAOC,GAAKA,EAAEK,UAAY,KAExD0I,SAAW5G,KAAKC,MAAM2G,SAAS,IAC/BnC,UAAYmC,SACZlC,UAAYkC,SAASlC,UACrBzI,aAAe+D,KAAKC,MAAM4G,GAAG,IAC7BzK,aAAewK,SAASnG,OACpBqG,kBAAoB9G,KAAKC,MAAM2G,SAASE,mBAAqB,YACjC,iBAArBA,oBACPA,kBAAoBC,OAAOC,OAAOF,oBAEtChL,qBAyCuBA,YAAaG,aAAciB,MAAOwF,YAClD5G,YAAY8B,QAAOqJ,cACAhL,aAAaiL,MAAK/E,GAAKA,EAAEgF,OAASF,WAAWnJ,SAK3C,gBAApBmJ,WAAWnJ,OACFmJ,WAAW/I,UAAYwE,KAAOuE,WAAWhJ,MAAQf,OAGtD+J,WAAW/I,WAAahB,OAAS+J,WAAW/I,WAAawE,KAAQuE,WAAW/I,UAAY,KApDtFkJ,CAAkBtL,YAAaG,aAAciB,MAAOwF,KAClE5G,qBAkEwBA,YAAaG,aAAc2K,SAAU1J,MAAOwF,IAAKoE,yBACnEO,eAA4C,IAA3BT,SAASU,eAAuB,GAAKtH,KAAKC,MAAM2G,SAASU,gBAC1EC,eAAiB,IAAIC,IAAIvL,aAAasC,KAAIsI,IAAM,CAACA,GAAGM,KAAMN,cACzD/K,YAAYyC,KAAI0I,aACnBA,WAAW/I,UAAYF,OAAOiJ,WAAW/I,WACzC+I,WAAW3I,GAAKN,OAAOiJ,WAAW3I,UAC5BmJ,eAAiBX,kBAAkB1J,MAAKS,GAAKmC,KAAKC,MAAMpC,GAAG4C,IAAMwG,WAAWxG,QAC9EgH,eAAgB,KACZC,SAAW1H,KAAKC,MAAMwH,gBAC1BR,WAAWnI,OAASd,OAAO0J,SAASpJ,IAChCoJ,SAASC,UACTV,WAAWnI,OAASmI,WAAW3I,GAAKoJ,SAASC,SAE7CV,WAAWnI,OAASmI,WAAW3I,KAC/B2I,WAAWnI,OAASmI,WAAW3I,SAGnC2I,WAAWnI,OAAS,MAcpBiB,SAZmB,eAAnBkH,WAAWnJ,OACXmJ,WAAWhJ,MAAQD,OAAOiJ,WAAWhJ,OACjCgJ,WAAW/I,UAAYhB,OAAS+J,WAAWhJ,MAAQf,QACnD+J,WAAW/I,UAAYhB,OAEvB+J,WAAWhJ,MAAQyE,KAAOuE,WAAW/I,UAAYwE,MACjDuE,WAAWhJ,MAAQyE,MAG3BuE,WAAWvG,KAAOV,KAAK4H,UAAUL,eAAeM,IAAIZ,WAAWnJ,OAC/DmJ,WAAWrI,UAAYyI,eAAeS,QAAQb,WAAWxG,KAAO,MAI5DV,SAAWC,KAAKC,MAAMgH,WAAWlH,UACnC,MAAOgI,GACLhI,SAAW,YAEfkH,WAAWe,WAAajI,UAAwC,MAA5BA,SAASkI,eAEtChB,cAzGGiB,CAAmBpM,YAAaG,aAAc2K,SAAU1J,MAAOwF,IAAKoE,mBAElFhL,YAAYgE,MAAK,CAACrB,EAAGC,IACbD,EAAEX,KAAOY,EAAEZ,MACH,EAERW,EAAEX,KAAOY,EAAEZ,KACJ,EAEJW,EAAEP,UAAYQ,EAAER,YAG3B/B,6BAwG4BL,mBACtB6B,aAAe7B,YAAY8B,QAAOqJ,YAAiC,eAAnBA,WAAWnJ,WAC7D3B,oBAAsB,UAC1BL,YAAYiC,SAAQkJ,iBACZkB,WAAY,EAChBxK,aAAaI,SAAQqK,cACbpK,OAAOiJ,WAAW/I,WAAaF,OAAOoK,YAAYlK,YAC/CF,OAAOiJ,WAAW/I,WAAaF,OAAOoK,YAAYnK,SACrDkK,WAAY,MAGhBA,YACAhM,oBAAoBkM,KAAKpB,YACrB7D,gBACA6D,WAAWrI,WAAY,EACvBqI,WAAWqB,aAAc,OAI9BnM,oBA3HeoM,CAAuBzM,aAC7C0B,OAAOgL,MAAQrM,oBACXA,oBAAoBoB,OAAS,IAAMpB,oBAAoBiB,MAAKS,GAAe,WAAVA,EAAEC,iBAmI9C3B,oBAAqBe,MAAOjB,cACrDE,oBAAoBsM,QAAQ,CACxBhI,GAAI,EACJxC,MAAOkG,EAAEsB,KAAKC,WAAW,eAAgB,wBACzC9E,eAAgBuD,EAAEsB,KAAKC,WAAW,eAAgB,wBAClDxH,UAAWhB,MACXY,KAAM,UACN4C,KAAMV,KAAK4H,UAAU3L,aAAamB,MAAKS,GAAe,WAAVA,EAAEsJ,QAC9C7I,GAAI,EACJM,WAAW,EACXiC,MAAM,IA5IN6H,CAAoBvM,oBAAqBe,MAAOjB,mCAqKVA,aAAcE,oBACxDE,OAAQkG,YAAaC,OAAQC,OAAQE,qBAAsBC,kBAC3DC,SAAUC,MAAOC,YAAahH,UAAWmB,MAAOwF,IAAKJ,KAAMY,MAAO9G,oBAC5DuM,mBAAqB1M,aAAamB,MAAKS,GAAe,WAAVA,EAAEsJ,UAGzB,IAD3BlL,aAAeA,aAAa2B,QAAOC,GAAK1B,oBAAoBoC,KAAI4D,GAAKA,EAAErE,OAAM8K,SAAS/K,EAAEsJ,SACvE5J,mBACblC,EAAE,qEAAqEwN,SAGvExN,EAAE,qEAAqEwJ,YAAY,UAElF5I,aAAamB,MAAKS,GAAe,WAAVA,EAAEsJ,QAC1BlL,aAAaoM,KAAKM,0BAEhBvD,QAAQ0D,IAAI7M,aAAasC,KAAIwK,aACxB,IAAI3D,SAASC,UAChBf,QAAQ,CAACyE,YAAYC,YAAY,SAASC,MACtCvN,WAAWqN,YAAY5B,MAAQ,IAAI8B,KAAK5M,OAAQF,oBAAqBoG,YAAaC,OAAQC,OACtFE,qBAAsBC,kBAAmBC,SAAUC,MAAOC,YAAahH,UAAWmB,MAClFwF,IAAKqG,YAAazG,KAAMY,MAAOhH,eAAgBE,aAAc+G,mBAAoB,CACjFC,cAAAA,cACAC,YAAAA,YACAC,SAAAA,SACAjB,IAAAA,UAGA3G,WAAWqN,YAAY5B,MAAM/E,OAC/B,MAAO8G,QAGT7D,mBAjMN8D,CAA+BlN,aAAcE,oBAAqBE,OAAQkG,YAAaC,OAAQC,OACjGE,qBAAsBC,kBAAmBC,SAAUC,MAAOC,YAC1DhH,UAAWmB,MAAOwF,IAAKJ,KAAMY,MAAO9G,oBAElCW,sBAAsBZ,oBAAqBe,EAAOwF,IAAMxF,OAC9D7B,EAAE,SAASwJ,YAAY,UACvBxJ,EAAE,YAAYwN,SACdxN,EAAE,eAAewJ,YAAY,UACtB,IAAIO,SAASC,UAChBA,iBAqMN+D,eAAiBpM,eAAMiK,gBAAYoC,iEACjC9M,gBAIJF,OAAOiN,YACHC,eAAiBlN,OAAOkN,cACvBA,aAKLjN,QAAU2K,WAAWxG,GACrBjE,WAAa,GAEbL,oBAAoB4B,SAAQF,IACpBG,OAAOH,EAAEK,YAAcF,OAAOiJ,WAAW/I,YACzC1B,WAAW6L,KAAKrK,OAAOH,EAAE4C,QAGjCjE,WAAW6L,KAAKrK,OAAOiJ,WAAWxG,KAClCjE,WAAa,IAAI,IAAIgN,IAAIhN,aAGzBnB,EAAE,qBAAqBoO,MAAM,QAE7BpO,EAAE,YAAYqO,IAAI,2BAA2BA,IAAI,WAAWA,uBAAgBzC,WAAWxG,SAAOoI,SAC9FhF,aAAa8F,QAAQ,KACrB7F,WAAW6F,QAAQ,KAEf5G,YAAa,OACP6G,eAAiBzN,oBAClByB,QAAOC,GAAKG,OAAOH,EAAEK,WAAaF,OAAOiJ,WAAW/I,YAC/B,GAAfL,EAAEe,WAAyC,GAAnBf,EAAEO,mBACjCwL,eAAerM,OAAS,EAAG,OACrBsM,cAAgBD,eAAe,gBAC/BvN,OAAOiN,cACPjN,OAAOyN,KAAKD,cAAc3L,WAChCkL,eAAeS,oBACftO,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjF5H,KAAM,YAQe,QAA7BmJ,WAAW/K,gBAA4Bb,sCAA+B4L,WAAWxG,SAAOlD,OAAS,IAAM8L,OAClGhO,EAAE,QAAQO,SAAS,eAEpBP,EAAE,sBAAsB2O,QAAQ,SAEpC3O,sCAA+B4L,WAAWxG,SAAOuJ,QAAQ,WAEzDhO,aAAeN,WAAWuL,WAAWnJ,MACrCmM,YAAW,KACPjO,aAAaoN,eAAenC,YAExB5L,EAAE,mBAAmBkC,OAAS,GAC9BlC,EAAE,mBAAmB+E,MAAK,iBAChBK,GAAKpF,EAAEiF,MAAMC,KAAK,MACpBE,IAAMwG,WAAWxG,KACjBpF,EAAEiF,MAAMuE,YAAY,UACpBpJ,cAAc,mBAAoB,YAAe,IAAOgF,UAIpEhF,cAAc,iBAAkB,YAAewL,eAChD,WA7DHmC,eAAenC,aA4EjBiD,YAAclN,cACXgG,oBAICmH,UAAY,IAAIC,gBAAgB5M,OAAO6M,SAASC,QACtDH,UAAUI,OAAO,WACXC,OAAShN,OAAO6M,SAASI,SACzB,KAAOjN,OAAO6M,SAASK,KAAOlN,OAAO6M,SAASM,SAAW,IAAMR,UAAUS,WAC/EpN,OAAOqN,QAAQC,aAAa,KAAM,KAAMN,SAGtCO,WAAa/N,MAAAA,WACfgO,SAAWhN,OAAOgN,cACdC,cAAe,SACdvI,KAAc,GAAPA,MACRuI,cAAe,KAEd/N,OAASA,OAAS8N,UAAY9N,MAAQ,GAAKA,OAAS8N,YACrDC,cAAe,GAEnB/N,MAAQA,MAAQ8N,SAAW,EAAI9N,MAC3B+N,oBACM5P,EAAEyK,KAAK,CACTzD,IAAK8B,EAAEC,IAAI2B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV1F,KAAM,CACF2F,OAAQ,mBACRC,QAAShC,EAAEC,IAAI+B,QACf1F,GAAI8B,YACJD,KAAMA,KACN+B,SAAU7B,OACVtF,MAAOA,MACPwF,IAAMA,KAAc,GAAPA,IAAsBA,IAAXsI,SACxB9G,UAAWC,EAAEC,IAAIF,aAI7BxB,KAAOA,KAAc,GAAPA,KAAYA,IAAMsI,SAAWA,SAAWtI,IAC/C,CAACxF,MAAAA,MAAOwF,IAAAA,UAGfwI,QAAS,EACTC,aAAe,QAEbC,SAAWpO,qBAAMqO,iEAAkBtD,yDAAI,KACrCuD,eAAiBjQ,EAAE,qBACnB0M,EAAG,OACGwD,SAAWxD,EAAEyD,OAAOC,UACtBF,UAAYA,SAAShO,OAAS,EAAG,CACjC+N,eAAezG,YAAY,UAC3ByG,eAAelO,KAAK,kBACfsO,yIAC2BvH,EAAEsB,KAAKC,WAAW,MAAO,qCACrDiG,KAAO,GACXJ,SAASxN,SAAQ,CAAC6N,QAASC,QACvBF,4GACUC,QAAQE,mDAA0CF,QAAQG,cAChEF,GAAKN,SAAShO,OAAS,EAAG,CAC1B+N,eAAelO,KAAK,kBACf2B,OAAO4M,YACNK,KAAOrH,aAAaC,0BAAmBnC,SACzCuJ,MAAQA,KAAKzO,QACb+N,eAAelO,2BAAoB4O,YAAUhC,QAAQ,kBAKjEsB,eAAehO,SAAS,aAI5B4N,cAGoC,GAApChP,eAAe+P,mBAA0B5P,OAAO6P,QAAQC,WAExDtI,aAAagB,YAAY,UACzBxJ,EAAE,gBAAgBwJ,YAAY,8BAElCqG,QAAS,EAET1N,OAAO4O,SAAW/P,OAClB8O,aAAejM,KAAKyC,IAAI,GAAKtF,OAAOgQ,WAED,GAA/BhQ,OAAO6P,QAAQI,aACfjR,EAAE,eAAeiC,SAAS,UAE1BjC,EAAE,eAAewJ,YAAY,UAGH,GAA1BxI,OAAO6P,QAAQK,QACflR,EAAE,kBAAkBiC,SAAS,UAE7BjC,EAAE,kBAAkBwJ,YAAY,gBAG9BmG,SAAW3O,OAAON,UACnBsP,YACCnO,MAAAA,MAAOwF,IAAAA,WAAaqI,WAAWC,WAErCjP,UAAY2G,IAAMxF,MAEbb,OAAOmJ,MACR9B,UAAU6B,KAAKT,oBAAoB/I,gBAInCyQ,MAAQ,GAAK,EACZtQ,eAAeuQ,eAAiD,GAAhCvQ,eAAeuQ,gBAChDD,MAAQnQ,OAAOqQ,aAEnB1I,cAAc2B,IAAI,iBAAmB,EAAI6G,MAAS,IAAM,SACpDG,IAAM,WACNtR,EAAE,QAAQO,SAAS,cACyB,GAAxCM,eAAeuD,sBACfpE,EAAE,YAAYsK,IAAI,OACL,iBAAmB6G,MAAQ,MAGxCnR,EAAE,YAAYsK,IAAI,OACL,0BAA4B6G,MAAQ,OAIT,GAAxCtQ,eAAeuD,wBACfkN,IAAM,QAEVtR,EAAE,YAAYsK,IAAI,OACL,kBAAoBgH,IAAM,cAAgBH,MAAQ,OAInE1P,SAAS8P,KAAK,aAAcJ,OAC5B1P,SAAS8P,KAAK,WAAYD,KAE1B9I,aAAazG,KAAK,UAAUyP,SAGvBxB,SAAU,KAIPyB,cAHAC,SAAWC,SAASC,cAAc,kBAElCC,kBAAoB,WAElBC,uBAAyB,WACrBC,WAAaL,SAASM,YAAc,KACtCD,aAAeF,oBACfnJ,YAAY3G,KAAK,WAAWkQ,YAAY,UAAWF,YACnDF,kBAAoBE,gBAGL,IAAIG,gBAAe,KACtCC,aAAaV,eACbA,cAAgB7C,WAAWkD,uBAAwB,QAExCM,QAAQV,UAEvBI,yBAGI9R,EAAE,QAAQO,SAAS,qBAGvBmR,SAASW,eAAe,CAACC,SAAU,SAAUC,MAAO,MAAOC,OAAQ,cAuBrEC,QAAU9Q,qBAAMqO,iEAAkB0C,iEAC/BvQ,OAAOwQ,eAAiBxQ,OAAOyQ,eAAiB5R,OAAO6R,qBACxD7R,OAAO8R,UACP5S,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,gBAAiB,wBAAyB,CAClE5H,KAAM,SACNsQ,UAAU,SAEdnE,YAAW,KACP5O,EAAE,YAAYsK,IAAI,aAAc,QAChCtK,EAAE,+BAA+BiC,SAAS,qBAC1CjC,EAAE,mBAAmBgT,QAAQ,QAC7BhT,EAAE,mBAAmBwN,WACtB,SAIFwC,SAAU,CACXhP,OAAOiN,kBACgBjN,OAAOkN,kBAErBlN,OAAOmJ,YACFnJ,OAAOyN,KAAK5M,YAEtB4Q,aAKH5C,cACKE,SAASC,UAGfhP,OAAOiS,OACPrK,kBAAkB3G,SAAS,YAM/BjC,EAAE,sBAAsBwJ,YAAY,cACpCxJ,EAAE,gBAAgBsK,IAAI,aAAc,eACW,GAA3CzJ,eAAeqS,0BACflT,EAAE,gBAAgBwJ,YAAY,cAG7BwG,SAGG0C,WACMhR,sBAAsBZ,oBAAqBe,EAAOwF,IAAMxF,aAExDH,sBAAsB,GAAIG,EAAOwF,IAAMxF,aAL3C0I,iBASNvJ,OAAOmJ,YAEPhC,aAAagL,OAAO3J,YAAY,eAChCrB,aAAaqB,YAAY,eACzBnB,UAAU6B,KAAKpB,EAAEsB,KAAKC,WAAW,OAAQ,yBACzCnC,eAAegC,KAAKpB,EAAEsB,KAAKC,WAAW,OAAQ,yBAC9C/B,UAAUrG,SAAS,qBACnBoF,IAAM1E,OAAOyQ,sBAEbvJ,oBAAoB,KAGpB1B,aAAagL,OAAOlR,SAAS,eAC7BkG,aAAalG,SAAS,eAGrB+N,WACDhQ,EAAE,aAAaqT,UAAU,aACN,kBACP,WACE,mBACD1R,eAAe2R,MAAOC,UACJvS,OAAOkN,YAE1BlN,OAAOiN,QAEXjO,EAAEiF,MAAMhD,SAAS,UACjBqG,UAAUrG,SAAS,qBACnBjC,EAAE,YAAYqO,IAAI,2BAA2BA,IAAI,WAAWb,SAC5D/E,WAAW6F,QAAQ,KACnB/F,MAAM7E,OAAO,2DACT8P,UAAYxT,EAAE,mBACZyT,KAAOF,GAAGG,SAASC,KACzBH,UAAUlJ,IAAI,OAASmJ,KAAQ,YACzB3J,WAAa2J,KAAOzT,EAAEiF,MAAM2O,QAE5BC,cAAgBpK,oBADTK,WAAapJ,WAE1B8S,UAAUzR,KAAK,cAAcmI,KAAK2J,qBAE9BlS,eAAe2R,MAAOC,QACtB1Q,UAAc0Q,GAAGG,SAASC,KAAQvS,UAAUwS,QAAWlT,UAAYmB,MACnEiI,WAAayJ,GAAGG,SAASC,KAAOvS,UAAUwS,cACxC/J,oBAAiC,IAAbC,YAC1BvB,MAAMxG,KAAK,aAAauI,IAAI,OAAQiJ,GAAGG,SAASC,KAAO,MACvDpL,MAAMxG,KAAK,wBAAwBmI,KAAKT,oBAAoB5G,UAAYhB,cAClEb,OAAOyN,KAAK5L,iBAEdlB,iBAEJV,QAAU,KACVE,WAAa,GACbyN,YAAW,WACPtG,UAAUkB,YAAY,uBACvB,KACHoF,YAAW,WACP5O,EAAE,aAAawJ,YAAY,UAC3BjB,MAAMxG,KAAK,aAAayL,WACzB,KACHxM,OAAO8S,UAIf1T,cAAc,aAAc,MAASyB,cAazCkS,gBACEC,SAAWrS,qBAAMsS,qEACd9K,cAGLnJ,EAAE,cAAc+B,KAAK,KAAKyH,YAAY,iBAAiBvH,SAAS,gBAChEjC,EAAE,cAAcuR,KAAK,sBAAuBzI,EAAEsB,KAAKC,WAAW,cAAe,0BACzErJ,OAAOmJ,OAGX+J,qBAAqBC,kBAGjBjT,WAGA+S,WAAajU,EAAE,QAAQO,SAAS,eAAiBP,EAAE,QAAQO,SAAS,WACjEP,EAAE,QAAQO,SAAS,gBAAc,KAChC6T,QAAUpT,OAAOqT,iBACjBC,aAAezQ,KAAK0Q,MAAMH,MAEzBvQ,KAAK2Q,IAAIF,aAAeP,WAAa,GAAKO,cAAgBzQ,KAAK0Q,MAAMlN,MAASiN,aAAezS,MAAQ,SAG1GkS,UAAYO,aACZG,MAAM3L,EAAEC,IAAI2B,QAAU,iCAAkC,CACpDC,OAAQ,OACR+J,QAAS,gBACW,qCAEpBC,KAAM,IAAI5F,gBAAgB,CACtBlE,OAAQ,sBACRC,QAAShC,EAAEC,IAAI+B,QACf/J,aAAcA,aACduT,aAAcA,aACdzL,UAAWC,EAAEC,IAAIF,YAClB0G,WACHqF,WAAW,UAKnBC,YAAa,QAaXC,QAAUnT,cACPwH,sBAGD0L,YAAc7T,OAAOmJ,qBAIHnJ,OAAO+T,mBAEzB/T,OAAOiN,aACP6G,UAIJd,WAEA5T,cAAc,aAAc,MAASiH,MACrCrH,EAAE,YAAYwJ,YAAY,UAAUwL,OAAO,KAC3CvM,WAAWe,YAAY,UAAUwL,OAAO,KACxC5U,cAAc,QAAS,MAASiH,MAChCwC,oBAAoB,KACpBgL,YAAa,EACb1T,WAAa,GAGRkI,WACDrJ,EAAEyK,KAAK,CACHzD,IAAK8B,EAAEC,IAAI2B,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV1F,KAAM,CACF2F,OAAQ,mBACRC,QAAShC,EAAEC,IAAI+B,QACf/J,aAAcA,aACd8H,UAAWC,EAAEC,IAAIF,UACjBG,SAAU7B,OACV8N,iBAAkB/N,YAClBE,OAAQA,OACR8N,YAAapN,oBAAqE,GAA/CnD,KAAKC,MAAMkD,oBAAoBqN,aAAoB,EAAI,GAE9FC,QAAS,SAASlQ,UAEVA,KAAOP,KAAKC,MAAMM,MACpB,aAGEA,OACAmE,WAAY,EACZjJ,cAAc,oBAAqB,CAC/BiV,SAAU1Q,KAAK4H,UAAU,CACrB+I,gBAAiBpQ,KAAKoQ,yBAe5CC,OAAS5T,MAAAA,QACNwH,sBAGDnI,OAAOmJ,YAIPiK,EADAA,EACIzR,OAAOyR,SAEDpT,OAAOqT,iBAEhBmB,YAEDrT,OAAOsT,WAAarB,GAEpBA,EAAIvS,OAASuS,EAAI/M,MACjBoB,WAAWxG,SAAS,UACpBuG,aAAavG,SAAS,WAG1B4H,qBADoBuK,EAAIvS,OAAUnB,UAAa,KAE/CN,cAAc,aAAc,MAASgU,IAErCjT,WAAa,GACbL,oBAAoB4B,SAAQF,IACpBG,OAAOH,EAAEK,WAAauR,GACtBjT,WAAW6L,KAAKrK,OAAOH,EAAE4C,QAI7BnE,SAAWH,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAMnE,UAAS4B,UAAYuR,IACtEnT,QAAU,WAIdyU,YAAa,EACbvB,gBAAkB,KAClBqB,WAAY,QAcVG,UAAYhU,cAETwH,sBAIDnI,OAAOmJ,YAINqL,YACDpV,cAAc,kBACdJ,EAAE,mBAAmBgT,QAAQ,QAC7BhT,EAAE,mBAAmBwN,SACrB3D,oBAAoB1H,OAAOsT,YAActT,OAAOsT,WAAa5T,OAASnB,UAAY,IAAM,GACxFS,WAAa,GACbqU,WAAY,EACRrT,OAAOsT,YAActT,OAAOsT,WAAa5T,OAASM,OAAOsT,WAAapO,MAClErG,OAAO6R,oBACD7R,OAAOyN,KAAKtM,OAAOsT,mBAEnBzU,OAAOiN,cACPjN,OAAOyN,KAAKtM,OAAOsT,YACzBzU,OAAO8S,SAGf9S,OAAO4U,SACPxV,cAAc,2BAGZyV,iBAAmBlU,uBACfoT,gBAAkB/T,OAAO+T,YACzBe,cAAgB9U,OAAO8U,UACvB5H,eAAiBlN,OAAOkN,cAC1B4H,oBACAhB,aAGA5G,qBACA8F,eAGCe,sBACkB,WAAf/T,OAAOyB,MAAoC,UAAfzB,OAAOyB,MAAmC,MAAfzB,OAAOyB,OAC9DzB,OAAOiN,QACPiG,qBAAqBC,uBAKzBC,QAAUpT,OAAOqT,oBACrBD,EAAIzR,OAAOyR,GAEPA,EAAI/M,gBACJyN,UAIJD,YAAa,EAEbzU,cAAc,aAAc,MAASgU,UAE/BnK,KAAOtH,OAAOyR,EAAE2B,QAAQ,QAE1BC,kBAAoB5B,EAAIvS,OAASnB,aACrCsV,iBAAmBA,iBAAmB,EAAI,EAAIA,iBAC9CnM,oBAAuC,IAAnBmM,kBAEhB9U,sBAIEsN,cAAgB1N,oBAAoBiB,MAAKS,KAAQ4R,EAAItE,cAAciG,QAAQ,IAAMvT,EAAEK,YACjFuR,EAAIpT,OAAOgQ,WAAW+E,QAAQ,IAAMvT,EAAEK,WAAcoH,MAAQzH,EAAEK,YAC1D,GAARL,EAAE4C,KAAYjE,WAAWoM,SAAS5K,OAAOH,EAAE4C,UAE3CoJ,cAAe,IACfrN,WAAa,GACbL,oBAAoB4B,SAAQF,IACpBG,OAAOH,EAAEK,WAAauR,GACtBjT,WAAW6L,KAAKrK,OAAOH,EAAE4C,QAIjC/D,gBAAgBU,KAAK,wBAA0ByM,cAAcpJ,GAAK,YAAYuJ,QAAQ,aACjF1M,SAAS,UACV3B,OACAe,gBAAgBU,KAAK,wBAA0ByM,cAAcpJ,GAAK,+BAC7D4N,QAAQ,QAEjBpE,YAAW,WACPvN,gBAAgBU,KAAK,wBAA0ByM,cAAcpJ,GAAK,YAC7DuJ,QAAQ,YAAYnF,YAAY,UACjClJ,OACAe,gBAAgBU,KAAK,wBAA0ByM,cAAcpJ,GAAK,+BAC7D4N,QAAQ,UAElB,KAEC/R,SAAWuN,cAAcpJ,IAAMnE,kBAI/B8G,sBAICyG,cAAcjL,WAAaiL,cAAc7B,YAC1C9C,qBAAqB2E,cAAc3L,UAAYhB,OAASnB,UAAY,KAChEuJ,KAAOuE,cAAc3L,UAAY7B,OAAOgQ,iBAClChQ,OAAOyN,KAAKD,cAAc3L,WAEpCkL,eAAeS,gBAEXA,cAAcjL,YACV0G,KAAOuE,cAAc3L,UAAY7B,OAAOgQ,iBAClChQ,OAAOyN,KAAKD,cAAc3L,WAEpC1B,WAAW6L,KAAKrK,OAAO6L,cAAcpJ,WAMjDpE,OAAOiV,kBAAmB,OACpBC,QAAUvU,gBACYX,OAAO+T,cAE3Bc,mBACA1B,gBAAkBgC,sBAAsBD,WAGhD/B,gBAAkBgC,sBAAsBD,aACrC,OACqBlV,OAAO+T,aAE3Bc,qBAKNO,OAASzU,UACNwH,cAGLnJ,EAAE,QAAQwJ,YAAY,aAElBxI,OAAOiS,QAAUyC,aACjB1U,OAAOqV,aACPX,YAAa,GAGb1V,EAAE,QAAQO,SAAS,iBAAmBkB,SAASlB,SAAS,eACxDP,EAAE,eAAe2O,QAAQ,SAG7B3O,EAAE,cAAc+B,KAAK,KAAKyH,YAAY,gBAAgBvH,SAAS,iBAC/DjC,EAAE,cAAcuR,KAAK,sBAAuBzI,EAAEsB,KAAKC,WAAW,eAAgB,yBAE1ErK,EAAE,mBAAmBkC,OAAS,GAC9BlC,EAAE,mBAAmB+E,MAAK,iBAChBuR,IAAMtW,EAAEiF,MAAMC,KAAK,MACrBoR,MACAtW,EAAEiF,MAAMuE,YAAY,UACpBpJ,cAAc,mBAAoB,YAAe,IAAOkW,WAKpEtW,EAAE,qBAAqBoO,MAAM,QAC7BpO,EAAE,YAAYqO,IAAI,2BAA2BA,IAAI,WAAWb,SAEvDqH,WAKD1T,WAAa,IAJbsH,WAAW6F,QAAQ,KACnB9F,aAAa8F,QAAQ,KACrBtO,EAAE,YAAYiC,SAAS,aAQ/BgH,QAAQ,CAAC,+BAAiCxB,QAAQ,SAAS8O,aACvDvV,OAAS,IAAIuV,YAC2B,GAApC1V,eAAe+P,mBAA0B5P,OAAO6P,QAAQC,WAExDtI,aAAavG,SAAS,UACtBjC,EAAE,gBAAgBiC,SAAS,6BAC3B2G,kBAAkBY,YAAY,eAElCxI,OAAOwV,KAAKxP,IACRnF,MACAwF,IACA,cAC+D,GAA3CxG,eAAeqS,sCAChB,WACJ,WAC4B,GAA3BrS,eAAe4V,2BAC8B,GAApC5V,eAAe+P,mBAA0B5P,OAAO6P,QAAQC,kBAKrF4F,OAAS1W,EAAE,kBAAkB2W,SACjClV,SAASiC,OAAOgT,QAEhB1W,EAAE2R,UAAUiF,GAAG,QAAS,wBAAwB,SAASlK,GACrDA,EAAEmK,iBACFnK,EAAEoK,2BACF5W,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjF5H,KAAM,oBAKRsU,kBAAoBpV,MAAAA,OAEjByS,IACDA,QAAUpT,OAAOqT,mBAEhBD,SACM,KAEPtT,oBAAqB,OACf0N,cAAgB1N,oBAAoBiB,MAAKS,GAAKG,OAAOH,EAAEK,WAAaF,OAAOyR,EAAE2B,QAAQ,KACrE,GAAfvT,EAAEe,WAA6D,GAAvCoB,KAAKC,MAAMpC,EAAEkC,UAAUsS,cAAwC,GAAnBxU,EAAEO,mBACzEyL,2BACMxN,OAAOiN,cACPjN,OAAOyN,KAAKD,cAAc3L,WAChCkL,eAAeS,eACftO,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjF5H,KAAM,WAEVoH,qBAAqB2E,cAAc3L,UAAYhB,OAASnB,UAAY,MAC7D,SAGR,GAGXV,EAAE2R,UAAUiF,GAAG,cAAcjV,eAAe+K,OACnCvD,aAAepB,eAAiB/G,OAAOmJ,kBAGtCiK,EAAI1H,EAAEuK,cAAc9G,OAAOlG,QAC7BvC,aAAe5G,oBAAqB,OAE9ByN,eAAiBzN,oBAAoByB,QAAOC,GAAKG,OAAOH,EAAEK,WAAaF,OAAOyR,EAAE2B,QAAQ,KACxE,GAAfvT,EAAEe,WAAyC,GAAnBf,EAAEO,mBAC7BwL,eAAerM,OAAS,EAAG,OACrBsM,cAAgBD,eAAe,SAC/BvN,OAAOiN,cACPjN,OAAOyN,KAAKD,cAAc3L,WAChCkL,eAAeS,eACftO,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,+BAAgC,wBAAyB,CACjF5H,KAAM,WAEVoH,qBAAqB2E,cAAc3L,UAAYhB,OAASnB,UAAY,MAG5EqW,kBAAkB3C,MAItBpU,EAAE2R,UAAUiF,GAAG,QAAS,qBAAqB,SAASlK,GAClDA,EAAEmK,iBACFnK,EAAEoK,iCACI1R,GAAKpF,EAAEiF,MAAMC,KAAK,MAClB0G,WAAa9K,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAMA,KACzDpF,EAAEiF,MAAMiS,QAAQ,YAAY1J,SAC5BpN,cAAc,qBAAsB,YAAewL,aACnDmC,eAAenC,YAAY,MAI/B5L,EAAE2R,UAAUiF,GAAG,QAAS,eAAe,SAASlK,MAC5CA,EAAEmK,kBACG1N,uBAKDgO,KAAOxF,SAASyF,eAAe,WACnCpX,EAAE,eAAeiS,YAAY,UACxBxQ,SAASlB,SAAS,cAmBfoR,SAAS0F,eACT1F,SAAS0F,iBACF1F,SAAS2F,oBAChB3F,SAAS2F,sBACF3F,SAAS4F,qBAChB5F,SAAS4F,uBACF5F,SAAS6F,kBAChB7F,SAAS6F,mBAzBTL,KAAKM,kBACLN,KAAKM,oBACEN,KAAKO,qBACZP,KAAKO,uBACEP,KAAKQ,wBACZR,KAAKQ,0BACER,KAAKS,oBACZT,KAAKS,sBACET,KAAKU,sBACZV,KAAKU,yBAEL3X,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,2BAA4B,wBAAyB,CAC7E5H,KAAM,WAGVzC,EAAE,eAAewN,aAe7BxN,EAAE2R,UAAUiF,GAAG,oBAAoBjV,oBAC3BgQ,SAASmG,kBACTrW,SAASQ,SAAS,cAClBjC,EAAE,+BAA+BiC,SAAS,cAC1C0G,cAAc2B,IAAI,iBAAkB,KACpC7I,SAASM,oBAAavB,+BAA6BwS,QAAQ,CACvD+E,UAAW,WACXC,SAAU,WAEdtP,YAAYzG,SAAS,YAAYuH,YAAY,eAC1C,CACH/H,SAAS+H,YAAY,cACrBxJ,EAAE,+BAA+BwJ,YAAY,kBACzC2H,MAAQ,GAAK,EACZtQ,eAAeuQ,eAAiD,GAAhCvQ,eAAeuQ,gBAChDD,MAAQnQ,OAAOqQ,aAEnB1I,cAAc2B,IAAI,iBAAmB,EAAI6G,MAAS,IAAM,KACxDzI,YAAYzG,SAAS,WAAWuH,YAAY,YAEhD/H,SAASM,KAAK,iBAAiBkQ,YAAY,uCAG/CjS,EAAE2R,UAAUiF,GAAG,oBAAoBjV,oBAE3Bd,eAAeoX,aAA6C,GAA9BpX,eAAeoX,YAAkB,KAC1D9O,mBAG2B,UAA5BwI,SAASuG,kBACTlX,OAAOiN,QACP+F,UAAS,QAMrBhU,EAAE2R,UAAUiF,GAAG,QAAS,uBAAuB,SAASlK,GACpDA,EAAEmK,iBACF7W,EAAE,QAAQiS,YAAY,iBACtB3I,aAAa6O,QAAQ,eAAgBnY,EAAE,QAAQO,SAAS,kBACxDP,EAAEiF,MAAMlD,KAAK,KAAKkQ,YAAY,wBAIlCjS,EAAE2R,UAAUiF,GAAG,QAAS,sBAAsBjV,eAAe+K,GACzDA,EAAEmK,iBACFnK,EAAEoK,+BACE7M,WAAajJ,OAAOqT,uBAClBrN,IAAM7E,OAAO6M,SAASoJ,SACxBC,SAAWrR,KAAOA,IAAIyF,QAAQ,KAAO,EAAI,IAAM,KAAO,KAAO5I,KAAK0Q,MAAMtK,MAE5EoO,SAAWA,SAASC,QAAQ,YAAa,UAEnCC,UAAUC,UAAUC,UAAUJ,gBAC9BK,OAAS5P,EAAEsB,KAAKC,WAAW,oBAAqB,wBACtDnK,MAAMwO,IAAIgK,OAAQ,CACdjW,KAAM,UACNsQ,UAAU,EACV4F,MAAO,SAKf3Y,EAAE2R,UAAUiF,GAAG,aAAc,oBAAoB,SAASlK,OACjDvD,mBAGLnJ,EAAEiF,MAAMvB,OAAO,2DACX8P,UAAYxT,EAAE,mBACZ4Y,aAAe5Y,EAAEiF,MAAM4T,SACvBpF,KAAO/G,EAAEoM,MAAQF,aAAajF,KAEpCH,UAAUlJ,IAAI,OAASmJ,KAAQ,YACzB3J,WAAa2J,KAAOzT,EAAEiF,MAAM2O,QAE5BC,cAAgBpK,oBADTK,WAAapJ,WAE1B8S,UAAUzR,KAAK,cAAcmI,KAAK2J,kBAGtC7T,EAAE2R,UAAUiF,GAAG,YAAa,oBAAoB,SAASlK,OAChDvD,yBAGCyP,aAAe5Y,EAAEiF,MAAM4T,SACvBpF,KAAO/G,EAAEoM,MAAQF,aAAajF,KAC9B7J,WAAa2J,KAAOzT,EAAEiF,MAAM2O,QAE5BC,cAAgBpK,oBADTK,WAAapJ,WAE1BV,EAAE,aAAasK,IAAI,OAASmJ,KAAQ,MACpCzT,EAAE,wBAAwBkK,KAAK2J,kBAGnC7T,EAAE2R,UAAUiF,GAAG,aAAc,oBAAoB,WAC7C5W,EAAE,aAAawN,YAInBxN,EAAE2R,UAAUiF,GAAG,QAAS,yDAAyDjV,eAAe+K,GAC5FA,EAAEmK,iBACFnK,EAAEoK,iCACIjU,UAAY7C,EAAEiF,MAAMC,KAAK,sBAEN6R,kBAAkBlU,qBAK3CvB,QAAQ0T,OAAO,KACXhV,EAAEiF,MAAM1E,SAAS,wBAEjBL,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,iCAAkC,wBAAyB,CACnF5H,KAAM,oBAIYzB,OAAOqT,kBACdxR,WAAa5B,oBAC5BK,QAAQgN,QAAQ,KAGpBrN,QAAU,WACaD,OAAOkN,YAE1BlN,OAAOiN,cAELpE,qBAAqBhH,UAAYhB,OAASnB,UAAY,WACtDM,OAAOyN,KAAK9L,OAAOE,kBACnBuC,GAAKpF,EAAEiF,MAAMC,KAAK,MAClBsJ,cAAgB1N,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAMA,KAC5D2I,eAAeS,eACflN,QAAQgN,QAAQ,WAEVyK,eAAiBjY,oBAAoByB,QAAOC,GAAKA,EAAEK,UAAYA,YAAWK,KAAIV,GAAKG,OAAOH,EAAE4C,MAClGjE,WAAa4X,eACb5X,WAAW6L,KAAK5H,IAEhBjE,WAAa,IAAI,IAAIgN,IAAIhN,gBAI7BnB,EAAE2R,UAAUiF,GAAG,QAAS,SAASjV,eAAe+K,OACvCvD,sBAGLuD,EAAEmK,iBACFnK,EAAEoK,2BACE1V,UAAUb,SAAS,wBAEnBL,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,kBAAmB,wBAAyB,CACpE5H,KAAM,WAId+F,aAAa8F,QAAQ,KACrB7F,WAAW6F,QAAQ,WACbsK,aAAe5Y,EAAEiF,MAAM4T,SAEvB/O,YADO4C,EAAEoM,MAAQF,aAAajF,MACV3T,EAAEiF,MAAM2O,cAC5B/J,oBAAiC,IAAbC,YAC1BxI,QAAQ0T,OAAO,WACThU,OAAOyN,KAAM3E,WAAapJ,UAAamB,aACrBb,OAAO+T,cACbF,kBACR7T,OAAO8S,OAEjB3S,WAAa,GACbyN,YAAW,KAEP5O,EAAE,aAAawN,SACflM,QAAQgN,QAAQ,OACjB,QAIPtO,EAAE2R,UAAUiF,GAAG,QAAS,uBAAuBjV,eAAe+K,MAC1DA,EAAEmK,iBACE7W,EAAEiF,MAAM1E,SAAS,UACjByO,SAASgK,cAGbxQ,aAAa8F,QAAQ,KACrBtO,EAAEiF,MAAMhD,SAAS,UACjBb,UAAUoI,YAAY,cAElBxI,OAAO8S,OACT,MAAOjG,aAMb7N,EAAE2R,UAAUiF,GAAG,QAAS,wBAAwBjV,eAAe+K,GAC3DA,EAAEmK,iBACFzW,cAAc,oBACdJ,EAAE,YAAYwN,SAEVxN,EAAE,QAAQO,SAAS,gBACnBP,EAAE,sBAAsB2O,QAAQ,SAChC3O,EAAE,2CAA2CwN,SAC7CxN,EAAE,QAAQwJ,YAAY,cACtBxJ,EAAE,eAAeiC,SAAS,SAG9Bd,WAAa,GACbF,QAAU,KACVK,QAAQ0T,OAAO,WACThU,OAAOyN,KAAK5M,OAClBgI,oBAAoB,GACpBpB,WAAW6F,QAAQ,KACnBtO,EAAEiF,MAAMhD,SAAS,UACjBb,UAAUoI,YAAY,UACtBxI,OAAO8S,OACPxS,QAAQgN,QAAQ,QAIpBtO,EAAE2R,UAAUiF,GAAG,QAAS,+BAA+BjV,eAAe+K,OAC7DvD,sBAGLuD,EAAEmK,iBACE7V,OAAOmJ,OACPqL,WAAY,IAEXA,sBACDxU,OAAO8S,aAIW9S,OAAO+T,kBAEnB/T,OAAOiN,QAEbjN,OAAO8S,UAKf9T,EAAE2R,UAAUiF,GAAG,QAAS,cAAcjV,eAAe+K,OAC5CvD,mBAGLuD,EAAEmK,iBACF7W,EAAEiF,MAAM+N,QAAQ,iBAEMhS,OAAO+T,kBAEnB/T,OAAOiN,YACV,OACWjN,OAAOqT,kBACZhN,IACLoB,WAAW1G,KAAK,YAAY4M,QAAQ,SAEpC3N,OAAO8S,WAKnB9T,EAAE2R,UAAUiF,GAAG,QAAS,WAAWjV,eAAe+K,GAC9CA,EAAEmK,uBACIzR,GAAKpF,EAAEiF,MAAMC,KAAK,MACxBlF,kCAA2BoF,SAAOuJ,QAAQ,SACtC3O,EAAEiF,MAAMiS,QAAQ,2BAA2BhV,OAAS,GACpDlC,EAAE,uBAAuB2O,QAAQ,YAIzC3O,EAAE2R,UAAUiF,GAAG,QAAS,+BAA+B,SAASlK,GAC5DA,EAAEmK,iBACF7W,EAAE,QAAQiC,SAAS,cACnBjC,EAAE,uBAAuBwJ,YAAY,cAE/ByP,QAAUjZ,2CAA2CkF,KAAK,MAC5D+T,SAEA7Y,cAAc,iBAAkB,YAAeU,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAM6T,eAK7FjZ,EAAE2R,UAAUiF,GAAG,QAAS,SAAS,SAASlK,GACtCA,EAAEmK,iBACF7W,EAAEiF,MAAM+N,QAAQ,QAChBhT,EAAEiF,MAAMgN,YAAY,UAChBjS,EAAEiF,MAAM1E,SAAS,WACjBS,OAAOkY,OACPlZ,EAAEiF,MAAMsM,KAAK,sBAAuBzI,EAAEsB,KAAKC,WAAW,gBAAiB,2BAEvErJ,OAAO4U,SACP5V,EAAEiF,MAAMsM,KAAK,sBAAuBzI,EAAEsB,KAAKC,WAAW,cAAe,0BAEzErK,EAAEiF,MAAMlD,KAAK,KAAKkQ,YAAY,+BAC9BjS,EAAEiF,MAAM+N,QAAQ,WAIpBhT,EAAE2R,UAAUiF,GAAG,QAAS,eAAe,SAASlK,GAC5CA,EAAEmK,uBACIsC,KAAOnZ,EAAEiF,MAAMC,KAAK,QAC1BlE,OAAOoY,QAAQD,MACfnZ,EAAE,eAAe+B,KAAK,KAAKyH,YAAY,YACvCxJ,EAAEiF,MAAMlD,KAAK,KAAKE,SAAS,eAI/BjC,EAAE,kBAAkB4W,GAAG,qBAAqBjV,qBACpCuP,cAAgBlQ,OAAOqY,eAC3BrZ,EAAE,kBAAkB8B,YAChBwX,eAAiBpI,QAAQoI,eACN,OAAnBA,iBACAA,eAAiBtZ,EAAEiF,MAAMC,KAAK,gBAE9BqU,UAAYrI,QAAQqI,UACpBC,eAAiBtI,QAAQsI,eAC7BD,UAAU7W,SAAQ,CAAC+W,EAAGjJ,KAClBxQ,EAAE,kBAAkB0D,sFAA+E+V,+DACtEA,GAAKH,eAAiB,WAAa,0BAAiBE,eAAehJ,eAEpGxQ,EAAEiF,MAAMlD,oBAAavB,8BAA4BkZ,SAAS,aAG9D1Z,EAAE2R,UAAUiF,GAAG,QAAS,kBAAkB,SAASlK,GAC/CA,EAAEmK,uBACI3F,QAAUlR,EAAEiF,MAAMC,KAAK,WAC7BlE,OAAO2Y,WAAWzI,SAClBlR,EAAE,kBAAkB+B,KAAK,KAAKyH,YAAY,YAC1CxJ,EAAEiF,MAAMlD,KAAK,KAAKE,SAAS,eAG/BjC,EAAE2R,UAAUiF,GAAG,QAAS,iCAAiC,SAASlK,GAC9DA,EAAEmK,uBACIlG,KAAO3Q,EAAEiF,MAAMC,KAAK,QAC1BlE,OAAO4Y,WAAWjJ,MAClB3Q,EAAE,iCAAiC+B,KAAK,KAAKyH,YAAY,YACzDxJ,EAAEiF,MAAMlD,KAAK,KAAKE,SAAS,YACf,IAAR0O,KACA3Q,EAAE,yBAAyBwJ,YAAY,oBAAoBvH,SAAS,eAEpEjC,EAAE,yBAAyBwJ,YAAY,eAAevH,SAAS,oBAGnEqH,aAAa6O,0BAAmB/Q,QAAUuJ,SAG9C3Q,EAAE2R,UAAUkI,IAAI,kBAAkB,WAC9BpH,aAGJzS,EAAE2R,UAAUiF,GAAG,sBAAsB,WACjCzN,aAAc,WAGZ2Q,gBAAkB,WACpB9Z,EAAE2R,UAAUiF,GAAG,mBAAmB,WAE9B5W,EAAE,YAAYwN,SACdpN,cAAc,eACd4T,cAGJhU,EAAE2R,UAAUiF,GAAG,oBAAoB,WAC/BjB,eAGJ3V,EAAE2R,UAAUiF,GAAG,iBAAiB,WAC5BR,SACA9U,QAAQgN,QAAQ,QAGpBtO,EAAE2R,UAAUiF,GAAG,kBAAkB,WAC7B9B,aAGJ9U,EAAE2R,UAAUiF,GAAG,iBAAiB,SAASlK,GACjC1L,OAAOmJ,MAGXoL,OAAO7I,EAAEyD,OAAOlG,SAGpBjK,EAAE2R,UAAUiF,GAAG,mBAAmB,SAASlK,SACjCsD,SAAWtD,EAAEyD,OAAOH,WAAY,EACtCD,SAASC,SAAUtD,MAGvB1M,EAAE2R,UAAUiF,GAAG,kBAAkB,WAC7BhO,kBAAkBY,YAAY,cAC9BhB,aAAavG,SAAS,UACtBjC,EAAE,gBAAgBiC,SAAS,6BAC3BjC,EAAE,YAAYwN,SACVxN,EAAE,WAAW+Z,GAAG,UAChB/Z,EAAE,WAAWqQ,0LAEDvH,EAAEC,IAAI2B,+GAGlBxK,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,6BAA8B,wBAAyB,CAC/E5H,KAAM,cAKlBzC,EAAE2R,UAAUiF,GAAG,uBAAuB,SAASlK,GAC3C1M,EAAE,eAAe+B,KAAK,KAAKyH,YAAY,YACvCxJ,mCAA4B0M,EAAEuK,cAAc9G,OAAOgJ,YAAUpX,KAAK,KAAKE,SAAS,eAGpFjC,EAAE2R,UAAUiF,GAAG,0BAA0B,SAASlK,GAC9C1M,EAAE,kBAAkBuR,KAAK,eAAgB7E,EAAEuK,cAAc9G,OAAOe,SAChElR,EAAE,kBAAkB+B,KAAK,KAAKyH,YAAY,YAC1CxJ,yCAAkC0M,EAAEuK,cAAc9G,OAAOe,eAAanP,KAAK,KAAKE,SAAS,gBAIjG6X,kBAEA9Z,EAAE2R,UAAUiF,GAAG,2BAA2B,eAElCnV,SAASM,oBAAavB,+BAA6BwS,QAAQ,CACvD+E,UAAW,WACXC,SAAU,WAEhB,MAAOnK,WAGmD,GAAxDhN,eAAemZ,uCACf3Y,gBAAgBU,KAAK,sBAAsBE,SAAS,YAEV,GAA1CpB,eAAeoZ,yBACf5Y,gBAAgBU,KAAK,MAAME,SAAS,YAEH,GAAjCpB,eAAemB,iBACfX,gBAAgBU,KAAK,MAAME,SAAS,YACpCb,UAAUa,SAAS,aAEnBZ,gBAAgBU,KAAK,MAAMG,OAAS,GACpCoG,UAAUkB,YAAY,YAGrBL,cACDA,aAAc,IAIbpB,gBAAkByN,UAAW,KAC1BiB,SAAsC,GAA3B5V,eAAe4V,SAC1BxM,KAAOpI,MACP7B,EAAE,kBAAkBO,SAAS,cAC7BkW,UAAW,IAEVrN,UAAU8Q,WAAarY,OAASuH,UAAU8Q,WAAa7S,IAAM,GAAMM,UACpE8O,UAAW,EACXxM,KAAOtC,OAAShF,OAAOgF,QAAUyB,UAAU8Q,WAC3CjQ,KAAOA,MAAQ5C,KAAO4C,KAAOpI,MAAQA,MAAQoI,MAEjD9H,OAAOsT,WAAaxL,KACpBJ,qBAAsBI,KAAOpI,OAASnB,UAAa,KAC/CM,OAAOmJ,MACPN,oBAAoB,WAIlBsQ,WADY,IAAIpL,gBAAgB5M,OAAO6M,SAASC,QACzBzC,IAAI,MAC7BiK,UAAYzV,OAAO6R,eAA+B,KAAdsH,YACpCvL,YAAWjN,cAGHX,OAAO4U,SACT,MAAO/H,QAGJlG,QACD3H,EAAE,SAAS2O,QAAQ,WAExB,KAEPE,kBAIR7O,iBAAUQ,+BAA6BoW,GAAG,SAAS,iBACzCwD,MAAQpa,EAAEiF,MAChB2J,YAAW,WACPwL,MAAMpH,QAAQ,UACf,QAGP7Q,OAAOkY,iBAAiB,gBAAgB,WACpCrZ,OAAOiN,QACP+F,UAAS,GAEThU,EAAE2R,UAAU2I,MACZpG,qBAAqBC,oBAGzBnU,EAAE2R,UAAUiF,GAAG,kBAAkB,SAASlK,SAChCd,WAAac,EAAEuK,cAAc9G,OAAOvE,eAEtC2O,YAAcpY,OAAOgL,MACrBqN,WAAaD,YAAYxY,MAAKS,GAAKA,EAAE4C,IAAMwG,WAAWxG,KAEtDoV,aACAA,WAAWC,UAAYD,WAAWC,UAAYD,WAAWC,WAAY,IAAI5U,MAAO6U,UAChFF,WAAWG,cAAe,IAAI9U,MAAO6U,UACrCF,WAAWI,cAAgBJ,WAAWI,cAAgBJ,WAAWI,cAAgB,KACjFJ,WAAW7K,SAAW6K,WAAW7K,SAAW,EAAI6K,WAAW7K,SAAW,GAG1E4K,YAAcA,YAAYhY,QAAOC,GAAKA,EAAE4C,IAAMwG,WAAWxG,KACzDmV,YAAYvN,KAAKwN,YACjBrY,OAAOgL,MAAQoN,eAGnBva,EAAE2R,UAAUiF,GAAG,uCAAuC,SAASlK,SACrDd,WAAac,EAAEuK,cAAc9G,OAAOvE,eAEtC2O,YAAcpY,OAAOgL,MACrBqN,WAAaD,YAAYxY,MAAKS,GAAKA,EAAE4C,IAAMwG,WAAWxG,KAEtDoV,aACAA,WAAW7K,SAAW6K,WAAW7K,WAAY,IAAI9J,MAAO6U,UAAYF,WAAWG,eAGnFJ,YAAcA,YAAYhY,QAAOC,GAAKA,EAAE4C,IAAMwG,WAAWxG,KACzDmV,YAAYvN,KAAKwN,YACjBrY,OAAOgL,MAAQoN,eAGnBva,EAAE2R,UAAUiF,GAAG,qBAAqB,SAASlK,MACnB/H,KAAKC,MAAM8H,EAAEuK,cAAc9G,OAAOkF,UAAUC,mBAE1D3Q,KAAKC,MAAM8H,EAAEuK,cAAc9G,OAAOkF,UAAUC,gBAAkB,EAAG,IAC7DtN,mBAGJA,aAAc,EACdtC,eACAxF,MAAMwO,IAAI5F,EAAEsB,KAAKC,WAAW,yCAA0C,wBAAyB,CAC3F5H,KAAM,YAEVzC,EAAE,uBAAuBqQ,0EAEzBrI,aAAc,EACdhI,EAAE,uBAAuBqQ,oEAG3BzE,WAAac,EAAEuK,cAAc9G,OAAO0K,WACrCjP,sBAGD2O,YAAcpY,OAAOgL,MACrBqN,WAAaD,YAAYxY,MAAKS,GAAKA,EAAE4C,IAAMwG,WAAWxG,KACtDoV,aACqC,aAAjC9N,EAAEuK,cAAc9G,OAAOtF,OACvB2P,WAAWI,eAAgB,IAAI/U,MAAO6U,UAEtCF,WAAWI,cAAgB,MAInCL,YAAcA,YAAYhY,QAAOC,GAAKA,EAAE4C,IAAMwG,WAAWxG,KACzDmV,YAAYvN,KAAKwN,YACjBrY,OAAOgL,MAAQoN,YAGfva,EAAE,oBAAsB4L,WAAWxG,GAAK,KAAKnD,SAAS,cAClD6Y,KAAOha,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAMwG,WAAWxG,KACxDV,SAAWoW,KAAKpW,SACpBA,SAAWA,SAAWC,KAAKC,MAAMF,UAAY,GACd,GAA3BA,SAASqW,gBAAuBD,KAAKvX,UACrCvD,EAAE,kDACGwJ,YAAY,uBACiB,GAA3B9E,SAASqW,gBAAwBD,KAAKvX,YAC7CmF,YAAYzG,SAAS,uBACyB,UAA1CjC,EAAE,mBAAmBkF,KAAK,cAAsE,QAA1ClF,EAAE,mBAAmBkF,KAAK,cAChFlF,EAAE,kBAAkBiC,SAAS,uBAEa,QAA1CjC,EAAE,mBAAmBkF,KAAK,cAC1BlF,EAAE,qBAAqBiC,SAAS,wBAGpC6Y,KAAKvX,UACLvD,EAAE,6BAA+B4L,WAAWxG,GAAK,KAAKnD,SAAS,aAE/DjC,EAAE,6BAA+B4L,WAAWxG,GAAK,KAAKoE,YAAY,gBAI1ExJ,EAAE2R,UAAUiF,GAAG,sBAAsB,SAASlK,GAC1CA,EAAEmK,kBAC+C,IAA7CnK,EAAEuK,cAAc9G,OAAO6K,mBACvBhb,EAAE,gBAAgBwN,SAGlBxN,EAAE,mBAAmBkC,SAGzBlC,EAAE,QAAQ0D,iDAA0ClD,kEACtCsI,EAAEsB,KAAKC,WAAW,kBAAmB,0IAEnDrK,EAAE,mBAAmBgT,QAAQ,QAC7BhT,EAAE2R,UAAUiF,GAAG,QAAS,mBAAmB,WACvC5W,EAAE,mBAAmBgT,QAAQ,QAC7BhT,EAAEiF,MAAMqJ,QAAQ,IAAK,SAAS,WAC1BtO,EAAEiF,MAAMuI,yBAKdyN,aAAetZ,MAAAA,YACjBX,OAASka,UACTrZ,MAAQqZ,UAAUrZ,MAClBwF,IAAM6T,UAAU7T,IAChBI,MAAQyT,UAAUzY,KAClBoN,QAAS,MAELsL,MAAQzP,OAAO0P,KAAK/a,yBACX0J,QAAQ0D,IAAI0N,MAAMjY,KAAIvB,MAAAA,MACxBtB,WAAWoC,MAAM4Y,UAAUH,UAAWrZ,MAAOwF,IAAKI,WAIjEzH,EAAE2R,UAAUiF,GAAG,mBAAmBjV,eAAe+K,GAC7CvD,aAAc,EACdhI,WAAa,GACbF,QAAU,KACV4T,YAAa,MACT1E,OAASzD,EAAEuK,cAAc9G,OAEzBjP,SADmB,UAAnBiP,OAAOmC,WACKnC,OAAOuC,KAKnBvC,OAAOnP,SACPmP,OAAOnP,OAAOE,SAAWA,eACnB+Z,aAAa9K,OAAOnP,OAAQmP,OAAOmC,WAG7CG,SAAQ,EAAMtC,OAAOuC,MACrB7I,oBAAoBsG,OAAOmL,aAAejU,IAAMxF,OAAS,QAG7D7B,EAAE2R,UAAUiF,GAAG,QAAS,yCAAyC,SAASlK,GACtEA,EAAEmK,iBACF7W,EAAEiF,MAAMhD,SAAS,UAEjB7B,cAAc,iBAAkB,YAAeU,oBAAoBiB,MAAKS,GAAKA,EAAE4C,IAAMpF,EAAEiF,MAAMC,KAAK,aAItGyM,SAAS0I,iBAAiB,WAAW1Y,eAAe+K,MAG9B,SADAiF,SAAS4J,cAAcC,QAAQC,gBAK7Czb,EAAE,QAAQO,SAAS,gBAInBmM,EAAEgP,SAAWhP,EAAEiP,SAAWjP,EAAEkP,WAIjB,UAAXlP,EAAE+D,KACF/D,EAAEmK,uBACQ7V,OAAOkN,WACblN,OAAO8S,OAEP9S,OAAOiN,aAER,GAAe,SAAXvB,EAAE+D,KACT/D,EAAEmK,iBACF7W,EAAE,uBAAuB2O,QAAQ,cAC9B,GAAe,SAAXjC,EAAE+D,QACT/D,EAAEmK,iBACE7W,EAAE,SAASkC,OAAS,EACpBlC,EAAE,SAAS2O,QAAQ,aAChB,OACmB3N,OAAO6a,UAEzB7a,OAAO4U,SAEP5U,OAAOkY,WAGG,SAAXxM,EAAE+D,MACT/D,EAAEmK,iBACF7W,EAAE,eAAe2O,QAAQ,UACP,SAAXjC,EAAE+D,MACT/D,EAAEmK,iBACFpO,WAAW1G,KAAK,YAAY4M,QAAQ,UAClB,SAAXjC,EAAE+D,MACT/D,EAAEmK,iBACFnO,YAAY3G,KAAK,UAAU4M,QAAQ,UACjB,SAAXjC,EAAE+D,OACT/D,EAAEmK,iBACEnO,YAAY3G,KAAK,WAAWG,OAAS,EACrCwG,YAAY3G,KAAK,WAAW4M,QAAQ,UAEpC3O,EAAE,QAAQiS,YAAY,iBACtB3I,aAAa6O,QAAQ,eAAgBnY,EAAE,QAAQO,SAAS"}