{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun; // Last run annotation.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        releventAnnotations = annos;\n        window.IVANNO = annos;\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.earned)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        if (actualAnnotationCounts > 0) {\n            $(\".metadata\").append(`<span class=\"d-inline-block mr-3\">\n            <i class=\"bi bi-stopwatch mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block mr-3\">\n        <i class=\"bi bi-bullseye mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        $(\"#interactions-nav ul\").empty();\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment' && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            $('[data-region=\"chapterlists\"] li').each(function() {\n                const cstart = $(this).data('start');\n                const cend = $(this).data('end');\n                if (x.timestamp >= cstart && x.timestamp < cend) {\n                    $(this).find('.annolistinchapter')\n                        .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star ml-1\"></i></span></li>`);\n                }\n            });\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null) {\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $('#controller #expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $('body').addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    let time = percentage / 100 * totaltime;\n                    $('#currenttime').text(convertSecondsToHMS(time));\n                    $('#remainingtime').text(convertSecondsToHMS(totaltime - time));\n                    $videoNav.find('#progress').css('width', percentage + '%');\n                    $videoNav.find('#seekhead').css('left', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: $('body').hasClass('preview-mode') ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n                    window.ANNOS = releventAnnotations;\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, end - start);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            annotation.earned = Number(JSON.parse(completionitem).xp);\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion);\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @returns {void}\n             */\n            const runInteraction = async(annotation) => {\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`#message[data-id=${annotation.id}]`).length > 0) {\n                    if (!$('body').hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                        // Switch to the annotation tab.\n                        $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                    }\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                    }, 100);\n                }\n\n                dispatchEvent('interactionrun', {'annotation': annotation});\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            let lookbacktime = 0;\n\n            const onLoaded = async() => {\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                lookbacktime = Math.max(0.5, player.frequency); // How far back to look for annotations.\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                const duration = player.totaltime;\n                ({start, end} = await updateTime(duration));\n                totaltime = end - start;\n\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '55px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $('#wrapper').attr('data-ratio', ratio);\n                $('#wrapper').attr('data-gap', gap);\n\n                $('#start-screen #start').focus();\n\n                // Resize observer\n                let vwrapper = document.querySelector('#video-wrapper');\n                const resizeObserver = new ResizeObserver(() => {\n                    // If vwrapper is larger than 1050px, show #expand; otherwise, hide it.\n                    if (vwrapper.clientWidth > 1050) {\n                        $('#controller #expand').removeClass('d-none');\n                    } else {\n                        $('#controller #expand').addClass('d-none');\n                    }\n                });\n\n                resizeObserver.observe(vwrapper);\n\n                // Scroll into view #video-wrapper\n                if ($('body').hasClass('embed-mode')) {\n                    return;\n                }\n                vwrapper.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async() => {\n                if ((window.braveEthereum || window.braveSolana) && !player.allowAutoplay) {\n                    player.destroy();\n                    Toast.add(M.util.get_string('braveautoplay', 'mod_interactivevideo'), {\n                        type: 'danger',\n                        autohide: false,\n                    });\n                    setTimeout(() => {\n                        $('#toast-0').css('margin-top', '70px');\n                        $('#interactivevideo-container').addClass('no-pointer-events');\n                        $('#autoplay-error').tooltip('hide');\n                        $('#autoplay-error').remove();\n                    }, 500);\n                    return;\n                }\n                player.pause();\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    await player.seek(start);\n                    onReady();\n                    return;\n                }\n\n                if (!loaded) {\n                    await onLoaded();\n                }\n\n                if (player.audio) {\n                    $('#annotation-canvas').addClass('bg-black');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#annotation-canvas\").removeClass('d-none');\n\n                await getAnnotations();\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': async function(event, ui) {\n                        const isPaused = await player.isPaused();\n                        if (!isPaused) {\n                            player.pause();\n                        }\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                        $(\"#end-screen\").fadeOut(300);\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        const percentage = relX / $(this).width();\n                        const time = percentage * totaltime;\n                        const formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        await replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                    },\n                    'stop': async function() {\n                        // Reset the launched annotation.\n                        lastrun = null;\n                        viewedAnno = [];\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n                dispatchEvent('timeupdate', {'time': start});\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#controller').addClass('opacity-1');\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                let t = await player.getCurrentTime();\n                let watchedpoint = Math.round(t);\n                // Make sure the watchedpoint is not the same as the last saved point or so close to it.\n                if (watchedpoint <= start + 1 || watchedpoint >= end - 1 || Math.abs(watchedpoint - lastSaved) < 5) {\n                    return;\n                }\n                lastSaved = watchedpoint;\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'update_watchedpoint',\n                        sesskey: M.cfg.sesskey,\n                        completionid: completionid,\n                        watchedpoint: watchedpoint,\n                        contextid: M.cfg.contextid\n                    },\n                });\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (!firstPlay) {\n                    // If seeking before the first play, then we need to set the resumetime to the current time.\n                    window.resumetime = t;\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) < t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                // Initialize the player visualizer for html5 audio.\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                // Force fullscreen for mobile themes and mobile devices.\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n\n                if ($('#message.active').length > 0) {\n                    const mid = $('#message.active').data('id');\n                    if (mid) {\n                        $('#message').removeClass('active');\n                        dispatchEvent('interactionclose', {'annotation': {'id': mid}});\n                    }\n                }\n\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n                if (!videoEnded) {\n                    $('#end-screen, #start-screen').fadeOut(300);\n                    $('#restart').addClass('d-none');\n                } else {\n                    viewedAnno = [];\n                }\n                if (!firstPlay) {\n                    $('#autoplay-error').tooltip('hide');\n                    $('#autoplay-error').remove();\n                    replaceProgressBars(window.resumetime ? (window.resumetime - start) / totaltime * 100 : 0);\n                    viewedAnno = [];\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        await player.seek(window.resumetime);\n                    }\n                    player.unMute();\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded(end);\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube' || player.type == 'yt') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    let t = await player.getCurrentTime();\n                    t = Number(t);\n\n                    if (t > end) {\n                        onEnded(end);\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    replaceProgressBars(percentagePlayed * 100);\n                    const theAnnotation = releventAnnotations.find(x => (((t - lookbacktime).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        viewedAnno = [];\n                        releventAnnotations.forEach(x => {\n                            if (Number(x.timestamp) < t) {\n                                viewedAnno.push(Number(x.id));\n                            }\n                        });\n\n                        $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        setTimeout(function() {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if ($('body').hasClass('preview-mode')) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                            if (time < theAnnotation.timestamp - player.frequency) {\n                                await player.seek(theAnnotation.timestamp);\n                            }\n                            runInteraction(theAnnotation);\n                        } else {\n                            if (theAnnotation.completed) {\n                                if (time < theAnnotation.timestamp - player.frequency) {\n                                    await player.seek(theAnnotation.timestamp);\n                                }\n                                viewedAnno.push(Number(theAnnotation.id));\n                            }\n                            // Player.play();\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            // Implement the player\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('timeupdate', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                    }\n                }\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                dispatchEvent('interactionrefresh', {'annotation': annotation});\n                runInteraction(annotation);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $('#controller').addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $('#controller').addClass('bg-dark').removeClass('bg-black');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            let idleInterval = null;\n            $(document).on('visibilitychange', async function() {\n                // Pause video when the tab is not visible and the pauseonblur option is enabled.\n                if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                    }\n                }\n\n                if (document.visibilityState == 'hidden') {\n                    // Destroy the player if the tab is hidden and the video isn't playing for more than 30/5 minutes.\n                    // Check if the player is paused and the user is not interacting with the player.\n                    idleInterval = setInterval(async() => {\n                        const isPaused = await player.isPaused();\n                        if (isPaused || videoEnded || !playerReady || !player || !firstPlay) {\n                            // Destroy the player.\n                            try {\n                                player.destroy();\n                            } catch (error) {\n                                // Do nothing.\n                            }\n                            cancelAnimationFrame(playingInterval);\n                            clearInterval(idleInterval);\n                            $(document).off();\n                            if (!videoEnded) {\n                                $('#start-screen').show().removeClass('d-none').addClass('idled');\n                                $('#start-screen #play').removeClass('d-none');\n                            }\n                            $(document).on('click', '#start-screen #play, #endscreen #restart', function(e) {\n                                e.preventDefault();\n                                location.reload();\n                            });\n                            $('#controller').addClass('no-pointer-events');\n                            Toast.add(M.util.get_string('idlealert', 'mod_interactivevideo'), {\n                                type: 'danger',\n                                autohide: false,\n                                closeButton: true,\n                            });\n                        }\n                    }, 60 * 1000 * (videoEnded ? 5 : 30)); // 30 minutes if the video is playing, 5 minutes if the video has ended.\n                } else {\n                    // Cancel the destroy player timeout.\n                    clearInterval(idleInterval);\n                }\n            });\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const $this = $(this);\n                $this.find('i').toggleClass('bi-share-fill bi-share');\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                let shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Remove the embed parameter if it exists.\n                shareurl = shareurl.replace(/&embed=1/g, '');\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                $this.attr('data-original-title', M.util.get_string(\"copied\", \"mod_interactivevideo\")).tooltip('show');\n                setTimeout(function() {\n                    // Change tooltip back to share.\n                    $this\n                        .attr('data-original-title', M.util.get_string(\"sharethismoment\", \"mod_interactivevideo\"))\n                        .tooltip('hide');\n                    $this.find('i').toggleClass('bi-share-fill bi-share');\n                }, 2000);\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const timestamp = $(this).data('timestamp');\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    player.pause();\n                }\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                const isPlaying = await player.isPlaying();\n                if (!isPlaying || videoEnded) {\n                    await player.play();\n                }\n                lastrun = null;\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                if ($(this).hasClass('reload')) {\n                    location.reload();\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                $('body').removeClass('hassidebar');\n                $('#annotation-sidebar, #annotation-toggle').remove();\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                replaceProgressBars(0);\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                if (!firstPlay) {\n                    player.play();\n                    return;\n                }\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $('body').addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n                // Get the active annotation.\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    // Dispatch the interaction run event.\n                    dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == current)});\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item text-white changequality\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw ml-n3\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find('[data-toggle=dropdown]').dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', async function() {\n                // Remove the tooltip.\n                $('.tooltip').remove();\n                dispatchEvent('videoPaused');\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n                $loader.fadeOut(300);\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerLoaded', function(e) {\n                onLoaded(e.detail);\n                const captions = e.detail.tracks;\n                if (!captions || captions.length == 0) {\n                    return;\n                }\n                $('#changecaption').removeClass('d-none');\n                $('#changecaption .dropdown-menu')\n                    .html(`<a class=\"dropdown-item text-white changecaption\"\n                     data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check ml-n3\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                captions.forEach(caption => {\n                    $('#changecaption .dropdown-menu')\n                        .append(`<a class=\"dropdown-item text-white changecaption\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw ml-n3\"></i>${caption.label}</a>`);\n                });\n\n                const lang = localStorage.getItem(`caption-${userid}`);\n                if (lang && lang.length) {\n                    $('#changecaption .changecaption[data-lang=\"' + lang + '\"]').trigger('click');\n                }\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#annotation-canvas').removeClass('d-none');\n                $('#start-screen').addClass('d-none');\n                $('.video-block').addClass('no-pointer bg-transparent');\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                    container: '#wrapper',\n                    boundary: 'window',\n                });\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $('#taskinfo').removeClass('border-0');\n                }\n\n                if (!playerReady) {\n                    playerReady = true;\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!$('body').hasClass('preview-mode') && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    window.resumetime = time;\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    if (autoplay && player.allowAutoplay) {\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            player.unMute();\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            window.addEventListener('beforeunload', function() {\n                player.pause();\n                onPaused();\n                // Remove all event listeners before unload.\n                $(document).off();\n                cancelAnimationFrame(playingInterval);\n            });\n\n            $(document).on('interactionrun', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    windowAnno.starttime = windowAnno.starttime ? windowAnno.starttime : new Date().getTime();\n                    windowAnno.newstarttime = new Date().getTime();\n                    windowAnno.completedtime = windowAnno.completedtime ? windowAnno.completedtime : null;\n                    windowAnno.duration = windowAnno.duration > 0 ? windowAnno.duration : 0;\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('interactionclose interactionrefresh', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    windowAnno.duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('completionupdated', function(e) {\n                const annotation = e.originalEvent.detail.target;\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    if (e.originalEvent.detail.action == 'mark-done') {\n                        windowAnno.completedtime = new Date().getTime();\n                    } else {\n                        windowAnno.completedtime = null;\n                    }\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('iv:autoplayBlocked', function(e) {\n                e.preventDefault();\n                if (e.originalEvent.detail.requireVideoBlock === false) {\n                    $('.video-block').remove();\n                }\n                // Append a error button.\n                $('body').append(`<button id=\"autoplay-error\" data-toggle=\"tooltip\"\n                     title=\"${M.util.get_string('autoplayblocked', 'mod_interactivevideo')}\"\n                    class=\"btn btn-danger btn rounded-circle pulse\"><i class=\"bi bi-ban\"></i></button>`);\n                $('#autoplay-error').tooltip('show');\n                $(document).on('click', '#autoplay-error', function() {\n                    $('#autoplay-error').tooltip('hide');\n                    $(this).fadeOut(300, 'swing', function() {\n                        $(this).remove();\n                    });\n                });\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","dispatchEvent","ctRenderer","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","viewedAnno","$videoNav","$interactionNav","$loader","renderAnnotationItems","async","annos","start","window","IVANNO","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","each","cstart","this","data","cend","find","id","JSON","parse","prop","icon","formattedtitle","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isNaN","playerReady","uprogress","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","time","text","css","getAnnotations","annnoitems","ajax","M","cfg","wwwroot","method","dataType","action","sesskey","contextid","courseContextId","userprogress","uid","previewmode","hasClass","getContentTypes","when","done","progress","ct","completiondetails","Object","values","annotation","some","y","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","advanced","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","getRelevantAnnotations","ANNOS","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","all","contentType","require","amdmodule","Type","error","initializeContentTypeRenderers","toggleClass","runInteraction","pause","isPaused","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","lookbacktime","onLoaded","passwordprotected","support","password","IVPLAYER","max","frequency","playbackrate","quality","ratio","usefixedratio","aspectratio","gap","attr","focus","vwrapper","document","querySelector","ResizeObserver","clientWidth","observe","scrollIntoView","behavior","block","inline","onReady","braveEthereum","braveSolana","allowAutoplay","destroy","autohide","tooltip","audio","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","abs","videoEnded","onEnded","isPlaying","fadeIn","onSeek","firstPlay","resumetime","visualized","onPlaying","visualizer","mid","unMute","intervalFunction","isEnded","toFixed","percentagePlayed","useAnimationFrame","animate","requestAnimationFrame","VideoPlayer","load","useoriginalvideocontrols","autoplay","$toast","detach","on","originalEvent","detail","preventDefault","stopImmediatePropagation","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","container","boundary","idleInterval","pauseonblur","visibilityState","setInterval","clearInterval","off","show","reload","closeButton","setItem","$this","href","shareurl","replace","navigator","clipboard","writeText","parentOffset","offset","pageX","preceedingAnno","current","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","lang","setCaption","captions","tracks","html","caption","code","label","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","addEventListener","windowAnnos","windowAnno","starttime","Date","getTime","newstarttime","completedtime","target","requireVideoBlock"],"mappings":"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"}