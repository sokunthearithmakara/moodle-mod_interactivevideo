{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/quickform', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast, quickform) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    const isBS5 = $('body').hasClass('bs-5');\n    const bsAffix = isBS5 ? '-bs' : '';\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun; // Last run annotation.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        releventAnnotations = annos;\n        window.IVANNO = annos;\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.earned)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        if (actualAnnotationCounts > 0) {\n            $(\".metadata\").append(`<span class=\"d-inline-block iv-mr-3\">\n            <i class=\"bi bi-stopwatch iv-mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block iv-mr-3\">\n        <i class=\"bi bi-bullseye iv-mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star iv-mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        $(\"#interactions-nav ul\").empty();\n        $(\"#video-nav ul\").empty();\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        // Handle the chapter list.\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment'\n            && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            const advanced = JSON.parse(x.advanced);\n            if ((advanced.visiblebeforecompleted == \"1\" && !x.completed)\n                || (advanced.visibleaftercompleted == \"1\" && x.completed)) {\n                $('[data-region=\"chapterlists\"] li').each(function() {\n                    const cstart = $(this).data('start');\n                    const cend = $(this).data('end');\n                    if (x.timestamp >= cstart && x.timestamp < cend) {\n                        $(this).find('.annolistinchapter')\n                            .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} iv-mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} iv-mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star iv-ml-1\"></i></span></li>`);\n                    }\n                });\n            }\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    const fireConfetti = () => {\n\n        var duration = 5 * 1000;\n        let confetti = window.confetti;\n        var animationEnd = Date.now() + duration;\n        var defaults = {startVelocity: 30, spread: 360, ticks: 60, zIndex: 1055, shapes: ['circle', 'square', 'star']};\n\n        const randomInRange = (min, max) => {\n            return Math.random() * (max - min) + min;\n        };\n\n        var interval = setInterval(function() {\n            var timeLeft = animationEnd - Date.now();\n\n            if (timeLeft <= 0) {\n                return clearInterval(interval);\n            }\n\n            var particleCount = 50 * (timeLeft / duration);\n            // Since particles fall down, start a bit higher than random\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.1, 0.3), y: Math.random() - 0.2}});\n            confetti({...defaults, particleCount, origin: {x: randomInRange(0.7, 0.9), y: Math.random() - 0.2}});\n        }, 250);\n    };\n\n    window.fireConfetti = fireConfetti;\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @param {boolean} isPreviewMode - The preview mode flag.\n         * @param {boolean} isCompleted - The completed flag.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null, isPreviewMode = false,\n            isCompleted = false) {\n\n            quickform({\n                contextid: M.cfg.contextid,\n                courseid: course,\n                cmid,\n                interaction,\n            });\n\n            require(['theme_boost/bootstrap/modal']);\n            require(['theme_boost/bootstrap/tooltip']);\n\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n            let timeended = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $('#controller #expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $('body').addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    let time = percentage / 100 * totaltime;\n                    $('#currenttime').text(convertSecondsToHMS(time));\n                    $('#remainingtime').text(convertSecondsToHMS(totaltime - time));\n                    $videoNav.find('#progress').css('width', percentage + '%');\n                    $videoNav.find('#seekhead').css('left', percentage + '%');\n                    $('#lightprogressbar').css('width', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: isPreviewMode ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    if (player.live) { // Live video does not have end time.\n                        annotations = [];\n                    }\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    timeended = progress.timeended;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n                    window.ANNOS = releventAnnotations;\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, end - start);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            annotation.earned = Number(JSON.parse(completionitem).xp);\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                            if (isPreviewMode) {\n                                annotation.completed = true;\n                                annotation.previewMode = true;\n                            }\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion, {\n                                    isPreviewMode,\n                                    isCompleted,\n                                });\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @param {boolean} force force run the interaction\n             * @returns {void}\n             */\n            const runInteraction = async(annotation, force = false) => {\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`.sidebar-nav-item[data-id=${annotation.id}]`).length > 0 && !force) {\n                    if (!$('body').hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                    }\n                    $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                        // In case there is an active interaction, trigger the interactionclose event.\n                        if ($('#message.active').length > 0) {\n                            $('#message.active').each(function() {\n                                const id = $(this).data('id');\n                                if (id != annotation.id) {\n                                    $(this).removeClass('active');\n                                    dispatchEvent('interactionclose', {'annotation': {'id': id}});\n                                }\n                            });\n                        }\n                        dispatchEvent('interactionrun', {'annotation': annotation});\n                    }, 100);\n                }\n\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            cmid: cmid,\n                            courseid: course,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            let lookbacktime = 0;\n\n            const onLoaded = async() => {\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                lookbacktime = Math.max(0.5, player.frequency); // How far back to look for annotations.\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                const duration = player.totaltime;\n                ({start, end} = await updateTime(duration));\n                totaltime = end - start;\n\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '55px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $('#wrapper').attr('data-ratio', ratio);\n                $('#wrapper').attr('data-gap', gap);\n\n                $('#start-screen #start').focus();\n\n                // Resize observer\n                let vwrapper = document.querySelector('#video-wrapper');\n                const resizeObserver = new ResizeObserver(() => {\n                    // If vwrapper is larger than 1050px, show #expand; otherwise, hide it.\n                    if (vwrapper.clientWidth > 1050) {\n                        $('#controller #expand').removeClass('d-none');\n                    } else {\n                        $('#controller #expand').addClass('d-none');\n                    }\n                });\n\n                resizeObserver.observe(vwrapper);\n\n                // Scroll into view #video-wrapper\n                if ($('body').hasClass('embed-mode')) {\n                    return;\n                }\n                vwrapper.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n\n                if (player.live) {\n                    // Remove the slash.\n                    $('#currenttime').next().remove();\n                    $('#currenttime').remove();\n                    $('#duration').text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $('#remainingtime').text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $('#taskinfo').addClass('no-pointer-events');\n                    end = Number.MAX_SAFE_INTEGER;\n                    // Progress 100%.\n                    replaceProgressBars(100);\n                    return;\n                }\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async() => {\n                if ((window.braveEthereum || window.braveSolana) && !player.allowAutoplay) {\n                    player.destroy();\n                    Toast.add(M.util.get_string('braveautoplay', 'mod_interactivevideo'), {\n                        type: 'danger',\n                        autohide: false,\n                    });\n                    setTimeout(() => {\n                        $('#toast-0').css('margin-top', '70px');\n                        $('#interactivevideo-container').addClass('no-pointer-events');\n                        $('#autoplay-error').tooltip('hide');\n                        $('#autoplay-error').remove();\n                    }, 500);\n                    return;\n                }\n\n                player.pause();\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    if (!player.live) {\n                        await player.seek(start);\n                    }\n                    onReady();\n                    return;\n                }\n\n                if (!loaded) {\n                    await onLoaded();\n                }\n\n                if (player.audio) {\n                    $('#annotation-canvas').addClass('bg-black');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                $(\"#annotation-canvas\").removeClass('w-0');\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#annotation-canvas\").removeClass('d-none');\n\n                await getAnnotations();\n\n                if (player.live) {\n                    return;\n                }\n\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': async function(event, ui) {\n                        const isPaused = await player.isPaused();\n                        if (!isPaused) {\n                            player.pause();\n                        }\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                        $(\"#end-screen\").fadeOut(300);\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        const percentage = relX / $(this).width();\n                        const time = percentage * totaltime;\n                        const formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        await replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                    },\n                    'stop': async function() {\n                        // Reset the launched annotation.\n                        lastrun = null;\n                        viewedAnno = [];\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n\n                dispatchEvent('timeupdate', {'time': start}); // Dispatch the timeupdate event with the start time.\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n                if (player.live) {\n                    return;\n                }\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                let t = await player.getCurrentTime();\n                let watchedpoint = Math.round(t);\n                // Make sure the watchedpoint is not the same as the last saved point or so close to it.\n                if ((Math.abs(watchedpoint - lastSaved) < 5 && watchedpoint != Math.round(end)) || watchedpoint < start + 5) {\n                    return;\n                }\n                lastSaved = watchedpoint;\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'update_watchedpoint',\n                        sesskey: M.cfg.sesskey,\n                        completionid: completionid,\n                        watchedpoint: watchedpoint,\n                        contextid: M.cfg.contextid\n                    }\n                });\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded || player.live) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n\n                // Update the timeended field in the database if it is not already set.\n                if (!timeended) {\n                    $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_timeended',\n                            sesskey: M.cfg.sesskey,\n                            completionid: completionid,\n                            contextid: M.cfg.contextid,\n                            courseid: course,\n                            interactivevideo: interaction,\n                            userid: userid,\n                            updatestate: extendedcompletion && JSON.parse(extendedcompletion).watchtillend == 1 ? 1 : 0,\n                        },\n                        success: function(data) {\n                            try {\n                                data = JSON.parse(data);\n                            } catch {\n                                window.console.log(data);\n                                return;\n                            }\n                            if (data) {\n                                timeended = true;\n                                dispatchEvent('completionupdated', {\n                                    response: JSON.stringify({\n                                        overallcomplete: data.overallcomplete,\n                                    })\n                                });\n                            }\n                        }\n                    });\n                }\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (player.live) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (!firstPlay) {\n                    // If seeking before the first play, then we need to set the resumetime to the current time.\n                    window.resumetime = t;\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) < t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                // If lastrun timestamp is greater than t, then we need to reset it.\n                if (lastrun && releventAnnotations.find(x => x.id == lastrun).timestamp > t) {\n                    lastrun = null;\n                }\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                // Initialize the player visualizer for html5 audio.\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                // Force fullscreen for mobile themes and mobile devices.\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n\n                if (player.live) {\n                    return;\n                }\n\n                if ($('#message.active').length > 0) {\n                    $('#message.active').each(function() {\n                        const mid = $(this).data('id');\n                        if (mid) {\n                            $(this).removeClass('active');\n                            dispatchEvent('interactionclose', {'annotation': {'id': mid}});\n                        }\n                    });\n                }\n\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n\n                if (!videoEnded) {\n                    $('#end-screen, #start-screen').fadeOut(300);\n                    $('#restart').addClass('d-none');\n                } else {\n                    viewedAnno = [];\n                }\n                if (!firstPlay) {\n                    $('#autoplay-error').tooltip('hide');\n                    $('#autoplay-error').remove();\n                    replaceProgressBars(window.resumetime ? (window.resumetime - start) / totaltime * 100 : 0);\n                    viewedAnno = [];\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        if (player.allowAutoplay) {\n                            await player.seek(window.resumetime);\n                        } else {\n                            await player.pause();\n                            await player.seek(window.resumetime);\n                            player.play();\n                        }\n                    }\n                    player.unMute();\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded(end);\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube' || player.type == 'yt') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    let t = await player.getCurrentTime();\n                    t = Number(t);\n\n                    if (t > end) {\n                        onEnded(end);\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    replaceProgressBars(percentagePlayed * 100);\n                    const theAnnotation = releventAnnotations.find(x => (((t - lookbacktime).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        viewedAnno = [];\n                        releventAnnotations.forEach(x => {\n                            if (Number(x.timestamp) < t) {\n                                viewedAnno.push(Number(x.id));\n                            }\n                        });\n\n                        $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        if (isBS5) {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip')\n                                .tooltip('show');\n                        }\n                        setTimeout(function() {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                            if (isBS5) {\n                                $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] [data-bs-toggle=tooltip')\n                                    .tooltip('hide');\n                            }\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if (isPreviewMode) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                            if (time < theAnnotation.timestamp - player.frequency) {\n                                await player.seek(theAnnotation.timestamp);\n                            }\n                            runInteraction(theAnnotation);\n                        } else {\n                            if (theAnnotation.completed) {\n                                if (time < theAnnotation.timestamp - player.frequency) {\n                                    await player.seek(theAnnotation.timestamp);\n                                }\n                                viewedAnno.push(Number(theAnnotation.id));\n                            }\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            // Implement the player.\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('click', '.completion-required', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                return;\n            });\n\n            const handleUnskippable = async(t) => {\n                // Handle unskippable interactions.\n                if (!t) {\n                    t = await player.getCurrentTime();\n                }\n\n                if (releventAnnotations) {\n                    const theAnnotation = releventAnnotations.find(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && JSON.parse(x.advanced).advskippable == 0 && x.hascompletion == 1);\n                    if (theAnnotation) {\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $(document).on('timeupdate', async function(e) {\n                if (!playerReady || isPreviewMode || player.live) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                    }\n                }\n                handleUnskippable(t);\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                dispatchEvent('interactionrefresh', {'annotation': annotation});\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $(`#wrapper [data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $('#controller').addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $('#controller').addClass('bg-dark').removeClass('bg-black');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            let idleInterval = null;\n            $(document).on('visibilitychange', async function() {\n                // Pause video when the tab is not visible and the pauseonblur option is enabled.\n                if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                    }\n                }\n\n                if (document.visibilityState == 'hidden') {\n                    // Destroy the player if the tab is hidden and the video isn't playing for more than 30/5 minutes.\n                    // Check if the player is paused and the user is not interacting with the player.\n                    idleInterval = setInterval(async() => {\n                        const isPaused = await player.isPaused();\n                        if (isPaused || videoEnded || !playerReady || !player || !firstPlay) {\n                            // Destroy the player.\n                            try {\n                                player.destroy();\n                            } catch (error) {\n                                // Do nothing.\n                            }\n                            cancelAnimationFrame(playingInterval);\n                            clearInterval(idleInterval);\n                            $(document).off();\n                            if (!videoEnded) {\n                                $('#start-screen').show().removeClass('d-none').addClass('idled');\n                                $('#start-screen #play').removeClass('d-none');\n                            }\n                            $(document).on('click', '#start-screen #play, #endscreen #restart', function(e) {\n                                e.preventDefault();\n                                location.reload();\n                            });\n                            $('#controller').addClass('no-pointer-events');\n                            Toast.add(M.util.get_string('idlealert', 'mod_interactivevideo'), {\n                                type: 'danger',\n                                autohide: false,\n                                closeButton: true,\n                            });\n                        }\n                    }, 60 * 1000 * (videoEnded ? 5 : 30)); // 30 minutes if the video is playing, 5 minutes if the video has ended.\n                } else {\n                    // Cancel the destroy player timeout.\n                    clearInterval(idleInterval);\n                }\n            });\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                let shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Remove the embed parameter if it exists.\n                shareurl = shareurl.replace(/&embed=1/g, '');\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                const copied = M.util.get_string('copiedtoclipboard', 'mod_interactivevideo');\n                Toast.add(copied, {\n                    type: 'success',\n                    autohide: true,\n                    delay: 2000,\n                });\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const timestamp = $(this).data('timestamp');\n\n                let hasSkippable = await handleUnskippable(timestamp);\n                if (hasSkippable) {\n                    return;\n                }\n\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    player.pause();\n                }\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                const isPlaying = await player.isPlaying();\n                if (!isPlaying || videoEnded) {\n                    await player.play();\n                }\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                if ($(this).hasClass('reload')) {\n                    location.reload();\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                dispatchEvent('iv:playerRestart');\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                if ($('body').hasClass('hassidebar')) {\n                    $('#annotation-toggle').trigger('click');\n                    $('#annotation-sidebar, #annotation-toggle').remove();\n                    $('body').removeClass('hassidebar');\n                    $('.iv-sidebar').addClass('hide');\n                }\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                replaceProgressBars(0);\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                if (player.live) {\n                    firstPlay = true;\n                }\n                if (!firstPlay) {\n                    player.play();\n                    return;\n                }\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $('body').addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n                // Get the active annotation.\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    // Dispatch the interaction run event.\n                    dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == current)});\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item changequality text-white px-3\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find(`[data${bsAffix}-toggle=dropdown]`).dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', function() {\n                // Remove the tooltip.\n                $('.tooltip').remove();\n                dispatchEvent('videoPaused');\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n                $loader.fadeOut(300);\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                if (player.live) {\n                    return;\n                }\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerLoaded', function(e) {\n                onLoaded(e.detail);\n                const captions = e.detail.tracks;\n                if (!captions || captions.length == 0) {\n                    return;\n                }\n                $('#changecaption').removeClass('d-none');\n                $('#changecaption .dropdown-menu')\n                    .html(`<a class=\"dropdown-item changecaption px-3\"\n                     data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                captions.forEach(caption => {\n                    $('#changecaption .dropdown-menu')\n                        .append(`<a class=\"dropdown-item changecaption text-white px-3\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw\"></i>${caption.label}</a>`);\n                });\n\n                const lang = localStorage.getItem(`caption-${userid}`);\n                if (lang && lang.length) {\n                    $('#changecaption .changecaption[data-lang=\"' + lang + '\"]').trigger('click');\n                }\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#annotation-canvas').removeClass('d-none');\n                $('#start-screen').addClass('d-none');\n                $('.video-block').addClass('no-pointer bg-transparent');\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                try {\n                    $(`#wrapper [data${bsAffix}-toggle=\"tooltip\"]`).tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } catch (error) {\n                    // Do nothing.\n                }\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $('#taskinfo').removeClass('border-0');\n                }\n\n                if (!playerReady) {\n                    playerReady = true;\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!isPreviewMode && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    window.resumetime = time;\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    if (player.live) {\n                        replaceProgressBars(100);\n                    }\n                    // Get noautoplay from the URL.\n                    const urlParams = new URLSearchParams(window.location.search);\n                    const noautoplay = urlParams.get('da');\n                    if (autoplay && player.allowAutoplay && noautoplay != '1') {\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            player.unMute();\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            $(`[data${bsAffix}-toggle=\"tooltip\"]`).on('click', function() {\n                const $this = $(this);\n                setTimeout(function() {\n                    $this.tooltip('hide');\n                }, 2000); // Hide after 3 seconds\n            });\n\n            window.addEventListener('beforeunload', function() {\n                player.pause();\n                onPaused();\n                // Remove all event listeners before unload.\n                $(document).off();\n                cancelAnimationFrame(playingInterval);\n            });\n\n            $(document).on('interactionrun', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.starttime = windowAnno.starttime ? windowAnno.starttime : new Date().getTime();\n                    windowAnno.newstarttime = new Date().getTime();\n                    windowAnno.completedtime = windowAnno.completedtime ? windowAnno.completedtime : null;\n                    windowAnno.duration = windowAnno.duration > 0 ? windowAnno.duration : 0;\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('interactionclose interactionrefresh', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('completionupdated', function(e) {\n                if (JSON.parse(e.originalEvent.detail.response).overallcomplete > 0) {\n                    if (isCompleted) {\n                        return;\n                    }\n                    isCompleted = true;\n                    fireConfetti();\n                    Toast.add(M.util.get_string('congratulationsyoucompletethisactivity', 'mod_interactivevideo'), {\n                        type: 'success',\n                    });\n                    $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle-fill text-success\"></i>`);\n                } else {\n                    isCompleted = false;\n                    $('#completiondropdown').html(`<i class=\"fs-25px bi bi-check-circle text-white\"></i>`);\n                }\n                const annotation = e.originalEvent.detail.target;\n                if (!annotation) {\n                    return;\n                }\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    if (e.originalEvent.detail.action == 'mark-done') {\n                        windowAnno.completedtime = new Date().getTime();\n                    } else {\n                        windowAnno.completedtime = null;\n                    }\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n\n                // Handle the dismissible setting.\n                $('#message[data-id=' + annotation.id + ']').addClass('active'); // Make sure the message is active.\n                let anno = releventAnnotations.find(x => x.id == annotation.id);\n                let advanced = anno.advanced;\n                advanced = advanced ? JSON.parse(advanced) : {};\n                if (advanced.advdismissible == 0 && anno.completed) {\n                    $('#controller, #video-wrapper, .sidebar-nav-item')\n                        .removeClass('completion-required');\n                } else if (advanced.advdismissible == 0 && !anno.completed) {\n                    $('#controller').addClass('completion-required');\n                    if ($('#message.active').data('placement') == 'bottom' || $('#message.active').data('placement') == 'side') {\n                        $('#video-wrapper').addClass('completion-required');\n                    }\n                    if ($('#message.active').data('placement') == 'side') {\n                        $('.sidebar-nav-item').addClass('completion-required');\n                    }\n                }\n                if (anno.completed) {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').addClass('completed');\n                } else {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').removeClass('completed');\n                }\n            });\n\n            $(document).on('iv:autoplayBlocked', function(e) {\n                e.preventDefault();\n                if (e.originalEvent.detail.requireVideoBlock === false) {\n                    $('.video-block').remove();\n                }\n                // Append a error button.\n                $('body').append(`<button id=\"autoplay-error\" data${bsAffix}-toggle=\"tooltip\"\n                     title=\"${M.util.get_string('autoplayblocked', 'mod_interactivevideo')}\"\n                    class=\"btn btn-danger p-2 iv-rounded-circle pulse\"><i class=\"bi bi-x-lg\"></i></button>`);\n                $('#autoplay-error').tooltip('show');\n                $(document).on('click', '#autoplay-error', function() {\n                    $('#autoplay-error').tooltip('hide');\n                    $(this).fadeOut(300, 'swing', function() {\n                        $(this).remove();\n                    });\n                });\n            });\n\n            $(document).on('click', '#message[data-placement]:not(.active)', function(e) {\n                e.preventDefault();\n                $(this).addClass('active');\n                // Dispatch the interaction run event.\n                dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == $(this).data('id'))});\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","quickform","dispatchEvent","ctRenderer","isBS5","hasClass","bsAffix","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","viewedAnno","$videoNav","$interactionNav","$loader","renderAnnotationItems","async","annos","start","window","IVANNO","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","advanced","JSON","parse","visiblebeforecompleted","visibleaftercompleted","each","cstart","this","data","cend","find","id","prop","icon","formattedtitle","fireConfetti","confetti","animationEnd","Date","now","defaults","startVelocity","spread","ticks","zIndex","shapes","randomInRange","min","max","random","interval","setInterval","timeLeft","clearInterval","particleCount","origin","y","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isPreviewMode","isCompleted","contextid","M","cfg","courseid","require","isNaN","playerReady","uprogress","timeended","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","time","text","css","getAnnotations","annnoitems","ajax","wwwroot","method","dataType","action","sesskey","courseContextId","userprogress","uid","previewmode","getContentTypes","when","done","progress","ct","live","completiondetails","Object","values","annotation","some","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","previewMode","getRelevantAnnotations","ANNOS","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","all","contentType","amdmodule","Type","error","initializeContentTypeRenderers","toggleClass","runInteraction","force","pause","isPaused","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","lookbacktime","onLoaded","passwordprotected","support","password","IVPLAYER","frequency","playbackrate","quality","ratio","usefixedratio","aspectratio","gap","attr","focus","vwrapper","document","querySelector","ResizeObserver","clientWidth","observe","scrollIntoView","behavior","block","inline","next","MAX_SAFE_INTEGER","onReady","braveEthereum","braveSolana","allowAutoplay","destroy","autohide","tooltip","audio","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","abs","videoEnded","onEnded","isPlaying","fadeIn","interactivevideo","updatestate","watchtillend","success","console","log","response","overallcomplete","onSeek","firstPlay","resumetime","visualized","onPlaying","visualizer","mid","unMute","intervalFunction","isEnded","toFixed","percentagePlayed","useAnimationFrame","animate","requestAnimationFrame","VideoPlayer","load","useoriginalvideocontrols","autoplay","$toast","detach","on","preventDefault","stopImmediatePropagation","handleUnskippable","advskippable","originalEvent","detail","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","container","boundary","idleInterval","pauseonblur","visibilityState","off","show","reload","closeButton","setItem","href","shareurl","replace","navigator","clipboard","writeText","copied","delay","parentOffset","offset","pageX","preceedingAnno","current","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","lang","setCaption","captions","tracks","html","caption","code","label","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","noautoplay","$this","addEventListener","windowAnnos","windowAnno","starttime","getTime","newstarttime","completedtime","target","anno","advdismissible","requireVideoBlock"],"mappings":"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"}