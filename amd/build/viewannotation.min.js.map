{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/quickform', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast, quickform) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player, // Video player instance.\n        lastrun; // Last run annotation.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n    const $loader = $('#background-loading');\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        releventAnnotations = annos;\n        window.IVANNO = annos;\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.earned)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        if (actualAnnotationCounts > 0) {\n            $(\".metadata\").append(`<span class=\"d-inline-block mr-3\">\n            <i class=\"bi bi-stopwatch mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block mr-3\">\n        <i class=\"bi bi-bullseye mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star mr-2\"></i>${xpEarned} / ${xp}</span>`);\n        }\n\n        $(\"#interactions-nav ul\").empty();\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            dispatchEvent('annotationitemsrendered', {\n                'annotations': annos,\n                'completed': completedAnnos.length,\n                'total': actualAnnotationCounts,\n                'xp': xpEarned,\n                'totalxp': xp,\n            });\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {\n            'annotations': annos,\n            'completed': completedAnnos.length,\n            'total': actualAnnotationCounts,\n            'xp': xpEarned,\n            'totalxp': xp,\n        });\n\n        // Handle the chapter list.\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment'\n            && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            const advanced = JSON.parse(x.advanced);\n            if ((advanced.visiblebeforecompleted == \"1\" && !x.completed)\n                || (advanced.visibleaftercompleted == \"1\" && x.completed)) {\n                $('[data-region=\"chapterlists\"] li').each(function() {\n                    const cstart = $(this).data('start');\n                    const cend = $(this).data('end');\n                    if (x.timestamp >= cstart && x.timestamp < cend) {\n                        $(this).find('.annolistinchapter')\n                            .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star ml-1\"></i></span></li>`);\n                    }\n                });\n            }\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @param {string} extendedcompletion - The extended completion requirements.\n         * @param {boolean} isPreviewMode - The preview mode flag.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null, extendedcompletion = null, isPreviewMode = false) {\n\n            quickform({\n                contextid: M.cfg.contextid,\n                courseid: course,\n                cmid,\n                interaction,\n            });\n\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n            let uprogress = null;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $('#controller #expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            if (vtype == 'spotify') { // Spotify player.\n                $('body').addClass('limited-width');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                if (seconds < 0) {\n                    return '00:00';\n                }\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {Promise<boolean>}\n             */\n            const replaceProgressBars = (percentage) => {\n                return new Promise((resolve) => {\n                    percentage = percentage > 100 ? 100 : percentage;\n                    let time = percentage / 100 * totaltime;\n                    $('#currenttime').text(convertSecondsToHMS(time));\n                    $('#remainingtime').text(convertSecondsToHMS(totaltime - time));\n                    $videoNav.find('#progress').css('width', percentage + '%');\n                    $videoNav.find('#seekhead').css('left', percentage + '%');\n                    resolve(true);\n                });\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @returns {Promise}\n             */\n            const getAnnotations = () => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: isPreviewMode ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_all_contenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    if (player.live) { // Live video does not have end time.\n                        annotations = [];\n                    }\n                    progress = JSON.parse(progress[0]);\n                    uprogress = progress;\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    if (typeof completiondetails == 'object') {\n                        completiondetails = Object.values(completiondetails);\n                    }\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n                    window.ANNOS = releventAnnotations;\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, end - start);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            annotation.earned = Number(JSON.parse(completionitem).xp);\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                            if (isPreviewMode) {\n                                annotation.completed = true;\n                                annotation.previewMode = true;\n                            }\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    await Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid, extendedcompletion, {\n                                    isPreviewMode: isPreviewMode\n                                });\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve();\n                            });\n                        });\n                    }));\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @param {boolean} force force run the interaction\n             * @returns {void}\n             */\n            const runInteraction = async(annotation, force = false) => {\n                // First making sure the player is paused.\n                player.pause();\n                let isPaused = await player.isPaused();\n                if (!isPaused) {\n                    runInteraction(annotation);\n                    return;\n                }\n                // Continue with the interaction. Take notes of the earlier interactions to avoid accidental re-runs.\n                lastrun = annotation.id;\n                viewedAnno = [];\n                // Put all annotations with timestamp < annotation.timestamp in the viewedAnno.\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) <= Number(annotation.timestamp)) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n\n                // If the annotation has displayoptions == 'side' and it is already run, then we don't need to run it again.\n                // But we need to show the message.\n                if (annotation.displayoptions == 'side' && $(`.sidebar-nav-item[data-id=${annotation.id}]`).length > 0 && !force) {\n                    if (!$('body').hasClass('hassidebar')) {\n                        // Toggle the drawer.\n                        $('#annotation-toggle').trigger('click');\n                    }\n                    $(`.sidebar-nav-item[data-id=${annotation.id}]`).trigger('click');\n                } else {\n                    activityType = ctRenderer[annotation.type];\n                    setTimeout(() => {\n                        activityType.runInteraction(annotation);\n                        // In case there is an active interaction, trigger the interactionclose event.\n                        if ($('#message.active').length > 0) {\n                            $('#message.active').each(function() {\n                                const id = $(this).data('id');\n                                if (id != annotation.id) {\n                                    $(this).removeClass('active');\n                                    dispatchEvent('interactionclose', {'annotation': {'id': id}});\n                                }\n                            });\n                        }\n                        dispatchEvent('interactionrun', {'annotation': annotation});\n                    }, 100);\n                }\n\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            const updateTime = async(duration) => {\n                duration = Number(duration);\n                let toUpdatetime = false;\n                if (!end || end == 0) {\n                    toUpdatetime = true;\n                }\n                if (!start || start >= duration || start < 0 || start >= duration) {\n                    toUpdatetime = true;\n                }\n                start = start > duration ? 0 : start;\n                if (toUpdatetime) {\n                    await $.ajax({\n                        url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                        method: \"POST\",\n                        dataType: \"text\",\n                        data: {\n                            action: 'update_videotime',\n                            sesskey: M.cfg.sesskey,\n                            id: interaction,\n                            cmid: cmid,\n                            courseid: course,\n                            start: start,\n                            end: !end || end == 0 ? duration : end,\n                            contextid: M.cfg.contextid\n                        }\n                    });\n                }\n                end = !end || end == 0 || end > duration ? duration : end;\n                return {start, end};\n            };\n\n            let loaded = false;\n            let lookbacktime = 0;\n\n            const onLoaded = async() => {\n                if (loaded) {\n                    return;\n                }\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').removeClass('d-none');\n                    $('.video-block').removeClass('no-pointer bg-transparent');\n                }\n                loaded = true;\n                // Add player to Window object.\n                window.IVPLAYER = player;\n                lookbacktime = Math.max(0.5, player.frequency); // How far back to look for annotations.\n                // Check if the player supports playback rate and quality adjustments.\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                const duration = player.totaltime;\n                ({start, end} = await updateTime(duration));\n                totaltime = end - start;\n\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '55px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 2rem) * ' + ratio + ')'\n                    });\n                }\n\n                $('#wrapper').attr('data-ratio', ratio);\n                $('#wrapper').attr('data-gap', gap);\n\n                $('#start-screen #start').focus();\n\n                // Resize observer\n                let vwrapper = document.querySelector('#video-wrapper');\n                const resizeObserver = new ResizeObserver(() => {\n                    // If vwrapper is larger than 1050px, show #expand; otherwise, hide it.\n                    if (vwrapper.clientWidth > 1050) {\n                        $('#controller #expand').removeClass('d-none');\n                    } else {\n                        $('#controller #expand').addClass('d-none');\n                    }\n                });\n\n                resizeObserver.observe(vwrapper);\n\n                // Scroll into view #video-wrapper\n                if ($('body').hasClass('embed-mode')) {\n                    return;\n                }\n                vwrapper.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"});\n\n                if (player.live) {\n                    // Remove the slash.\n                    $('#currenttime').next().remove();\n                    $('#currenttime').remove();\n                    $('#duration').text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $('#remainingtime').text(M.util.get_string('live', 'mod_interactivevideo'));\n                    $('#taskinfo').addClass('no-pointer-events');\n                    end = Number.MAX_SAFE_INTEGER;\n                    // Progress 100%.\n                    replaceProgressBars(100);\n                    return;\n                }\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async() => {\n                if ((window.braveEthereum || window.braveSolana) && !player.allowAutoplay) {\n                    player.destroy();\n                    Toast.add(M.util.get_string('braveautoplay', 'mod_interactivevideo'), {\n                        type: 'danger',\n                        autohide: false,\n                    });\n                    setTimeout(() => {\n                        $('#toast-0').css('margin-top', '70px');\n                        $('#interactivevideo-container').addClass('no-pointer-events');\n                        $('#autoplay-error').tooltip('hide');\n                        $('#autoplay-error').remove();\n                    }, 500);\n                    return;\n                }\n\n                player.pause();\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    if (!player.live) {\n                        await player.seek(start);\n                    }\n                    onReady();\n                    return;\n                }\n\n                if (!loaded) {\n                    await onLoaded();\n                }\n\n                if (player.audio) {\n                    $('#annotation-canvas').addClass('bg-black');\n                }\n\n                // Explanation: YT shows annoying related videos if the player is large enough when the script is loading.\n                // So we're tricking it by hiding the canvas which also hides the #player first\n                // and only shows it when player is ready.\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#annotation-canvas\").removeClass('d-none');\n\n\n                await getAnnotations();\n\n                if (player.live) {\n                    return;\n                }\n\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': async function(event, ui) {\n                        const isPaused = await player.isPaused();\n                        if (!isPaused) {\n                            player.pause();\n                        }\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                        $(\"#end-screen\").fadeOut(300);\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        const percentage = relX / $(this).width();\n                        const time = percentage * totaltime;\n                        const formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        await replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                    },\n                    'stop': async function() {\n                        // Reset the launched annotation.\n                        lastrun = null;\n                        viewedAnno = [];\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n\n                dispatchEvent('timeupdate', {'time': start}); // Dispatch the timeupdate event with the start time.\n            };\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            let lastSaved;\n            const onPaused = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n                if (player.live) {\n                    return;\n                }\n                cancelAnimationFrame(playingInterval);\n                // Save watched progress to database.\n                let t = await player.getCurrentTime();\n                let watchedpoint = Math.round(t);\n                // Make sure the watchedpoint is not the same as the last saved point or so close to it.\n                if ((Math.abs(watchedpoint - lastSaved) < 5 && watchedpoint != Math.round(end)) || watchedpoint < start + 5) {\n                    return;\n                }\n                lastSaved = watchedpoint;\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'update_watchedpoint',\n                        sesskey: M.cfg.sesskey,\n                        completionid: completionid,\n                        watchedpoint: watchedpoint,\n                        contextid: M.cfg.contextid\n                    }\n                });\n            };\n\n            let videoEnded = false;\n            /**\n             * Handles the end of the video playback.\n             *\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = async() => {\n                if (!playerReady) {\n                    return;\n                }\n                if (videoEnded || player.live) {\n                    return;\n                }\n\n                let isPlaying = await player.isPlaying();\n                if (isPlaying) {\n                    player.pause();\n                    onEnded(); // Repeat until player is paused.\n                    return;\n                }\n\n                onPaused(); // Run the onPaused function to save the last watched point.\n\n                dispatchEvent('timeupdate', {'time': end});\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                dispatchEvent('ended', {'time': end});\n                replaceProgressBars(100);\n                videoEnded = true;\n                viewedAnno = [];\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (player.live) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (!firstPlay) {\n                    // If seeking before the first play, then we need to set the resumetime to the current time.\n                    window.resumetime = t;\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n                // Reset the launched annotation to include only the ones that are before the current time.\n                viewedAnno = [];\n                releventAnnotations.forEach(x => {\n                    if (Number(x.timestamp) < t) {\n                        viewedAnno.push(Number(x.id));\n                    }\n                });\n                // If lastrun timestamp is greater than t, then we need to reset it.\n                if (lastrun && releventAnnotations.find(x => x.id == lastrun).timestamp > t) {\n                    lastrun = null;\n                }\n            };\n\n            let visualized = false;\n            let playingInterval = null;\n            let firstPlay = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                // Initialize the player visualizer for html5 audio.\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                // Force fullscreen for mobile themes and mobile devices.\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n\n                if (player.live) {\n                    return;\n                }\n\n                if ($('#message.active').length > 0) {\n                    $('#message.active').each(function() {\n                        const mid = $(this).data('id');\n                        if (mid) {\n                            $(this).removeClass('active');\n                            dispatchEvent('interactionclose', {'annotation': {'id': mid}});\n                        }\n                    });\n                }\n\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n\n                if (!videoEnded) {\n                    $('#end-screen, #start-screen').fadeOut(300);\n                    $('#restart').addClass('d-none');\n                } else {\n                    viewedAnno = [];\n                }\n                if (!firstPlay) {\n                    $('#autoplay-error').tooltip('hide');\n                    $('#autoplay-error').remove();\n                    replaceProgressBars(window.resumetime ? (window.resumetime - start) / totaltime * 100 : 0);\n                    viewedAnno = [];\n                    firstPlay = true;\n                    if (window.resumetime && window.resumetime > start && window.resumetime < end) {\n                        if (player.allowAutoplay) {\n                            await player.seek(window.resumetime);\n                        } else {\n                            await player.pause();\n                            await player.seek(window.resumetime);\n                            player.play();\n                        }\n                    }\n                    player.unMute();\n                }\n\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    const isPaused = await player.isPaused();\n                    if (isEnded) {\n                        onEnded(end);\n                        return;\n                    }\n                    if (isPaused) {\n                        onPaused();\n                        return;\n                    }\n                    if (!isPlaying) {\n                        if (player.type == 'spotify' || player.type == 'rutube' || player.type == 'yt') {\n                            player.pause();\n                            cancelAnimationFrame(playingInterval);\n                        }\n                        return;\n                    }\n\n                    let t = await player.getCurrentTime();\n                    t = Number(t);\n\n                    if (t > end) {\n                        onEnded(end);\n                        return;\n                    }\n\n                    videoEnded = false;\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    replaceProgressBars(percentagePlayed * 100);\n                    const theAnnotation = releventAnnotations.find(x => (((t - lookbacktime).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n\n                    if (theAnnotation) {\n                        viewedAnno = [];\n                        releventAnnotations.forEach(x => {\n                            if (Number(x.timestamp) < t) {\n                                viewedAnno.push(Number(x.id));\n                            }\n                        });\n\n                        $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        setTimeout(function() {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                        }, 2000);\n\n                        if (lastrun && theAnnotation.id == lastrun) {\n                            return;\n                        }\n                        // If in preview mode, don't run the interaction.\n                        if (isPreviewMode) {\n                            return;\n                        }\n                        // Run the interaction if it isn't complete or rerunnable.\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                            if (time < theAnnotation.timestamp - player.frequency) {\n                                await player.seek(theAnnotation.timestamp);\n                            }\n                            runInteraction(theAnnotation);\n                        } else {\n                            if (theAnnotation.completed) {\n                                if (time < theAnnotation.timestamp - player.frequency) {\n                                    await player.seek(theAnnotation.timestamp);\n                                }\n                                viewedAnno.push(Number(theAnnotation.id));\n                            }\n                            // Player.play();\n                        }\n                    }\n                };\n\n                if (player.useAnimationFrame) {\n                    const animate = async() => {\n                        const isPlaying = await player.isPlaying();\n                        if (isPlaying) {\n                            intervalFunction();\n                            playingInterval = requestAnimationFrame(animate);\n                        }\n                    };\n                    playingInterval = requestAnimationFrame(animate);\n                } else {\n                    const isPlaying = await player.isPlaying();\n                    if (isPlaying) {\n                        intervalFunction();\n                    }\n                }\n            };\n\n            // Implement the player\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer();\n                if (displayoptions.passwordprotected == 1 && player.support.password) {\n                    // Remove start screen, set .video-block to d-none, #annotation-canvas remove d-none.\n                    $('#start-screen').addClass('d-none');\n                    $('.video-block').addClass('no-pointer bg-transparent');\n                    $('#annotation-canvas').removeClass('d-none');\n                }\n                player.load(url,\n                    start,\n                    end,\n                    {\n                        'showControls': displayoptions.useoriginalvideocontrols == 1,\n                        'customStart': true,\n                        'preload': false,\n                        'autoplay': displayoptions.autoplay == 1,\n                        'passwordprotected': displayoptions.passwordprotected == 1 && player.support.password,\n                    });\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('click', '.completion-required', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                return;\n            });\n\n            const handleUnskippable = async(t) => {\n                // Handle unskippable interactions.\n                if (!t) {\n                    t = await player.getCurrentTime();\n                }\n\n                if (releventAnnotations) {\n                    const theAnnotation = releventAnnotations.find(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && JSON.parse(x.advanced).advskippable == 0 && x.hascompletion == 1);\n                    if (theAnnotation) {\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                        return true;\n                    }\n                }\n                return false;\n            };\n\n            $(document).on('timeupdate', async function(e) {\n                if (!playerReady || isPreviewMode || player.live) {\n                    return;\n                }\n                const t = e.originalEvent.detail.time;\n                if (preventskip && releventAnnotations) {\n                    // Check if there is any uncompleted activity before the current time.\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) < Number(t.toFixed(2))\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        await player.pause();\n                        await player.seek(theAnnotation.timestamp);\n                        runInteraction(theAnnotation);\n                        Toast.add(M.util.get_string('youmustcompletethistaskfirst', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        replaceProgressBars((theAnnotation.timestamp - start) / totaltime * 100);\n                    }\n                }\n                handleUnskippable(t);\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#message #refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                dispatchEvent('interactionrefresh', {'annotation': annotation});\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    } else if (elem.webkitEnterFullscreen) { /* IOS Safari */\n                        elem.webkitEnterFullscreen();\n                    } else {\n                        Toast.add(M.util.get_string('fullscreenisnotsupported', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        // Remove the fullscreen button.\n                        $('#fullscreen').remove();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                    $('#controller').addClass('bg-black').removeClass('bg-dark');\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                    $('#controller').addClass('bg-dark').removeClass('bg-black');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            let idleInterval = null;\n            $(document).on('visibilitychange', async function() {\n                // Pause video when the tab is not visible and the pauseonblur option is enabled.\n                if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                    if (!playerReady) {\n                        return;\n                    }\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                    }\n                }\n\n                if (document.visibilityState == 'hidden') {\n                    // Destroy the player if the tab is hidden and the video isn't playing for more than 30/5 minutes.\n                    // Check if the player is paused and the user is not interacting with the player.\n                    idleInterval = setInterval(async() => {\n                        const isPaused = await player.isPaused();\n                        if (isPaused || videoEnded || !playerReady || !player || !firstPlay) {\n                            // Destroy the player.\n                            try {\n                                player.destroy();\n                            } catch (error) {\n                                // Do nothing.\n                            }\n                            cancelAnimationFrame(playingInterval);\n                            clearInterval(idleInterval);\n                            $(document).off();\n                            if (!videoEnded) {\n                                $('#start-screen').show().removeClass('d-none').addClass('idled');\n                                $('#start-screen #play').removeClass('d-none');\n                            }\n                            $(document).on('click', '#start-screen #play, #endscreen #restart', function(e) {\n                                e.preventDefault();\n                                location.reload();\n                            });\n                            $('#controller').addClass('no-pointer-events');\n                            Toast.add(M.util.get_string('idlealert', 'mod_interactivevideo'), {\n                                type: 'danger',\n                                autohide: false,\n                                closeButton: true,\n                            });\n                        }\n                    }, 60 * 1000 * (videoEnded ? 5 : 30)); // 30 minutes if the video is playing, 5 minutes if the video has ended.\n                } else {\n                    // Cancel the destroy player timeout.\n                    clearInterval(idleInterval);\n                }\n            });\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const $this = $(this);\n                $this.find('i').toggleClass('bi-share-fill bi-share');\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                let shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Remove the embed parameter if it exists.\n                shareurl = shareurl.replace(/&embed=1/g, '');\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                $this.attr('data-original-title', M.util.get_string(\"copied\", \"mod_interactivevideo\")).tooltip('show');\n                setTimeout(function() {\n                    // Change tooltip back to share.\n                    $this\n                        .attr('data-original-title', M.util.get_string(\"sharethismoment\", \"mod_interactivevideo\"))\n                        .tooltip('hide');\n                    $this.find('i').toggleClass('bi-share-fill bi-share');\n                }, 2000);\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const timestamp = $(this).data('timestamp');\n\n                let hasSkippable = await handleUnskippable(timestamp);\n                if (hasSkippable) {\n                    return;\n                }\n\n                $loader.fadeIn(300);\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const currenttime = await player.getCurrentTime();\n                if (currenttime == timestamp && lastrun) {\n                    $loader.fadeOut(300);\n                    return;\n                }\n                lastrun = null;\n                const isPaused = await player.isPaused();\n                if (!isPaused) {\n                    player.pause();\n                }\n                await replaceProgressBars((timestamp - start) / totaltime * 100);\n                await player.seek(Number(timestamp));\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                runInteraction(theAnnotation);\n                $loader.fadeOut(300);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                await replaceProgressBars(percentage * 100);\n                $loader.fadeIn(300);\n                await player.seek((percentage * totaltime) + start);\n                const isPlaying = await player.isPlaying();\n                if (!isPlaying || videoEnded) {\n                    await player.play();\n                }\n                viewedAnno = [];\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                    $loader.fadeOut(300);\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                if ($(this).hasClass('reload')) {\n                    location.reload();\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                dispatchEvent('iv:playerRestart');\n                $('#message').remove();\n                // Remove sidebar/drawer.\n                if ($('body').hasClass('hassidebar')) {\n                    $('#annotation-toggle').trigger('click');\n                    $('#annotation-sidebar, #annotation-toggle').remove();\n                    $('body').removeClass('hassidebar');\n                }\n\n                viewedAnno = [];\n                lastrun = null;\n                $loader.fadeIn(300);\n                await player.seek(start);\n                replaceProgressBars(0);\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n                $loader.fadeOut(300);\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                if (player.live) {\n                    firstPlay = true;\n                }\n                if (!firstPlay) {\n                    player.play();\n                    return;\n                }\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    player.play();\n                }\n\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    await player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            $(document).on('click', '#toolbar #annotation-toggle', function(e) {\n                e.preventDefault();\n                $('body').addClass('hassidebar');\n                $('#annotation-sidebar').removeClass('hide');\n                // Get the active annotation.\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    // Dispatch the interaction run event.\n                    dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == current)});\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item changequality text-white\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw ml-n3\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find('[data-toggle=dropdown]').dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('click', '#changecaption .changecaption', function(e) {\n                e.preventDefault();\n                const lang = $(this).data('lang');\n                player.setCaption(lang);\n                $('#changecaption .changecaption').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n                if (lang == '') {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc-fill').addClass('bi-badge-cc');\n                } else {\n                    $('#changecaption .btn i').removeClass('bi-badge-cc').addClass('bi-badge-cc-fill');\n                }\n                // Save the caption language to local storage.\n                localStorage.setItem(`caption-${userid}`, lang);\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', async function() {\n                // Remove the tooltip.\n                $('.tooltip').remove();\n                dispatchEvent('videoPaused');\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n                $loader.fadeOut(300);\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                if (player.live) {\n                    return;\n                }\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerLoaded', function(e) {\n                onLoaded(e.detail);\n                const captions = e.detail.tracks;\n                if (!captions || captions.length == 0) {\n                    return;\n                }\n                $('#changecaption').removeClass('d-none');\n                $('#changecaption .dropdown-menu')\n                    .html(`<a class=\"dropdown-item changecaption\"\n                     data-lang=\"\" href=\"#\">\n                     <i class=\"bi fa-fw bi-check ml-n3\"></i>${M.util.get_string('off', 'mod_interactivevideo')}</a>`);\n                captions.forEach(caption => {\n                    $('#changecaption .dropdown-menu')\n                        .append(`<a class=\"dropdown-item changecaption text-white\"\n                         data-lang=\"${caption.code}\" href=\"#\"><i class=\"bi fa-fw ml-n3\"></i>${caption.label}</a>`);\n                });\n\n                const lang = localStorage.getItem(`caption-${userid}`);\n                if (lang && lang.length) {\n                    $('#changecaption .changecaption[data-lang=\"' + lang + '\"]').trigger('click');\n                }\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#annotation-canvas').removeClass('d-none');\n                $('#start-screen').addClass('d-none');\n                $('.video-block').addClass('no-pointer bg-transparent');\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                try {\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } catch (error) {\n                    // Do nothing.\n                }\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n                if ($interactionNav.find('li').length > 0) {\n                    $('#taskinfo').removeClass('border-0');\n                }\n\n                if (!playerReady) {\n                    playerReady = true;\n                }\n\n                // Autoplay if enabled and in right conditions.\n                if (!isPreviewMode && !firstPlay) {\n                    let autoplay = displayoptions.autoplay == 1;\n                    let time = start;\n                    if ($('.intro-content').hasClass('hasintro')) {\n                        autoplay = false;\n                    }\n                    if ((uprogress.lastviewed > start && uprogress.lastviewed < end - 5) || moment) {\n                        autoplay = true;\n                        time = moment ? Number(moment) : uprogress.lastviewed;\n                        time = time >= end || time < start ? start : time;\n                    }\n                    window.resumetime = time;\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    if (player.live) {\n                        replaceProgressBars(100);\n                    }\n                    if (autoplay && player.allowAutoplay) {\n                        setTimeout(async() => {\n                            // Make sure to unmute.\n                            player.unMute();\n                            if (!moment) {\n                                $('#play').trigger('click');\n                            }\n                        }, 1000);\n                    }\n                    shareMoment();\n                }\n            });\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            window.addEventListener('beforeunload', function() {\n                player.pause();\n                onPaused();\n                // Remove all event listeners before unload.\n                $(document).off();\n                cancelAnimationFrame(playingInterval);\n            });\n\n            $(document).on('interactionrun', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.starttime = windowAnno.starttime ? windowAnno.starttime : new Date().getTime();\n                    windowAnno.newstarttime = new Date().getTime();\n                    windowAnno.completedtime = windowAnno.completedtime ? windowAnno.completedtime : null;\n                    windowAnno.duration = windowAnno.duration > 0 ? windowAnno.duration : 0;\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('interactionclose interactionrefresh', function(e) {\n                const annotation = e.originalEvent.detail.annotation;\n                // Update start time to the window.IVANNO item.\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n\n                if (windowAnno) {\n                    windowAnno.duration = windowAnno.duration + (new Date().getTime() - windowAnno.newstarttime);\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n            });\n\n            $(document).on('completionupdated', function(e) {\n                const annotation = e.originalEvent.detail.target;\n                let windowAnnos = window.ANNOS;\n                let windowAnno = windowAnnos.find(x => x.id == annotation.id);\n                if (windowAnno) {\n                    if (e.originalEvent.detail.action == 'mark-done') {\n                        windowAnno.completedtime = new Date().getTime();\n                    } else {\n                        windowAnno.completedtime = null;\n                    }\n                }\n                // Put it back in the window.\n                windowAnnos = windowAnnos.filter(x => x.id != annotation.id);\n                windowAnnos.push(windowAnno);\n                window.ANNOS = windowAnnos;\n\n                // Handle the dismissible setting.\n                $('#message[data-id=' + annotation.id + ']').addClass('active'); // Make sure the message is active.\n                let anno = releventAnnotations.find(x => x.id == annotation.id);\n                let advanced = anno.advanced;\n                advanced = advanced ? JSON.parse(advanced) : {};\n                if (advanced.advdismissible == 0 && anno.completed) {\n                    $('#controller, #video-wrapper, .sidebar-nav-item')\n                        .removeClass('completion-required');\n                } else if (advanced.advdismissible == 0 && !anno.completed) {\n                    $('#controller').addClass('completion-required');\n                    if ($('#message.active').data('placement') == 'bottom' || $('#message.active').data('placement') == 'side') {\n                        $('#video-wrapper').addClass('completion-required');\n                    }\n                    if ($('#message.active').data('placement') == 'side') {\n                        $('.sidebar-nav-item').addClass('completion-required');\n                    }\n                }\n                if (anno.completed) {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').addClass('completed');\n                } else {\n                    $('.sidebar-nav-item[data-id=' + annotation.id + ']').removeClass('completed');\n                }\n            });\n\n            $(document).on('iv:autoplayBlocked', function(e) {\n                e.preventDefault();\n                if (e.originalEvent.detail.requireVideoBlock === false) {\n                    $('.video-block').remove();\n                }\n                // Append a error button.\n                $('body').append(`<button id=\"autoplay-error\" data-toggle=\"tooltip\"\n                     title=\"${M.util.get_string('autoplayblocked', 'mod_interactivevideo')}\"\n                    class=\"btn btn-danger p-2 rounded-circle pulse\"><i class=\"bi bi-x-lg\"></i></button>`);\n                $('#autoplay-error').tooltip('show');\n                $(document).on('click', '#autoplay-error', function() {\n                    $('#autoplay-error').tooltip('hide');\n                    $(this).fadeOut(300, 'swing', function() {\n                        $(this).remove();\n                    });\n                });\n            });\n\n            $(document).on('click', '#message[data-placement]:not(.active)', function(e) {\n                e.preventDefault();\n                $(this).addClass('active');\n                // Dispatch the interaction run event.\n                dispatchEvent('interactionrun', {'annotation': releventAnnotations.find(x => x.id == $(this).data('id'))});\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","quickform","dispatchEvent","ctRenderer","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","lastrun","viewedAnno","$videoNav","$interactionNav","$loader","renderAnnotationItems","async","annos","start","window","IVANNO","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","advanced","JSON","parse","visiblebeforecompleted","visibleaftercompleted","each","cstart","this","data","cend","find","id","prop","icon","formattedtitle","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","extendedcompletion","isPreviewMode","contextid","M","cfg","courseid","isNaN","playerReady","uprogress","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","Promise","resolve","time","text","css","getAnnotations","annnoitems","ajax","wwwroot","method","dataType","action","sesskey","courseContextId","userprogress","uid","previewmode","getContentTypes","when","done","progress","ct","live","completiondetails","Object","values","annotation","some","y","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","previewMode","getRelevantAnnotations","ANNOS","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","all","contentType","require","amdmodule","Type","error","initializeContentTypeRenderers","toggleClass","runInteraction","force","pause","isPaused","Set","modal","not","fadeOut","theAnnotations","theAnnotation","seek","add","hasClass","trigger","setTimeout","shareMoment","urlParams","URLSearchParams","location","search","delete","newurl","protocol","host","pathname","toString","history","replaceState","updateTime","duration","toUpdatetime","loaded","lookbacktime","onLoaded","passwordprotected","support","password","IVPLAYER","max","frequency","playbackrate","quality","ratio","usefixedratio","aspectratio","gap","attr","focus","vwrapper","document","querySelector","ResizeObserver","clientWidth","observe","scrollIntoView","behavior","block","inline","next","MAX_SAFE_INTEGER","onReady","braveEthereum","braveSolana","allowAutoplay","destroy","autohide","tooltip","audio","draggable","event","ui","$position","relX","position","left","width","formattedTime","play","lastSaved","onPaused","cancelAnimationFrame","playingInterval","t","getCurrentTime","watchedpoint","round","abs","videoEnded","onEnded","isPlaying","fadeIn","onSeek","firstPlay","resumetime","visualized","onPlaying","visualizer","mid","unMute","intervalFunction","isEnded","toFixed","percentagePlayed","useAnimationFrame","animate","requestAnimationFrame","VideoPlayer","load","useoriginalvideocontrols","autoplay","$toast","detach","on","preventDefault","stopImmediatePropagation","handleUnskippable","advskippable","originalEvent","detail","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullscreen","fullscreenElement","container","boundary","idleInterval","pauseonblur","visibilityState","setInterval","clearInterval","off","show","reload","closeButton","setItem","$this","href","shareurl","replace","navigator","clipboard","writeText","parentOffset","offset","pageX","preceedingAnno","current","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","lang","setCaption","captions","tracks","html","caption","code","label","disableinteractionclickuntilcompleted","disableinteractionclick","lastviewed","addEventListener","windowAnnos","windowAnno","starttime","Date","getTime","newstarttime","completedtime","target","anno","advdismissible","requireVideoBlock"],"mappings":"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"}