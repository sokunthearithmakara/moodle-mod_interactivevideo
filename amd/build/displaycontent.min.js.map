{"version":3,"file":"displaycontent.min.js","sources":["../src/displaycontent.js"],"sourcesContent":["/* eslint-disable complexity */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display content module\n *\n * @module     mod_interactivevideo/displaycontent\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Fragment from 'core/fragment';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n/**\n * Return main formatted content of the annotation\n * @param {Object} annotation - The annotation object\n * @param {String} [format='html'] - The format of the content, either 'html' or 'json'\n * @returns {Promise<String|Object>} - The formatted content as a string or parsed JSON object\n */\nconst renderContent = async function(annotation, format = 'html') {\n    const annotationArgs = {\n        ...annotation,\n        contextid: annotation.contextid\n    };\n    let fragment;\n    try {\n        fragment = await Fragment.loadFragment('mod_interactivevideo', 'getcontent', annotation.contextid, annotationArgs);\n    } catch (error) {\n        throw new Error(JSON.stringify(error));\n    }\n    if (format === 'html') {\n        return fragment;\n    } else {\n        return JSON.parse(fragment);\n    }\n};\n\n/**\n * Format content text\n * @param {String} text unformatted text\n * @param {Boolean} shorttext short string or text\n * @returns formatted text\n */\nconst formatText = async function(text, shorttext = false) {\n    try {\n        const response = await $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            dataType: \"text\",\n            data: {\n                text: text,\n                contextid: M.cfg.contextid,\n                action: 'format_text',\n                sesskey: M.cfg.sesskey,\n                shorttext: shorttext,\n            }\n        });\n        return response;\n    } catch (error) {\n        throw new Error('Failed to format text');\n    }\n};\n\n/**\n * Displays the content of an annotation based on the specified display options.\n *\n * @async\n * @function defaultDisplayContent\n * @param {Object} annotation - The annotation object containing details to be displayed.\n * @param {Object} player - The video player instance.\n * @returns {Promise<void>}\n *\n * @example\n * const annotation = {\n *   id: 1,\n *   displayoptions: 'popup',\n *   hascompletion: 1,\n *   xp: 10,\n *   completed: false,\n *   formattedtitle: 'Sample Annotation',\n *   prop: '{\"icon\": \"bi bi-info-circle\"}'\n * };\n * const player = videojs('my-video');\n * defaultDisplayContent(annotation, player);\n */\nconst defaultDisplayContent = async function(annotation, player) {\n    const isBS5 = $('body').hasClass('bs-5');\n    const isPlayerMode = $('body').attr('id') == 'page-mod-interactivevideo-view';\n    const isPreviewMode = annotation.previewMode;\n    const advanced = JSON.parse(annotation.advanced);\n    const isDarkMode = $('body').hasClass('darkmode');\n\n    // Play pop sound\n    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n    audio.play();\n\n    let displayoptions = annotation.displayoptions;\n\n    const responsiveDisplay = (displayoptions) => {\n        if (displayoptions == 'side') {\n            return displayoptions;\n        }\n\n        // If the theme is mobile, display the message as a popup.\n        if ($('body').hasClass('mobiletheme') && displayoptions == 'inline') {\n            displayoptions = 'popup';\n        }\n\n        if ($('body').hasClass('embed-mode')) {\n            // Check the size of the body. If it is less than 800px, display the message as inline.\n            if ($(window).width() < 1000 || $(window).height() < 500) {\n                displayoptions = 'inline';\n            } else {\n                displayoptions = displayoptions == 'inline' ? 'inline' : 'popup';\n            }\n        }\n\n        // If the wrapper is in fullscreen mode, display the message inline (on top of the video).\n        if ($('#wrapper').hasClass('fullscreen')) {\n            displayoptions = 'inline';\n        }\n        return displayoptions;\n    };\n\n    displayoptions = responsiveDisplay(displayoptions);\n\n    if (advanced.advdismissible == 0 && annotation.completed == false && annotation.hascompletion == 1\n        && isPlayerMode && !isPreviewMode) {\n        $('#controller').addClass('completion-required');\n        if (displayoptions == 'side' || displayoptions == 'bottom') {\n            $('#video-wrapper').addClass('completion-required');\n        }\n        if (displayoptions == 'side') {\n            $('.sidebar-nav-item').addClass('completion-required');\n        }\n    }\n\n    // Add completion button if the annotation has completion criteria.\n    let completionbutton = \"\";\n    // Display the xp badge conditionally.\n    if (annotation.hascompletion == 1 && annotation.xp > 0) {\n        const earned = annotation.earned == annotation.xp ? annotation.earned : annotation.earned + '/' + annotation.xp;\n        completionbutton += `<span class=\"badge ${annotation.completed ? 'alert-success' : 'iv-badge-secondary'} iv-mr-2\">\n        ${annotation.completed ? earned : Number(annotation.xp)} XP</span>`;\n    }\n    // Display the completion button conditionally.\n    if (annotation.hascompletion == 1 && annotation.completed) {\n        completionbutton += `<button id=\"completiontoggle\" class=\"btn btn-flex text-truncate mark-undone btn-success\n         btn-sm border-0\"\n             data-id=\"${annotation.id}\"><i class=\"bi bi-check2\"></i>\n             <span class=\"iv-ml-2 d-none d-sm-block\">\n             ${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}</span></button>`;\n    } else if (annotation.hascompletion == 1 && annotation.completed == false) {\n        completionbutton += `<button id=\"completiontoggle\" class=\"btn btn-flex text-truncate mark-done btn-secondary btn-sm\n         border-0\"\n             data-id=\"${annotation.id}\"><i class=\"bi bi-circle\"></i>\n             <span class=\"iv-ml-2 d-none d-sm-block\">\n             ${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}</span></button>`;\n    }\n\n    // Append refresh button after the completion button.\n    if (isPlayerMode && !isPreviewMode) {\n        completionbutton += `<button class=\"btn btn-flex btn-secondary btn-sm iv-ml-2 rotatez-360 border-0\"\n         data-id=\"${annotation.id}\" id=\"refresh\">\n        <i class=\"bi bi-arrow-repeat\"></i></button>`;\n    } else {\n        completionbutton = ``;\n    }\n\n    // Message title.\n    let prop = JSON.parse(annotation.prop);\n    let messageTitle = `<h5 class=\"modal-title text-truncate mb-0\">\n    <i class=\"${prop.icon} iv-mr-2 d-none d-md-inline\"></i><span>${annotation.formattedtitle}</span></h5>\n                            <div class=\"btns d-flex align-items-center\">\n                            ${completionbutton}\n                            <button data-id=\"${annotation.id}\"\n                             class=\"btn btn-flex mx-2 p-0 border-0 interaction-dismiss bg-transparent\" id=\"close-${annotation.id}\"\n                             aria-label=\"Close\">\n                            <i class=\"bi bi-x-lg fa-fw fs-25px\"></i>\n                            </button>\n                            </div>`;\n\n    // Hide existing modal if it shows.\n    $('#annotation-modal').modal('hide');\n\n    // Handle annotation close event:: when user click on the close button of the annotation.\n    let toast;\n    $(document).off('click', `#close-${annotation.id}`).on('click', `#close-${annotation.id}`, async function(e) {\n        e.preventDefault();\n        // Set active element to body.\n        document.body.focus();\n        const anno = window.IVANNO ? window.IVANNO.find(anno => anno.id == annotation.id) : null;\n        // Check if dimiss allowed.\n        if (isPlayerMode && !isPreviewMode) {\n            if (advanced.advdismissible == 0 && anno.completed == false && anno.hascompletion == 1) {\n                if (!toast) {\n                    toast = await import('core/toast');\n                }\n                toast.add(M.util.get_string('dismissnotallowedbeforecompletion', 'mod_interactivevideo'), {\n                    type: 'warning',\n                    delay: 3000\n                });\n                return;\n            }\n\n            const isEnded = await player.isEnded();\n            const currentTime = await player.getCurrentTime();\n            if (!isEnded || currentTime < annotation.end) {\n                if (anno && (anno.completed == true || advanced.advskippable != 0)) { // Do not auto resume if not skippable.\n                    player.play();\n                }\n            }\n        }\n\n        if (displayoptions == 'side') {\n            $('body').removeClass('hassidebar');\n            $('#annotation-sidebar').addClass('hide');\n            if (isPlayerMode && !isPreviewMode) {\n                $(this).closest(\"#message\").removeClass('active');\n                dispatchEvent('interactionclose', {\n                    annotation: annotation,\n                });\n            }\n            return;\n        }\n        // Trigger the close event.\n        $('#annotation-modal').fadeOut(300, function() {\n            $(this).trigger(ModalEvents.hidden);\n        });\n        const targetMessage = $(this).closest(\"#message\");\n        targetMessage.removeClass('active');\n        targetMessage.addClass('bottom-0');\n        targetMessage.remove();\n        if (isPlayerMode && !isPreviewMode) {\n            setTimeout(function() {\n                dispatchEvent('interactionclose', {\n                    annotation: annotation,\n                });\n            }, 100);\n        }\n    });\n\n    const handlePopupDisplay = (annotation, messageTitle) => {\n        $('#annotation-modal').remove();\n        return new Promise((resolve, reject) => {\n            ModalFactory.create({\n                body: `<div class=\"modal-body loader\"></div>`,\n                large: true,\n                show: false,\n                removeOnClose: true,\n                isVerticallyCentered: true,\n            }).then((modal) => {\n                let root = modal.getRoot();\n                root.attr('id', 'annotation-modal');\n                root.attr('data-id', annotation.id);\n                // Disable keyboard dismiss.\n                root.attr({\n                    'data-bs-backdrop': 'static',\n                    'data-bs-keyboard': 'false',\n                });\n\n                // eslint-disable-next-line promise/always-return\n                if ($('body').hasClass('iframe')) {\n                    root.addClass('modal-fullscreen');\n                }\n\n                root.find('.modal-dialog').attr('data-id', annotation.id);\n                root.find('.modal-dialog').attr('data-placement', 'popup');\n                root.find('.modal-dialog').attr('id', 'message');\n                root.find('.modal-dialog').addClass('active ' + annotation.type);\n                root.find('#message').html(`<div class=\"modal-content iv-rounded-lg\">\n                        <div class=\"modal-header d-flex align-items-center shadow-sm iv-pr-0 iv-pl-3\" id=\"title\">\n                            ${messageTitle}\n                        </div>\n                        <div class=\"modal-body\" id=\"content\">\n                        </div>\n                        </div>\n                    </div>`);\n\n                root.off(ModalEvents.hidden).on(ModalEvents.hidden, function() {\n                    root.attr('data-region', 'modal-container');\n                    modal.destroy();\n                });\n\n                // If click outside the modal, add jelly animation.\n                root.off('click').on('click', function(e) {\n                    if ($(e.target).closest('.modal-content').length === 0) {\n                        root.addClass('jelly-anim');\n                    }\n                });\n\n                // When modal is shown, resolve the promise.\n                root.off(ModalEvents.shown).on(ModalEvents.shown, function() {\n                    root.attr('data-region', 'popup'); // Must set to avoid dismissing the modal when clicking outside.\n                    setTimeout(() => {\n                        root.addClass('jelly-anim');\n                    }, 10);\n                    $('#annotation-modal .modal-body').fadeIn(300);\n                    // Dispatch 'shown.bs.modal' event.\n                    dispatchEvent('shown.bs.modal', {\n                        annotation: {\n                            id: annotation.id\n                        }\n                    }, document.querySelector('#annotation-modal'));\n                    resolve(true);\n                });\n\n                root.on('animationend', function() {\n                    root.removeClass('jelly-anim');\n                });\n\n                modal.show();\n\n            }).catch(reject);\n        });\n    };\n\n    const handleInlineDisplay = (annotation, messageTitle) => {\n        return new Promise((resolve) => {\n            $('#video-wrapper').append(`<div id=\"message\" style=\"z-index:105;top:100%\" data-placement=\"inline\"\n         data-id=\"${annotation.id}\" class=\"${annotation.type} active modal\" tabindex=\"0\">\n        <div id=\"title\" class=\"modal-header shadow-sm iv-pr-0 iv-pl-3 iv-rounded-0\">\n        ${messageTitle}</div><div class=\"modal-body\" id=\"content\">\n        </div></div>`);\n            $(`#message[data-id='${annotation.id}']`).animate({\n                top: '0',\n            }, 300, 'linear', function() {\n                resolve();\n            });\n        });\n    };\n\n    const handleBottomDisplay = (annotation, messageTitle, isDarkMode) => {\n        return new Promise((resolve) => {\n            $('#annotation-content').empty();\n            $('#annotation-content').append(`<div id=\"message\" class=\"active fade show mt-3 ${!isDarkMode ? 'border' : ''}\n                 iv-rounded-lg bg-white ${annotation.type}\" data-placement=\"bottom\" data-id=\"${annotation.id}\" tabindex=\"0\">\n                 <div id='title' class='modal-header shadow-sm iv-pr-0 iv-pl-3'>${messageTitle}</div>\n                <div class=\"modal-body\" id=\"content\"></div></div>`);\n            $('html, body, #page.drawers, .modal-body').animate({\n                scrollTop: $(\"#annotation-content\").offset().top\n            }, 1000, 'swing', function() {\n                resolve();\n            });\n        });\n    };\n\n    const handleSideDisplay = (annotation, messageTitle) => {\n        $('body').addClass('hassidebar');\n        // Make sure all sidebar are hidden.\n        $('#wrapper .iv-sidebar').addClass('hide');\n        // Create sidebar if it does not exist.\n        let $sidebar;\n        if ($('#wrapper #annotation-sidebar').length == 0) {\n            $('#wrapper').append(`<div id=\"annotation-sidebar\" class=\"iv-sidebar p-0 hide\">\n                <div id=\"sidebar-nav\" class=\"d-flex w-100\"></div>\n                <div id=\"sidebar-content\" class=\"p-0\"></div>\n                </div>`);\n            $sidebar = $('#annotation-sidebar');\n            // Initialize resizable.\n            const rtl = $('body').hasClass('dir-rtl');\n            $sidebar.resizable({\n                handles: rtl ? 'e' : 'w',\n                minWidth: 475,\n                container: 'body',\n                start: function() {\n                    if (rtl) {\n                        $(this).css('right', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-e').css({\n                            'width': '100%',\n                            'right': '-50%',\n                        });\n                    } else {\n                        $(this).css('left', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-w').css({\n                            'width': '100%',\n                            'left': '-50%',\n                        });\n                    }\n\n                    $(this).addClass('no-pointer-event');\n                },\n                resize: function(event, ui) {\n                    if (ui.position.left < 0) {\n                        ui.position.left = 0;\n                        ui.position.width = '100%';\n                    }\n                },\n                stop: function() {\n                    if (rtl) {\n                        $(this).css('right', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-e').css({\n                            'width': '7px',\n                            'right': '-3px'\n                        });\n                    } else {\n                        $(this).css('left', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-w').css({\n                            'width': '7px',\n                            'left': '-3px'\n                        });\n                    }\n                    $(this).removeClass('no-pointer-event');\n                }\n            });\n            // Switch between messages.\n            $(document).on('click', '#sidebar-nav .sidebar-nav-item', async function() {\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                if (current) {\n                    $(`#sidebar-content #message[data-id='${current}']`).removeClass('active');\n                    dispatchEvent('interactionclose', {\n                        annotation: {\n                            id: current\n                        }\n                    });\n                }\n                const target = $(this).data('id');\n                $(this).addClass('active').siblings().removeClass('active');\n                $('#sidebar-content #message').fadeOut(300);\n                $(`#sidebar-content #message[data-id='${target}']`).fadeIn(300).addClass('active');\n                const isPaused = await player.isPaused();\n                if (isPaused) {\n                    dispatchEvent('interactionrun', {\n                        annotation: {\n                            id: target\n                        }\n                    });\n                }\n\n            });\n        }\n        $sidebar = $('#annotation-sidebar');\n        // Add annotation toggle button if it does not exist.\n        if (isPlayerMode || isPreviewMode) {\n            if ($('#wrapper #toolbar #annotation-toggle').length == 0) {\n                $('#wrapper #toolbar')\n                    .append(`<button id=\"annotation-toggle\" class=\"btn btn-sm border-0\">\n                    <i class=\"bi bi-chevron-left\"></i></button>`);\n            }\n        }\n        // Show the sidebar.\n        $sidebar.removeClass('hide');\n        // Replace the navigation item if it exists.\n        if ($(`#sidebar-nav .sidebar-nav-item[data-id='${annotation.id}']`).length == 0) {\n            // Add a navigation item.\n            let clss = '';\n            if (annotation.hascompletion == 1 && annotation.completed == true) {\n                clss += ' completed';\n            }\n            if (annotation.hascompletion != 1) {\n                clss += ' no-completion';\n            }\n\n            $sidebar.find('#sidebar-nav').append(`<div class=\"sidebar-nav-item active w-100 ${clss}\"\n                 data${isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n            data${isBS5 ? '-bs' : ''}-html=\"true\" title=\"<i class='${prop.icon} iv-mr-2'></i>${annotation.formattedtitle}\"\n            data-id=\"${annotation.id}\" data-timestamp=\"${annotation.timestamp}\"></div>`);\n\n            // Set the tooltip.\n            $(`#sidebar-nav .sidebar-nav-item[data-id='${annotation.id}']`).tooltip();\n\n            // Sort the navigation items.\n            $sidebar.find('#sidebar-nav .sidebar-nav-item').sort(function(a, b) {\n                return $(a).data('timestamp') - $(b).data('timestamp');\n            }).appendTo('#annotation-sidebar #sidebar-nav');\n        }\n        // Hide other messages on the sidebar.\n        $sidebar.find('#message').fadeOut(300);\n        $sidebar.find('#sidebar-nav .sidebar-nav-item:not([data-id=\"' + annotation.id + '\"])').removeClass('active');\n        if ($sidebar.find('#message.active').length > 0) {\n            dispatchEvent('interactionclose', {\n                annotation: {\n                    id: $(`#annotation-sidebar #message.active`).data('id')\n                }\n            });\n        }\n        $sidebar.find(`#message:not([data-id='${annotation.id}'])`).removeClass('active');\n        // Append the message to the sidebar.\n        $sidebar.find('#sidebar-content').append(`<div id=\"message\" data-placement=\"side\"\n                    data-id=\"${annotation.id}\" class=\"${annotation.type} sticky active\" tabindex=\"0\">\n                    <div id=\"title\" class=\"modal-header shadow-sm iv-pr-0 iv-pl-3 border-bottom\">${messageTitle}</div>\n                    <div class=\"modal-body\" id=\"content\"></div>\n                    </div>`);\n        return new Promise((resolve) => {\n            $sidebar.find('#message.active').fadeIn(300, function() {\n                resolve();\n            });\n        });\n    };\n\n    switch (displayoptions) {\n        case 'popup':\n            await handlePopupDisplay(annotation, messageTitle);\n            break;\n        case 'inline':\n            await handleInlineDisplay(annotation, messageTitle);\n            break;\n        case 'bottom':\n            await handleBottomDisplay(annotation, messageTitle, isDarkMode);\n            break;\n        case 'side':\n            await handleSideDisplay(annotation, messageTitle, isDarkMode);\n            break;\n    }\n\n    return true;\n};\n\nexport {renderContent, defaultDisplayContent, formatText};\n"],"names":["async","annotation","format","annotationArgs","contextid","fragment","Fragment","loadFragment","error","Error","JSON","stringify","parse","text","shorttext","$","ajax","url","M","cfg","wwwroot","type","dataType","data","action","sesskey","player","isBS5","hasClass","isPlayerMode","attr","isPreviewMode","previewMode","advanced","isDarkMode","Audio","play","displayoptions","window","width","height","responsiveDisplay","advdismissible","completed","hascompletion","addClass","completionbutton","xp","earned","Number","id","util","get_string","toast","prop","messageTitle","icon","formattedtitle","modal","document","off","on","e","preventDefault","body","focus","anno","IVANNO","find","add","delay","isEnded","currentTime","getCurrentTime","end","advskippable","removeClass","this","closest","fadeOut","trigger","ModalEvents","hidden","targetMessage","remove","setTimeout","handleSideDisplay","$sidebar","length","append","rtl","resizable","handles","minWidth","container","start","css","resize","event","ui","position","left","stop","current","target","siblings","fadeIn","isPaused","clss","timestamp","tooltip","sort","a","b","appendTo","Promise","resolve","reject","create","large","show","removeOnClose","isVerticallyCentered","then","root","getRoot","html","destroy","shown","querySelector","catch","handlePopupDisplay","animate","top","handleInlineDisplay","empty","scrollTop","offset","handleBottomDisplay"],"mappings":"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"}