{"version":3,"file":"displaycontent.min.js","sources":["../src/displaycontent.js"],"sourcesContent":["/* eslint-disable complexity */\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display content module\n *\n * @module     mod_interactivevideo/displaycontent\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Fragment from 'core/fragment';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\n\n/**\n * Return main formatted content of the annotation\n * @param {Object} annotation - The annotation object\n * @param {String} [format='html'] - The format of the content, either 'html' or 'json'\n * @returns {Promise<String|Object>} - The formatted content as a string or parsed JSON object\n */\nconst renderContent = async function(annotation, format = 'html') {\n    const annotationArgs = {\n        ...annotation,\n        contextid: annotation.contextid\n    };\n    let fragment;\n    try {\n        fragment = await Fragment.loadFragment('mod_interactivevideo', 'getcontent', annotation.contextid, annotationArgs);\n    } catch (error) {\n        throw new Error(JSON.stringify(error));\n    }\n    if (format === 'html') {\n        return fragment;\n    } else {\n        return JSON.parse(fragment);\n    }\n};\n\n/**\n * Format content text\n * @param {String} text unformatted text\n * @param {Boolean} shorttext short string or text\n * @returns formatted text\n */\nconst formatText = async function(text, shorttext = false) {\n    try {\n        const response = await $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            dataType: \"text\",\n            data: {\n                text: text,\n                contextid: M.cfg.contextid,\n                action: 'format_text',\n                sesskey: M.cfg.sesskey,\n                shorttext: shorttext,\n            }\n        });\n        return response;\n    } catch (error) {\n        throw new Error('Failed to format text');\n    }\n};\n\n/**\n * Displays the content of an annotation based on the specified display options.\n *\n * @async\n * @function defaultDisplayContent\n * @param {Object} annotation - The annotation object containing details to be displayed.\n * @param {Object} player - The video player instance.\n * @returns {Promise<void>}\n *\n * @example\n * const annotation = {\n *   id: 1,\n *   displayoptions: 'popup',\n *   hascompletion: 1,\n *   xp: 10,\n *   completed: false,\n *   formattedtitle: 'Sample Annotation',\n *   prop: '{\"icon\": \"bi bi-info-circle\"}'\n * };\n * const player = videojs('my-video');\n * defaultDisplayContent(annotation, player);\n */\nconst defaultDisplayContent = async function(annotation, player) {\n    let $body = $('body');\n    const isBS5 = $body.hasClass('bs-5');\n    const isPlayerMode = $body.attr('id') == 'page-mod-interactivevideo-view';\n    const isPreviewMode = annotation.previewMode || false;\n    const advanced = JSON.parse(annotation.advanced);\n    const isDarkMode = $body.hasClass('darkmode');\n\n    // Play pop sound\n    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n    audio.play();\n\n    let displayoptions = annotation.displayoptions;\n\n    const responsiveDisplay = (displayoptions) => {\n        if (displayoptions == 'side') {\n            return displayoptions;\n        }\n\n        // If the theme is mobile, display the message as a popup.\n        if ($body.hasClass('mobiletheme') && displayoptions == 'inline') {\n            displayoptions = 'popup';\n        }\n\n        if ($body.hasClass('embed-mode')) {\n            // Check the size of the body. If it is less than 800px, display the message as inline.\n            if ($(window).width() < 1000 || $(window).height() < 500) {\n                displayoptions = 'inline';\n            } else {\n                displayoptions = displayoptions == 'inline' ? 'inline' : 'popup';\n            }\n        }\n\n        // If the wrapper is in fullscreen mode, display the message inline (on top of the video).\n        if ($('#wrapper').hasClass('fullscreen')) {\n            displayoptions = 'inline';\n        }\n        return displayoptions;\n    };\n\n    displayoptions = responsiveDisplay(displayoptions);\n\n    if (advanced.advdismissible == 0 && annotation.completed == false && annotation.hascompletion == 1\n        && isPlayerMode && !isPreviewMode) {\n        $('#controller').addClass('completion-required');\n        if (displayoptions == 'side' || displayoptions == 'bottom') {\n            $('#video-wrapper').addClass('completion-required');\n        }\n        if (displayoptions == 'side') {\n            $('.sidebar-nav-item').addClass('completion-required');\n        }\n    }\n\n    // Add completion button if the annotation has completion criteria.\n    let completionbutton = \"\";\n    // Display the xp badge conditionally.\n    if (annotation.hascompletion == 1 && annotation.xp > 0) {\n        const earned = annotation.earned == annotation.xp ? annotation.earned : annotation.earned + '/' + annotation.xp;\n        completionbutton += `<span class=\"badge ${annotation.completed ? 'alert-success' : 'iv-badge-secondary'} iv-mr-2\">\n        ${annotation.completed ? earned : Number(annotation.xp)} XP</span>`;\n    }\n    // Display the completion button conditionally.\n\n    completionbutton += await Templates.render('mod_interactivevideo/player/completionbutton', {\n        id: annotation.id,\n        iscompleted: annotation.completed,\n        isPlayerMode: isPlayerMode && !isPreviewMode,\n        refreshonly: annotation.hascompletion != 1\n    });\n\n    // Append refresh button after the completion button.\n    if (!isPlayerMode || isPreviewMode) {\n        completionbutton = ``;\n    }\n\n    // Message title.\n    let prop = JSON.parse(annotation.prop);\n    let messageTitle = await Templates.render('mod_interactivevideo/player/messagetitle', {\n        icon: prop.icon || 'bi bi-info-circle',\n        title: annotation.formattedtitle || '',\n        completionbutton: completionbutton,\n        id: annotation.id,\n    });\n\n    // Hide existing modal if it shows.\n    $('#annotation-modal').modal('hide');\n\n    // Handle annotation close event:: when user click on the close button of the annotation.\n    let toast;\n    $(document).off('click', `#close-${annotation.id}`).on('click', `#close-${annotation.id}`, async function(e) {\n        e.preventDefault();\n        $('.tooltip').remove();\n        // Set active element to body.\n        document.body.focus();\n        const anno = window.IVANNO ? window.IVANNO.find(anno => anno.id == annotation.id) : null;\n        // Check if dimiss allowed.\n        if (isPlayerMode && !isPreviewMode) {\n            if (advanced.advdismissible == 0 && anno.completed == false && anno.hascompletion == 1) {\n                if (!toast) {\n                    toast = await import('core/toast');\n                }\n                toast.add(M.util.get_string('dismissnotallowedbeforecompletion', 'mod_interactivevideo'), {\n                    type: 'warning',\n                    delay: 3000\n                });\n                return;\n            }\n\n            const isEnded = await player.isEnded();\n            const currentTime = await player.getCurrentTime();\n            if (!isEnded || currentTime < annotation.end) {\n                if (anno && (anno.completed == true || advanced.advskippable != 0)) { // Do not auto resume if not skippable.\n                    player.play();\n                }\n            }\n        }\n\n        if (displayoptions == 'side') {\n            $body.removeClass('hassidebar');\n            $('#annotation-sidebar').addClass('hide');\n            if (isPlayerMode && !isPreviewMode) {\n                $(this).closest(\"#message\").removeClass('active');\n                dispatchEvent('interactionclose', {\n                    annotation: annotation,\n                });\n            }\n            return;\n        }\n        // Trigger the close event.\n        $('#annotation-modal').fadeOut(300, function() {\n            $(this).trigger(ModalEvents.hidden);\n        });\n        const targetMessage = $(this).closest(\"#message\");\n        targetMessage.remove();\n        if (isPlayerMode && !isPreviewMode) {\n            setTimeout(function() {\n                dispatchEvent('interactionclose', {\n                    annotation: annotation,\n                });\n            }, 100);\n        }\n    });\n\n    const handlePopupDisplay = (annotation, messageTitle) => {\n        $('#annotation-modal').remove();\n        return new Promise((resolve, reject) => {\n            ModalFactory.create({\n                body: `<div class=\"modal-body loader\"></div>`,\n                large: true,\n                show: false,\n                removeOnClose: true,\n                isVerticallyCentered: true,\n            }).then((modal) => {\n                let root = modal.getRoot();\n                root.attr({\n                    'id': 'annotation-modal',\n                    'data-id': annotation.id,\n                });\n\n                // eslint-disable-next-line promise/always-return\n                if ($body.hasClass('iframe')) {\n                    root.addClass('modal-fullscreen');\n                }\n\n                root.find('.modal-dialog')\n                    .attr({\n                        'data-id': annotation.id,\n                        'data-placement': 'popup',\n                        'id': 'message'\n                    })\n                    .addClass('active ' + annotation.type);\n                root.find('#message').html(`<div class=\"modal-content iv-rounded-lg\">\n                        <div class=\"modal-header d-flex align-items-center shadow-sm\" id=\"title\">\n                            ${messageTitle}\n                        </div>\n                        <div class=\"modal-body\" id=\"content\">\n                        </div>\n                        </div>\n                    </div>`);\n\n                root.off(ModalEvents.hidden).on(ModalEvents.hidden, function() {\n                    root.attr('data-region', 'modal-container');\n                    modal.destroy();\n                });\n\n                // If click outside the modal, add jelly animation.\n                root.off('click.modal').on('click.modal', function(e) {\n                    if ($(e.target).closest('.modal-content').length === 0) {\n                        root.addClass('jelly-anim');\n                    }\n                });\n\n                // When modal is shown, resolve the promise.\n                root.off(ModalEvents.shown).on(ModalEvents.shown, function() {\n                    root.attr('data-region', 'popup'); // Must set to avoid dismissing the modal when clicking outside.\n                    setTimeout(() => {\n                        root.addClass('jelly-anim');\n                    }, 10);\n                    $('#annotation-modal .modal-body').fadeIn(300);\n                    // Dispatch 'shown.bs.modal' event.\n                    dispatchEvent('shown.bs.modal', {\n                        annotation: {\n                            id: annotation.id\n                        }\n                    }, document.querySelector('#annotation-modal'));\n                    resolve(true);\n                });\n\n                root.on('animationend', function() {\n                    root.removeClass('jelly-anim');\n                });\n\n                modal.show();\n\n            }).catch(reject);\n        });\n    };\n\n    const handleInlineDisplay = (annotation, messageTitle) => {\n        return new Promise((resolve) => {\n            $('#video-wrapper').append(`<div id=\"message\" style=\"z-index:105;top:100%\" data-placement=\"inline\"\n         data-id=\"${annotation.id}\" class=\"${annotation.type} active modal\" tabindex=\"0\">\n        <div id=\"title\" class=\"modal-header shadow-sm iv-rounded-0\">\n        ${messageTitle}</div><div class=\"modal-body\" id=\"content\">\n        </div></div>`);\n            $(`#message[data-id='${annotation.id}']`).animate({\n                top: '0',\n            }, 300, 'linear', function() {\n                resolve();\n            });\n        });\n    };\n\n    const handleBottomDisplay = (annotation, messageTitle, isDarkMode) => {\n        return new Promise((resolve) => {\n            $('#annotation-content').html(`<div id=\"message\" class=\"active fade show mt-3 ${!isDarkMode ? 'border' : ''}\n                 iv-rounded-lg bg-white ${annotation.type}\" data-placement=\"bottom\" data-id=\"${annotation.id}\" tabindex=\"0\">\n                 <div id='title' class='modal-header shadow-sm px-2'>${messageTitle}</div>\n                <div class=\"modal-body\" id=\"content\"></div></div>`);\n            $('html, body, #page.drawers, .modal-body').animate({\n                scrollTop: $(\"#annotation-content\").offset().top\n            }, 1000, 'swing', function() {\n                resolve();\n            });\n        });\n    };\n\n    const handleSideDisplay = (annotation, messageTitle) => {\n        const rtl = $body.hasClass('dir-rtl');\n        $body.addClass('hassidebar');\n        // Make sure all sidebar are hidden.\n        $('#wrapper .iv-sidebar').addClass('hide');\n        // Create sidebar if it does not exist.\n        let $sidebar;\n        if ($('#wrapper #annotation-sidebar').length == 0) {\n            $('#wrapper').append(`<div id=\"annotation-sidebar\" class=\"iv-sidebar p-0 hide\">\n                <div id=\"sidebar-nav\" class=\"d-flex w-100\"></div>\n                <div id=\"sidebar-content\" class=\"p-0\"></div>\n                </div>`);\n            $sidebar = $('#annotation-sidebar');\n            // Initialize resizable.\n            $sidebar.resizable({\n                handles: rtl ? 'e' : 'w',\n                minWidth: 475,\n                container: 'body',\n                start: function() {\n                    if (rtl) {\n                        $(this).css('right', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-e').css({\n                            'width': '100%',\n                            'right': '-50%',\n                        });\n                    } else {\n                        $(this).css('left', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-w').css({\n                            'width': '100%',\n                            'left': '-50%',\n                        });\n                    }\n\n                    $(this).addClass('no-pointer-event');\n                },\n                resize: function(event, ui) {\n                    if (ui.position.left < 0) {\n                        ui.position.left = 0;\n                        ui.position.width = '100%';\n                    }\n                },\n                stop: function() {\n                    if (rtl) {\n                        $(this).css('right', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-e').css({\n                            'width': '7px',\n                            'right': '-3px'\n                        });\n                    } else {\n                        $(this).css('left', 'auto');\n                        $(this).find('.ui-resizable-handle.ui-resizable-w').css({\n                            'width': '7px',\n                            'left': '-3px'\n                        });\n                    }\n                    $(this).removeClass('no-pointer-event');\n                }\n            });\n            // Switch between messages.\n            $(document).on('click', '#sidebar-nav .sidebar-nav-item', async function() {\n                const current = $(`#sidebar-nav .sidebar-nav-item.active`).data('id');\n                const $sidebarcontent = $('#sidebar-content');\n                if (current) {\n                    $sidebarcontent.find(`#message[data-id='${current}']`).removeClass('active');\n                    dispatchEvent('interactionclose', {\n                        annotation: {\n                            id: current\n                        }\n                    });\n                }\n                const target = $(this).data('id');\n                $(this).addClass('active').siblings().removeClass('active');\n                $sidebarcontent.find('#message').fadeOut(300);\n                $sidebarcontent.find(`#message[data-id='${target}']`).fadeIn(300).addClass('active');\n                const isPaused = await player.isPaused();\n                if (isPaused) {\n                    dispatchEvent('interactionrun', {\n                        annotation: {\n                            id: target\n                        }\n                    });\n                }\n\n            });\n        }\n        $sidebar = $('#annotation-sidebar');\n        // Add annotation toggle button if it does not exist.\n        if (isPlayerMode || isPreviewMode) {\n            if ($('#wrapper #toolbar #annotation-toggle').length == 0) {\n                $('#wrapper #toolbar')\n                    .append(`<button id=\"annotation-toggle\" class=\"btn btn-sm border-0\">\n                    <i class=\"bi bi-chevron-${rtl ? 'right' : 'left'}\"></i></button>`);\n            }\n        }\n        // Show the sidebar.\n        $sidebar.removeClass('hide');\n        // Replace the navigation item if it exists.\n        if ($(`#sidebar-nav .sidebar-nav-item[data-id='${annotation.id}']`).length == 0) {\n            // Add a navigation item.\n            let clss = '';\n            if (annotation.hascompletion == 1 && annotation.completed == true) {\n                clss += ' completed';\n            }\n            if (annotation.hascompletion != 1) {\n                clss += ' no-completion';\n            }\n\n            $sidebar.find('#sidebar-nav').append(`<div class=\"sidebar-nav-item active w-100 ${clss}\"\n                 data${isBS5 ? '-bs' : ''}-toggle=\"tooltip\"\n            data${isBS5 ? '-bs' : ''}-html=\"true\" title=\"<i class='${prop.icon} iv-mr-2'></i>${annotation.formattedtitle}\"\n            data-id=\"${annotation.id}\" data-timestamp=\"${annotation.timestamp}\"></div>`);\n\n            // Set the tooltip.\n            $(`#sidebar-nav .sidebar-nav-item[data-id='${annotation.id}']`).tooltip();\n\n            // Sort the navigation items.\n            $sidebar.find('#sidebar-nav .sidebar-nav-item').sort(function(a, b) {\n                return $(a).data('timestamp') - $(b).data('timestamp');\n            }).appendTo('#annotation-sidebar #sidebar-nav');\n        }\n        // Hide other messages on the sidebar.\n        $sidebar.find('#message').fadeOut(300);\n        $sidebar.find('#sidebar-nav .sidebar-nav-item:not([data-id=\"' + annotation.id + '\"])').removeClass('active');\n        if ($sidebar.find('#message.active').length > 0) {\n            dispatchEvent('interactionclose', {\n                annotation: {\n                    id: $(`#annotation-sidebar #message.active`).data('id')\n                }\n            });\n        }\n        $sidebar.find(`#message:not([data-id='${annotation.id}'])`).removeClass('active');\n        // Append the message to the sidebar.\n        $sidebar.find('#sidebar-content').append(`<div id=\"message\" data-placement=\"side\"\n                    data-id=\"${annotation.id}\" class=\"${annotation.type} sticky active\" tabindex=\"0\">\n                    <div id=\"title\" class=\"modal-header shadow-sm border-bottom\">${messageTitle}</div>\n                    <div class=\"modal-body\" id=\"content\"></div>\n                    </div>`);\n        return new Promise((resolve) => {\n            $sidebar.find('#message.active').fadeIn(300, function() {\n                resolve();\n            });\n        });\n    };\n\n    switch (displayoptions) {\n        case 'popup':\n            await handlePopupDisplay(annotation, messageTitle);\n            break;\n        case 'inline':\n            await handleInlineDisplay(annotation, messageTitle);\n            break;\n        case 'bottom':\n            await handleBottomDisplay(annotation, messageTitle, isDarkMode);\n            break;\n        case 'side':\n            await handleSideDisplay(annotation, messageTitle, isDarkMode);\n            break;\n    }\n\n    return true;\n};\n\nexport {renderContent, defaultDisplayContent, formatText};\n"],"names":["async","annotation","format","annotationArgs","contextid","fragment","Fragment","loadFragment","error","Error","JSON","stringify","parse","text","shorttext","$","ajax","url","M","cfg","wwwroot","type","dataType","data","action","sesskey","player","$body","isBS5","hasClass","isPlayerMode","attr","isPreviewMode","previewMode","advanced","isDarkMode","Audio","play","displayoptions","window","width","height","responsiveDisplay","advdismissible","completed","hascompletion","addClass","completionbutton","xp","earned","Number","Templates","render","id","iscompleted","refreshonly","toast","prop","messageTitle","icon","title","formattedtitle","modal","document","off","on","e","preventDefault","remove","body","focus","anno","IVANNO","find","add","util","get_string","delay","isEnded","currentTime","getCurrentTime","end","advskippable","removeClass","this","closest","fadeOut","trigger","ModalEvents","hidden","setTimeout","handleSideDisplay","rtl","$sidebar","length","append","resizable","handles","minWidth","container","start","css","resize","event","ui","position","left","stop","current","$sidebarcontent","target","siblings","fadeIn","isPaused","clss","timestamp","tooltip","sort","a","b","appendTo","Promise","resolve","reject","create","large","show","removeOnClose","isVerticallyCentered","then","root","getRoot","html","destroy","shown","querySelector","catch","handlePopupDisplay","animate","top","handleInlineDisplay","scrollTop","offset","handleBottomDisplay"],"mappings":"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"}